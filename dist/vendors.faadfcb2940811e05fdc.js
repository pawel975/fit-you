/*! For license information please see vendors.faadfcb2940811e05fdc.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([[216],{6124:(t,e,i)=>{"use strict";if(i(1934),i(5654),i(7694),i.g._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");function n(t,e,i){t[e]||Object.defineProperty(t,e,{writable:!0,configurable:!0,value:i})}i.g._babelPolyfill=!0,n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach((function(t){[][t]&&n(Array,t,Function.call.bind([][t]))}))},5654:function(t,e,i){!function(e){"use strict";var i,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",l=e.regeneratorRuntime;if(l)t.exports=l;else{(l=e.regeneratorRuntime=t.exports).wrap=b;var h="suspendedStart",u="suspendedYield",f="executing",d="completed",p={},g={};g[s]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(D([])));v&&v!==n&&r.call(v,s)&&(g=v);var x=M.prototype=_.prototype=Object.create(g);w.prototype=x.constructor=M,M.constructor=w,M[c]=w.displayName="GeneratorFunction",l.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===w||"GeneratorFunction"===(e.displayName||e.name))},l.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,M):(t.__proto__=M,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(x),t},l.awrap=function(t){return{__await:t}},S(k.prototype),k.prototype[a]=function(){return this},l.AsyncIterator=k,l.async=function(t,e,i,n){var r=new k(b(t,e,i,n));return l.isGeneratorFunction(e)?r:r.next().then((function(t){return t.done?t.value:r.next()}))},S(x),x[c]="Generator",x[s]=function(){return this},x.toString=function(){return"[object Generator]"},l.keys=function(t){var e=[];for(var i in t)e.push(i);return e.reverse(),function i(){for(;e.length;){var n=e.pop();if(n in t)return i.value=n,i.done=!1,i}return i.done=!0,i}},l.values=D,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=i,this.done=!1,this.delegate=null,this.method="next",this.arg=i,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=i)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=i),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return n("end");if(s.tryLoc<=this.prev){var c=r.call(s,"catchLoc"),l=r.call(s,"finallyLoc");if(c&&l){if(this.prev<s.catchLoc)return n(s.catchLoc,!0);if(this.prev<s.finallyLoc)return n(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return n(s.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return n(s.finallyLoc)}}}},abrupt:function(t,e){for(var i=this.tryEntries.length-1;i>=0;--i){var n=this.tryEntries[i];if(n.tryLoc<=this.prev&&r.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,p):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),p},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),E(i),p}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var r=n.arg;E(i)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:D(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=i),p}}}function b(t,e,i,n){var r=e&&e.prototype instanceof _?e:_,o=Object.create(r.prototype),s=new A(n||[]);return o._invoke=function(t,e,i){var n=h;return function(r,o){if(n===f)throw new Error("Generator is already running");if(n===d){if("throw"===r)throw o;return L()}for(i.method=r,i.arg=o;;){var s=i.delegate;if(s){var a=P(s,i);if(a){if(a===p)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(n===h)throw n=d,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n=f;var c=y(t,e,i);if("normal"===c.type){if(n=i.done?d:u,c.arg===p)continue;return{value:c.arg,done:i.done}}"throw"===c.type&&(n=d,i.method="throw",i.arg=c.arg)}}}(t,i,s),o}function y(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}function _(){}function w(){}function M(){}function S(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function k(t){function i(e,n,o,s){var a=y(t[e],t,n);if("throw"!==a.type){var c=a.arg,l=c.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then((function(t){i("next",t,o,s)}),(function(t){i("throw",t,o,s)})):Promise.resolve(l).then((function(t){c.value=t,o(c)}),s)}s(a.arg)}var n;"object"==typeof e.process&&e.process.domain&&(i=e.process.domain.bind(i)),this._invoke=function(t,e){function r(){return new Promise((function(n,r){i(t,e,n,r)}))}return n=n?n.then(r,r):r()}}function P(t,e){var n=t.iterator[e.method];if(n===i){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=i,P(t,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var r=y(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,p;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=i),e.delegate=null,p):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function D(t){if(t){var e=t[s];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=i,e.done=!0,e};return o.next=o}}return{next:L}}function L(){return{value:i,done:!0}}}("object"==typeof i.g?i.g:"object"==typeof window?window:"object"==typeof self?self:this)},9403:(t,e,i)=>{"use strict";i.d(e,{Z:()=>$o});const n="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function r(t,e,i){const r=i||(t=>Array.prototype.slice.call(t));let o=!1,s=[];return function(...i){s=r(i),o||(o=!0,n.call(window,(()=>{o=!1,t.apply(e,s)})))}}const o=t=>"start"===t?"left":"end"===t?"right":"center",s=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function a(){}const c=function(){let t=0;return function(){return t++}}();function l(t){return null==t}function h(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function u(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const f=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function d(t,e){return f(t)?t:e}function p(t,e){return void 0===t?e:t}const g=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function m(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function v(t,e,i,n){let r,o,s;if(h(t))if(o=t.length,n)for(r=o-1;r>=0;r--)e.call(i,t[r],r);else for(r=0;r<o;r++)e.call(i,t[r],r);else if(u(t))for(s=Object.keys(t),o=s.length,r=0;r<o;r++)e.call(i,t[s[r]],s[r])}function x(t,e){let i,n,r,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(r=t[i],o=e[i],r.datasetIndex!==o.datasetIndex||r.index!==o.index)return!1;return!0}function b(t){if(h(t))return t.map(b);if(u(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let r=0;for(;r<n;++r)e[i[r]]=b(t[i[r]]);return e}return t}function y(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function _(t,e,i,n){if(!y(t))return;const r=e[t],o=i[t];u(r)&&u(o)?w(r,o,n):e[t]=b(o)}function w(t,e,i){const n=h(e)?e:[e],r=n.length;if(!u(t))return t;const o=(i=i||{}).merger||_;for(let s=0;s<r;++s){if(!u(e=n[s]))continue;const r=Object.keys(e);for(let n=0,s=r.length;n<s;++n)o(r[n],t,e,i)}return t}function M(t,e){return w(t,e,{merger:S})}function S(t,e,i){if(!y(t))return;const n=e[t],r=i[t];u(n)&&u(r)?M(n,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=b(r))}function k(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function P(t,e){if(""===e)return t;let i=0,n=k(e,i);for(;t&&n>i;)t=t[e.substr(i,n-i)],i=n+1,n=k(e,i);return t}function O(t){return t.charAt(0).toUpperCase()+t.slice(1)}const E=t=>void 0!==t,A=t=>"function"==typeof t,D=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},L=Math.PI,T=2*L,C=T+L,R=Number.POSITIVE_INFINITY,F=L/180,I=L/2,j=L/4,N=2*L/3,z=Math.log10,V=Math.sign;function B(t){const e=Math.round(t);t=H(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(z(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function W(t){return!isNaN(parseFloat(t))&&isFinite(t)}function H(t,e,i){return Math.abs(t-e)<i}function $(t,e,i){let n,r,o;for(n=0,r=t.length;n<r;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function U(t){return t*(L/180)}function Y(t){return t*(180/L)}function G(t){if(!f(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function X(t,e){const i=e.x-t.x,n=e.y-t.y,r=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*L&&(o+=T),{angle:o,distance:r}}function q(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function K(t,e){return(t-e+C)%T-L}function J(t){return(t%T+T)%T}function Z(t,e,i,n){const r=J(t),o=J(e),s=J(i),a=J(o-r),c=J(s-r),l=J(r-o),h=J(r-s);return r===o||r===s||n&&o===s||a>c&&l<h}function Q(t,e,i){return Math.max(e,Math.min(i,t))}function tt(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}const et=t=>0===t||1===t,it=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*T/i),nt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*T/i)+1,rt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*I),easeOutSine:t=>Math.sin(t*I),easeInOutSine:t=>-.5*(Math.cos(L*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>et(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>et(t)?t:it(t,.075,.3),easeOutElastic:t=>et(t)?t:nt(t,.075,.3),easeInOutElastic(t){const e=.1125;return et(t)?t:t<.5?.5*it(2*t,e,.45):.5+.5*nt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-rt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*rt.easeInBounce(2*t):.5*rt.easeOutBounce(2*t-1)+.5},ot={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},st="0123456789ABCDEF",at=t=>st[15&t],ct=t=>st[(240&t)>>4]+st[15&t],lt=t=>(240&t)>>4==(15&t);function ht(t){return t+.5|0}const ut=(t,e,i)=>Math.max(Math.min(t,i),e);function ft(t){return ut(ht(2.55*t),0,255)}function dt(t){return ut(ht(255*t),0,255)}function pt(t){return ut(ht(t/2.55)/100,0,1)}function gt(t){return ut(ht(100*t),0,100)}const mt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,vt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function xt(t,e,i){const n=e*Math.min(i,1-i),r=(e,r=(e+t/30)%12)=>i-n*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function bt(t,e,i){const n=(n,r=(n+t/60)%6)=>i-i*e*Math.max(Math.min(r,4-r,1),0);return[n(5),n(3),n(1)]}function yt(t,e,i){const n=xt(t,1,.5);let r;for(e+i>1&&(r=1/(e+i),e*=r,i*=r),r=0;r<3;r++)n[r]*=1-e-i,n[r]+=e;return n}function _t(t){const e=t.r/255,i=t.g/255,n=t.b/255,r=Math.max(e,i,n),o=Math.min(e,i,n),s=(r+o)/2;let a,c,l;return r!==o&&(l=r-o,c=s>.5?l/(2-r-o):l/(r+o),a=r===e?(i-n)/l+(i<n?6:0):r===i?(n-e)/l+2:(e-i)/l+4,a=60*a+.5),[0|a,c||0,s]}function wt(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(dt)}function Mt(t,e,i){return wt(xt,t,e,i)}function St(t){return(t%360+360)%360}const kt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Pt={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ot;function Et(t,e,i){if(t){let n=_t(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=Mt(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function At(t,e){return t?Object.assign(e||{},t):t}function Dt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=dt(t[3]))):(e=At(t,{r:0,g:0,b:0,a:1})).a=dt(e.a),e}function Lt(t){return"r"===t.charAt(0)?function(t){const e=mt.exec(t);let i,n,r,o=255;if(e){if(e[7]!==i){const t=+e[7];o=255&(e[8]?ft(t):255*t)}return i=+e[1],n=+e[3],r=+e[5],i=255&(e[2]?ft(i):i),n=255&(e[4]?ft(n):n),r=255&(e[6]?ft(r):r),{r:i,g:n,b:r,a:o}}}(t):function(t){const e=vt.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?ft(+e[5]):dt(+e[5]));const r=St(+e[2]),o=+e[3]/100,s=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return wt(yt,t,e,i)}(r,o,s):"hsv"===e[1]?function(t,e,i){return wt(bt,t,e,i)}(r,o,s):Mt(r,o,s),{r:i[0],g:i[1],b:i[2],a:n}}(t)}class Tt{constructor(t){if(t instanceof Tt)return t;const e=typeof t;let i;var n,r,o;"object"===e?i=Dt(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?r={r:255&17*ot[n[1]],g:255&17*ot[n[2]],b:255&17*ot[n[3]],a:5===o?17*ot[n[4]]:255}:7!==o&&9!==o||(r={r:ot[n[1]]<<4|ot[n[2]],g:ot[n[3]]<<4|ot[n[4]],b:ot[n[5]]<<4|ot[n[6]],a:9===o?ot[n[7]]<<4|ot[n[8]]:255})),i=r||function(t){Ot||(Ot=function(){const t={},e=Object.keys(Pt),i=Object.keys(kt);let n,r,o,s,a;for(n=0;n<e.length;n++){for(s=a=e[n],r=0;r<i.length;r++)o=i[r],a=a.replace(o,kt[o]);o=parseInt(Pt[s],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),Ot.transparent=[0,0,0,0]);const e=Ot[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Lt(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=At(this._rgb);return t&&(t.a=pt(t.a)),t}set rgb(t){this._rgb=Dt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${pt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return lt(t.r)&&lt(t.g)&&lt(t.b)&&lt(t.a)}(t)?at:ct,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=_t(t),i=e[0],n=gt(e[1]),r=gt(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${r}%, ${pt(t.a)})`:`hsl(${i}, ${n}%, ${r}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const n=i.rgb,r=t.rgb;let o;const s=e===o?.5:e,a=2*s-1,c=n.a-r.a,l=((a*c==-1?a:(a+c)/(1+a*c))+1)/2;o=1-l,n.r=255&l*n.r+o*r.r+.5,n.g=255&l*n.g+o*r.g+.5,n.b=255&l*n.b+o*r.b+.5,n.a=s*n.a+(1-s)*r.a,i.rgb=n}return i}clone(){return new Tt(this.rgb)}alpha(t){return this._rgb.a=dt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=ht(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Et(this._rgb,2,t),this}darken(t){return Et(this._rgb,2,-t),this}saturate(t){return Et(this._rgb,1,t),this}desaturate(t){return Et(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=_t(t);i[0]=St(i[0]+e),i=Mt(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function Ct(t){return new Tt(t)}const Rt=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function Ft(t){return Rt(t)?t:Ct(t)}function It(t){return Rt(t)?t:Ct(t).saturate(.5).darken(.1).hexString()}const jt=Object.create(null),Nt=Object.create(null);function zt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function Vt(t,e,i){return"string"==typeof e?w(zt(t,e),i):w(zt(t,""),e)}var Bt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>It(e.backgroundColor),this.hoverBorderColor=(t,e)=>It(e.borderColor),this.hoverColor=(t,e)=>It(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return Vt(this,t,e)}get(t){return zt(this,t)}describe(t,e){return Vt(Nt,t,e)}override(t,e){return Vt(jt,t,e)}route(t,e,i,n){const r=zt(this,t),o=zt(this,i),s="_"+e;Object.defineProperties(r,{[s]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[s],e=o[n];return u(t)?Object.assign({},e,t):p(t,e)},set(t){this[s]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Wt(t,e,i,n,r){let o=e[r];return o||(o=e[r]=t.measureText(r).width,i.push(r)),o>n&&(n=o),n}function Ht(t,e,i,n){let r=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(r=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let s=0;const a=i.length;let c,l,u,f,d;for(c=0;c<a;c++)if(f=i[c],null!=f&&!0!==h(f))s=Wt(t,r,o,s,f);else if(h(f))for(l=0,u=f.length;l<u;l++)d=f[l],null==d||h(d)||(s=Wt(t,r,o,s,d));t.restore();const p=o.length/2;if(p>i.length){for(c=0;c<p;c++)delete r[o[c]];o.splice(0,p)}return s}function $t(t,e,i){const n=t.currentDevicePixelRatio,r=0!==i?Math.max(i/2,.5):0;return Math.round((e-r)*n)/n+r}function Ut(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Yt(t,e,i,n){let r,o,s,a,c;const l=e.pointStyle,h=e.rotation,u=e.radius;let f=(h||0)*F;if(l&&"object"==typeof l&&(r=l.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return t.save(),t.translate(i,n),t.rotate(f),t.drawImage(l,-l.width/2,-l.height/2,l.width,l.height),void t.restore();if(!(isNaN(u)||u<=0)){switch(t.beginPath(),l){default:t.arc(i,n,u,0,T),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(f)*u,n-Math.cos(f)*u),f+=N,t.lineTo(i+Math.sin(f)*u,n-Math.cos(f)*u),f+=N,t.lineTo(i+Math.sin(f)*u,n-Math.cos(f)*u),t.closePath();break;case"rectRounded":c=.516*u,a=u-c,o=Math.cos(f+j)*a,s=Math.sin(f+j)*a,t.arc(i-o,n-s,c,f-L,f-I),t.arc(i+s,n-o,c,f-I,f),t.arc(i+o,n+s,c,f,f+I),t.arc(i-s,n+o,c,f+I,f+L),t.closePath();break;case"rect":if(!h){a=Math.SQRT1_2*u,t.rect(i-a,n-a,2*a,2*a);break}f+=j;case"rectRot":o=Math.cos(f)*u,s=Math.sin(f)*u,t.moveTo(i-o,n-s),t.lineTo(i+s,n-o),t.lineTo(i+o,n+s),t.lineTo(i-s,n+o),t.closePath();break;case"crossRot":f+=j;case"cross":o=Math.cos(f)*u,s=Math.sin(f)*u,t.moveTo(i-o,n-s),t.lineTo(i+o,n+s),t.moveTo(i+s,n-o),t.lineTo(i-s,n+o);break;case"star":o=Math.cos(f)*u,s=Math.sin(f)*u,t.moveTo(i-o,n-s),t.lineTo(i+o,n+s),t.moveTo(i+s,n-o),t.lineTo(i-s,n+o),f+=j,o=Math.cos(f)*u,s=Math.sin(f)*u,t.moveTo(i-o,n-s),t.lineTo(i+o,n+s),t.moveTo(i+s,n-o),t.lineTo(i-s,n+o);break;case"line":o=Math.cos(f)*u,s=Math.sin(f)*u,t.moveTo(i-o,n-s),t.lineTo(i+o,n+s);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(f)*u,n+Math.sin(f)*u)}t.fill(),e.borderWidth>0&&t.stroke()}}function Gt(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Xt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function qt(t){t.restore()}function Kt(t,e,i,n,r){if(!e)return t.lineTo(i.x,i.y);if("middle"===r){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===r!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Jt(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Zt(t,e,i,n,r,o={}){const s=h(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let c,u;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),l(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),c=0;c<s.length;++c)u=s[c],a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),l(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(u,i,n,o.maxWidth)),t.fillText(u,i,n,o.maxWidth),Qt(t,i,n,u,o),n+=r.lineHeight;t.restore()}function Qt(t,e,i,n,r){if(r.strikethrough||r.underline){const o=t.measureText(n),s=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,c=i-o.actualBoundingBoxAscent,l=i+o.actualBoundingBoxDescent,h=r.strikethrough?(c+l)/2:l;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(s,h),t.lineTo(a,h),t.stroke()}}function te(t,e){const{x:i,y:n,w:r,h:o,radius:s}=e;t.arc(i+s.topLeft,n+s.topLeft,s.topLeft,-I,L,!0),t.lineTo(i,n+o-s.bottomLeft),t.arc(i+s.bottomLeft,n+o-s.bottomLeft,s.bottomLeft,L,I,!0),t.lineTo(i+r-s.bottomRight,n+o),t.arc(i+r-s.bottomRight,n+o-s.bottomRight,s.bottomRight,I,0,!0),t.lineTo(i+r,n+s.topRight),t.arc(i+r-s.topRight,n+s.topRight,s.topRight,0,-I,!0),t.lineTo(i+s.topLeft,n)}const ee=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),ie=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function ne(t,e){const i=(""+t).match(ee);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function re(t,e){const i={},n=u(e),r=n?Object.keys(e):e,o=u(t)?n?i=>p(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of r)i[t]=+o(t)||0;return i}function oe(t){return re(t,{top:"y",right:"x",bottom:"y",left:"x"})}function se(t){return re(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ae(t){const e=oe(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ce(t,e){t=t||{},e=e||Bt.font;let i=p(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=p(t.style,e.style);n&&!(""+n).match(ie)&&(console.warn('Invalid font style specified: "'+n+'"'),n="");const r={family:p(t.family,e.family),lineHeight:ne(p(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:p(t.weight,e.weight),string:""};return r.string=function(t){return!t||l(t.size)||l(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function le(t,e,i,n){let r,o,s,a=!0;for(r=0,o=t.length;r<o;++r)if(s=t[r],void 0!==s&&(void 0!==e&&"function"==typeof s&&(s=s(e),a=!1),void 0!==i&&h(s)&&(s=s[i%s.length],a=!1),void 0!==s))return n&&!a&&(n.cacheable=!1),s}function he(t,e){return Object.assign(Object.create(t),e)}function ue(t,e,i){i=i||(i=>t[i]<e);let n,r=t.length-1,o=0;for(;r-o>1;)n=o+r>>1,i(n)?o=n:r=n;return{lo:o,hi:r}}const fe=(t,e,i)=>ue(t,i,(n=>t[n][e]<i)),de=(t,e,i)=>ue(t,i,(n=>t[n][e]>=i)),pe=["push","pop","shift","splice","unshift"];function ge(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,r=n.indexOf(e);-1!==r&&n.splice(r,1),n.length>0||(pe.forEach((e=>{delete t[e]})),delete t._chartjs)}function me(t){const e=new Set;let i,n;for(i=0,n=t.length;i<n;++i)e.add(t[i]);return e.size===n?t:Array.from(e)}function ve(t,e=[""],i=t,n,r=(()=>t[0])){E(n)||(n=Ee("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:n,_getTarget:r,override:r=>ve([r,...t],e,i,n)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>we(i,n,(()=>function(t,e,i,n){let r;for(const o of e)if(r=Ee(ye(o,t),i),E(r))return _e(t,r)?Pe(i,n,t,r):r}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Ae(t).includes(e),ownKeys:t=>Ae(t),set(t,e,i){const n=t._storage||(t._storage=r());return t[e]=n[e]=i,delete t._keys,!0}})}function xe(t,e,i,n){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:be(t,n),setContext:e=>xe(t,e,i,n),override:r=>xe(t.override(r),e,i,n)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>we(t,e,(()=>function(t,e,i){const{_proxy:n,_context:r,_subProxy:o,_descriptors:s}=t;let a=n[e];return A(a)&&s.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:r,_context:o,_subProxy:s,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);return a.add(t),e=e(o,s||n),a.delete(t),_e(t,e)&&(e=Pe(r._scopes,r,t,e)),e}(e,a,t,i)),h(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:r,_context:o,_subProxy:s,_descriptors:a}=i;if(E(o.index)&&n(t))e=e[o.index%e.length];else if(u(e[0])){const i=e,n=r._scopes.filter((t=>t!==i));e=[];for(const c of i){const i=Pe(n,r,t,c);e.push(xe(i,o,s&&s[t],a))}}return e}(e,a,t,s.isIndexable)),_e(e,a)&&(a=xe(a,r,o&&o[e],s)),a}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function be(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:i,indexable:n,isScriptable:A(i)?i:()=>i,isIndexable:A(n)?n:()=>n}}const ye=(t,e)=>t?t+O(e):e,_e=(t,e)=>u(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function we(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function Me(t,e,i){return A(t)?t(e,i):t}const Se=(t,e)=>!0===t?e:"string"==typeof t?P(e,t):void 0;function ke(t,e,i,n,r){for(const o of e){const e=Se(i,o);if(e){t.add(e);const o=Me(e._fallback,i,r);if(E(o)&&o!==i&&o!==n)return o}else if(!1===e&&E(n)&&i!==n)return null}return!1}function Pe(t,e,i,n){const r=e._rootScopes,o=Me(e._fallback,i,n),s=[...t,...r],a=new Set;a.add(n);let c=Oe(a,s,i,o||i,n);return null!==c&&(!E(o)||o===i||(c=Oe(a,s,o,c,n),null!==c))&&ve(Array.from(a),[""],r,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const r=n[e];return h(r)&&u(i)?i:r}(e,i,n)))}function Oe(t,e,i,n,r){for(;i;)i=ke(t,e,i,n,r);return i}function Ee(t,e){for(const i of e){if(!i)continue;const e=i[t];if(E(e))return e}}function Ae(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const De=Number.EPSILON||1e-14,Le=(t,e)=>e<t.length&&!t[e].skip&&t[e],Te=t=>"x"===t?"y":"x";function Ce(t,e,i,n){const r=t.skip?e:t,o=e,s=i.skip?e:i,a=q(o,r),c=q(s,o);let l=a/(a+c),h=c/(a+c);l=isNaN(l)?0:l,h=isNaN(h)?0:h;const u=n*l,f=n*h;return{previous:{x:o.x-u*(s.x-r.x),y:o.y-u*(s.y-r.y)},next:{x:o.x+f*(s.x-r.x),y:o.y+f*(s.y-r.y)}}}function Re(t,e,i){return Math.max(Math.min(t,i),e)}function Fe(t,e,i,n,r){let o,s,a,c;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Te(e),n=t.length,r=Array(n).fill(0),o=Array(n);let s,a,c,l=Le(t,0);for(s=0;s<n;++s)if(a=c,c=l,l=Le(t,s+1),c){if(l){const t=l[e]-c[e];r[s]=0!==t?(l[i]-c[i])/t:0}o[s]=a?l?V(r[s-1])!==V(r[s])?0:(r[s-1]+r[s])/2:r[s-1]:r[s]}!function(t,e,i){const n=t.length;let r,o,s,a,c,l=Le(t,0);for(let h=0;h<n-1;++h)c=l,l=Le(t,h+1),c&&l&&(H(e[h],0,De)?i[h]=i[h+1]=0:(r=i[h]/e[h],o=i[h+1]/e[h],a=Math.pow(r,2)+Math.pow(o,2),a<=9||(s=3/Math.sqrt(a),i[h]=r*s*e[h],i[h+1]=o*s*e[h])))}(t,r,o),function(t,e,i="x"){const n=Te(i),r=t.length;let o,s,a,c=Le(t,0);for(let l=0;l<r;++l){if(s=a,a=c,c=Le(t,l+1),!a)continue;const r=a[i],h=a[n];s&&(o=(r-s[i])/3,a[`cp1${i}`]=r-o,a[`cp1${n}`]=h-o*e[l]),c&&(o=(c[i]-r)/3,a[`cp2${i}`]=r+o,a[`cp2${n}`]=h+o*e[l])}}(t,o,e)}(t,r);else{let i=n?t[t.length-1]:t[0];for(o=0,s=t.length;o<s;++o)a=t[o],c=Ce(i,a,t[Math.min(o+1,s-(n?0:1))%s],e.tension),a.cp1x=c.previous.x,a.cp1y=c.previous.y,a.cp2x=c.next.x,a.cp2y=c.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,r,o,s,a=Gt(t[0],e);for(i=0,n=t.length;i<n;++i)s=o,o=a,a=i<n-1&&Gt(t[i+1],e),o&&(r=t[i],s&&(r.cp1x=Re(r.cp1x,e.left,e.right),r.cp1y=Re(r.cp1y,e.top,e.bottom)),a&&(r.cp2x=Re(r.cp2x,e.left,e.right),r.cp2y=Re(r.cp2y,e.top,e.bottom)))}(t,i)}function Ie(){return"undefined"!=typeof window&&"undefined"!=typeof document}function je(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ne(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const ze=t=>window.getComputedStyle(t,null),Ve=["top","right","bottom","left"];function Be(t,e,i){const n={};i=i?"-"+i:"";for(let r=0;r<4;r++){const o=Ve[r];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}function We(t,e){const{canvas:i,currentDevicePixelRatio:n}=e,r=ze(i),o="border-box"===r.boxSizing,s=Be(r,"padding"),a=Be(r,"border","width"),{x:c,y:l,box:h}=function(t,e){const i=t.native||t,n=i.touches,r=n&&n.length?n[0]:i,{offsetX:o,offsetY:s}=r;let a,c,l=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(o,s,i.target))a=o,c=s;else{const t=e.getBoundingClientRect();a=r.clientX-t.left,c=r.clientY-t.top,l=!0}return{x:a,y:c,box:l}}(t,i),u=s.left+(h&&a.left),f=s.top+(h&&a.top);let{width:d,height:p}=e;return o&&(d-=s.width+a.width,p-=s.height+a.height),{x:Math.round((c-u)/d*i.width/n),y:Math.round((l-f)/p*i.height/n)}}const He=t=>Math.round(10*t)/10;function $e(t,e,i){const n=e||1,r=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=r/n,t.width=o/n;const s=t.canvas;return s.style&&(i||!s.style.height&&!s.style.width)&&(s.style.height=`${t.height}px`,s.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||s.height!==r||s.width!==o)&&(t.currentDevicePixelRatio=n,s.height=r,s.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const Ue=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Ye(t,e){const i=function(t,e){return ze(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Ge(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Xe(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function qe(t,e,i,n){const r={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},s=Ge(t,r,i),a=Ge(r,o,i),c=Ge(o,e,i),l=Ge(s,a,i),h=Ge(a,c,i);return Ge(l,h,i)}const Ke=new Map;function Je(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=Ke.get(i);return n||(n=new Intl.NumberFormat(t,e),Ke.set(i,n)),n}(e,i).format(t)}function Ze(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Qe(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function ti(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function ei(t){return"angle"===t?{between:Z,compare:K,normalize:J}:{between:tt,compare:(t,e)=>t-e,normalize:t=>t}}function ii({start:t,end:e,count:i,loop:n,style:r}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:r}}function ni(t,e,i){if(!i)return[t];const{property:n,start:r,end:o}=i,s=e.length,{compare:a,between:c,normalize:l}=ei(n),{start:h,end:u,loop:f,style:d}=function(t,e,i){const{property:n,start:r,end:o}=i,{between:s,normalize:a}=ei(n),c=e.length;let l,h,{start:u,end:f,loop:d}=t;if(d){for(u+=c,f+=c,l=0,h=c;l<h&&s(a(e[u%c][n]),r,o);++l)u--,f--;u%=c,f%=c}return f<u&&(f+=c),{start:u,end:f,loop:d,style:t.style}}(t,e,i),p=[];let g,m,v,x=!1,b=null;for(let t=h,i=h;t<=u;++t)m=e[t%s],m.skip||(g=l(m[n]),g!==v&&(x=c(g,r,o),null===b&&(x||c(r,v,g)&&0!==a(r,v))&&(b=0===a(g,r)?t:i),null!==b&&(!x||0===a(o,g)||c(o,v,g))&&(p.push(ii({start:b,end:t,loop:f,count:s,style:d})),b=null),i=t,v=g));return null!==b&&p.push(ii({start:b,end:u,loop:f,count:s,style:d})),p}function ri(t,e){const i=[],n=t.segments;for(let r=0;r<n.length;r++){const o=ni(n[r],t.points,e);o.length&&i.push(...o)}return i}function oi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function si(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var ai=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const r=e.listeners[n],o=e.duration;r.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=n.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const r=i.items;let o,s=r.length-1,a=!1;for(;s>=0;--s)o=r[s],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(r[s]=r[r.length-1],r.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),r.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const ci="transparent",li={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=Ft(t||ci),r=n.valid&&Ft(e||ci);return r&&r.valid?r.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class hi{constructor(t,e,i,n){const r=e[i];n=le([t.to,n,r,t.from]);const o=le([t.from,r,n]);this._active=!0,this._fn=t.fn||li[t.type||typeof o],this._easing=rt[t.easing]||rt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],r=i-this._start,o=this._duration-r;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=le([t.to,e,n,t.from]),this._from=le([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,r=this._from,o=this._loop,s=this._to;let a;if(this._active=r!==s&&(o||e<i),!this._active)return this._target[n]=s,void this._notify(!0);e<0?this._target[n]=r:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(r,s,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}Bt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const ui=Object.keys(Bt.animation);Bt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Bt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Bt.describe("animations",{_fallback:"animation"}),Bt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class fi{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!u(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const n=t[i];if(!u(n))return;const r={};for(const t of ui)r[t]=n[t];(h(n.properties)&&n.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,r)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!n)return[];const r=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const r=t[n[e]];r&&r.active()&&i.push(r.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),r}_createAnimations(t,e){const i=this._properties,n=[],r=t.$animations||(t.$animations={}),o=Object.keys(e),s=Date.now();let a;for(a=o.length-1;a>=0;--a){const c=o[a];if("$"===c.charAt(0))continue;if("options"===c){n.push(...this._animateOptions(t,e));continue}const l=e[c];let h=r[c];const u=i.get(c);if(h){if(u&&h.active()){h.update(u,l,s);continue}h.cancel()}u&&u.duration?(r[c]=h=new hi(u,t,c,l),n.push(h)):t[c]=l}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(ai.add(this._chart,i),!0):void 0}}function di(t,e){const i=t&&t.options||{},n=i.reverse,r=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:r,end:n?r:o}}function pi(t,e){const i=[],n=t._getSortedDatasetMetas(e);let r,o;for(r=0,o=n.length;r<o;++r)i.push(n[r].index);return i}function gi(t,e,i,n={}){const r=t.keys,o="single"===n.mode;let s,a,c,l;if(null!==e){for(s=0,a=r.length;s<a;++s){if(c=+r[s],c===i){if(n.all)continue;break}l=t.values[c],f(l)&&(o||0===e||V(e)===V(l))&&(e+=l)}return e}}function mi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function vi(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function xi(t,e,i,n){for(const r of e.getMatchingVisibleMetas(n).reverse()){const e=t[r.index];if(i&&e>0||!i&&e<0)return r.index}return null}function bi(t,e){const{chart:i,_cachedMeta:n}=t,r=i._stacks||(i._stacks={}),{iScale:o,vScale:s,index:a}=n,c=o.axis,l=s.axis,h=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,s,n),u=e.length;let f;for(let t=0;t<u;++t){const i=e[t],{[c]:o,[l]:u}=i;f=(i._stacks||(i._stacks={}))[l]=vi(r,h,o),f[a]=u,f._top=xi(f,s,!0,n.type),f._bottom=xi(f,s,!1,n.type)}}function yi(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function _i(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i]}}}const wi=t=>"reset"===t||"none"===t,Mi=(t,e)=>e?t:Object.assign({},t);class Si{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=mi(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&_i(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,r=e.xAxisID=p(i.xAxisID,yi(t,"x")),o=e.yAxisID=p(i.yAxisID,yi(t,"y")),s=e.rAxisID=p(i.rAxisID,yi(t,"r")),a=e.indexAxis,c=e.iAxisID=n(a,r,o,s),l=e.vAxisID=n(a,o,r,s);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(s),e.iScale=this.getScaleForId(c),e.vScale=this.getScaleForId(l)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&ge(this._data,this),t._stacked&&_i(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(u(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,r,o;for(n=0,r=e.length;n<r;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){ge(i,this);const t=this._cachedMeta;_i(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(n=e)._chartjs?n._chartjs.listeners.push(this):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),pe.forEach((t=>{const e="_onData"+O(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const r=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),r}})})))),this._syncList=[],this._data=e}var n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const r=e._stacked;e._stacked=mi(e.vScale,e),e.stack!==i.stack&&(n=!0,_i(e),e.stack=i.stack),this._resyncElements(t),(n||r!==e._stacked)&&bi(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:r,_stacked:o}=i,s=r.axis;let a,c,l,f=0===t&&e===n.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,l=n;else{l=h(n[t])?this.parseArrayData(i,n,t,e):u(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const r=()=>null===c[s]||d&&c[s]<d[s];for(a=0;a<e;++a)i._parsed[a+t]=c=l[a],f&&(r()&&(f=!1),d=c);i._sorted=f}o&&bi(this,l)}parsePrimitiveData(t,e,i,n){const{iScale:r,vScale:o}=t,s=r.axis,a=o.axis,c=r.getLabels(),l=r===o,h=new Array(n);let u,f,d;for(u=0,f=n;u<f;++u)d=u+i,h[u]={[s]:l||r.parse(c[d],d),[a]:o.parse(e[d],d)};return h}parseArrayData(t,e,i,n){const{xScale:r,yScale:o}=t,s=new Array(n);let a,c,l,h;for(a=0,c=n;a<c;++a)l=a+i,h=e[l],s[a]={x:r.parse(h[0],l),y:o.parse(h[1],l)};return s}parseObjectData(t,e,i,n){const{xScale:r,yScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,c=new Array(n);let l,h,u,f;for(l=0,h=n;l<h;++l)u=l+i,f=e[u],c[l]={x:r.parse(P(f,s),u),y:o.parse(P(f,a),u)};return c}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,r=this._cachedMeta,o=e[t.axis];return gi({keys:pi(n,!0),values:e._stacks[t.axis]},o,r.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const r=i[e.axis];let o=null===r?NaN:r;const s=n&&i._stacks[e.axis];n&&s&&(n.values=s,o=gi(n,r,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,r=i._sorted&&t===i.iScale,o=n.length,s=this._getOtherScale(t),a=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:pi(i,!0),values:null})(e,i,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:l,max:h}=function(t){const{min:e,max:i,minDefined:n,maxDefined:r}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:r?i:Number.POSITIVE_INFINITY}}(s);let u,d;function p(){d=n[u];const e=d[s.axis];return!f(d[t.axis])||l>e||h<e}for(u=0;u<o&&(p()||(this.updateRangeFromParsed(c,t,d,a),!r));++u);if(r)for(u=o-1;u>=0;--u)if(!p()){this.updateRangeFromParsed(c,t,d,a);break}return c}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,r,o;for(n=0,r=e.length;n<r;++n)o=e[n][t.axis],f(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,r=this.getParsed(t);return{label:i?""+i.getLabelForValue(r[i.axis]):"",value:n?""+n.getLabelForValue(r[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,r;return u(t)?(e=t.top,i=t.right,n=t.bottom,r=t.left):e=i=n=r=t,{top:e,right:i,bottom:n,left:r,disabled:!1===t}}(p(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=di(t,i),r=di(e,i);return{top:r.end,right:n.end,bottom:r.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],r=e.chartArea,o=[],s=this._drawStart||0,a=this._drawCount||n.length-s,c=this.options.drawActiveElementsOnTop;let l;for(i.dataset&&i.dataset.draw(t,r,s,a),l=s;l<s+a;++l){const e=n[l];e.hidden||(e.active&&c?o.push(e):e.draw(t,r))}for(l=0;l<o.length;++l)o[l].draw(t,r)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,i){return he(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=n.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return he(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=n,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=i,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,r=this._cachedDataOpts,o=t+"-"+e,s=r[o],a=this.enableOptionSharing&&E(i);if(s)return Mi(s,a);const c=this.chart.config,l=c.datasetElementScopeKeys(this._type,t),h=n?[`${t}Hover`,"hover",t,""]:[t,""],u=c.getOptionScopes(this.getDataset(),l),f=Object.keys(Bt.elements[t]),d=c.resolveNamedOptions(u,f,(()=>this.getContext(i,n)),h);return d.$shared&&(d.$shared=a,r[o]=Object.freeze(Mi(d,a))),d}_resolveAnimations(t,e,i){const n=this.chart,r=this._cachedDataOpts,o=`animation-${e}`,s=r[o];if(s)return s;let a;if(!1!==n.options.animation){const n=this.chart.config,r=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),r);a=n.createResolver(o,this.getContext(t,i,e))}const c=new fi(n,a&&a.animations);return a&&a._cacheable&&(r[o]=Object.freeze(c)),c}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||wi(t)||this.chart._animationsDisabled}updateElement(t,e,i,n){wi(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!wi(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const r=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,r=e.length,o=Math.min(r,n);o&&this.parse(0,o),r>n?this._insertElements(n,r-n,t):r<n&&this._removeElements(r,n-r)}_insertElements(t,e,i=!0){const n=this._cachedMeta,r=n.data,o=t+e;let s;const a=t=>{for(t.length+=e,s=t.length-1;s>=o;s--)t[s]=t[s-e]};for(a(r),s=t;s<o;++s)r[s]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(r,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&_i(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function ki(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,r=i.length;e<r;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=me(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,r,o,s,a=e._length;const c=()=>{32767!==o&&-32768!==o&&(E(s)&&(a=Math.min(a,Math.abs(o-s)||a)),s=o)};for(n=0,r=i.length;n<r;++n)o=e.getPixelForValue(i[n]),c();for(s=void 0,n=0,r=e.ticks.length;n<r;++n)o=e.getPixelForTick(n),c();return a}function Pi(t,e,i,n){return h(t)?function(t,e,i,n){const r=i.parse(t[0],n),o=i.parse(t[1],n),s=Math.min(r,o),a=Math.max(r,o);let c=s,l=a;Math.abs(s)>Math.abs(a)&&(c=a,l=s),e[i.axis]=l,e._custom={barStart:c,barEnd:l,start:r,end:o,min:s,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function Oi(t,e,i,n){const r=t.iScale,o=t.vScale,s=r.getLabels(),a=r===o,c=[];let l,h,u,f;for(l=i,h=i+n;l<h;++l)f=e[l],u={},u[r.axis]=a||r.parse(s[l],l),c.push(Pi(f,u,o,l));return c}function Ei(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Ai(t,e,i,n){let r=e.borderSkipped;const o={};if(!r)return void(t.borderSkipped=o);const{start:s,end:a,reverse:c,top:l,bottom:h}=function(t){let e,i,n,r,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(r="end",o="start"):(r="start",o="end"),{start:i,end:n,reverse:e,top:r,bottom:o}}(t);"middle"===r&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?r=l:(i._bottom||0)===n?r=h:(o[Di(h,s,a,c)]=!0,r=l)),o[Di(r,s,a,c)]=!0,t.borderSkipped=o}function Di(t,e,i,n){var r,o,s;return n?(s=i,t=Li(t=(r=t)===(o=e)?s:r===s?o:r,i,e)):t=Li(t,e,i),t}function Li(t,e,i){return"start"===t?e:"end"===t?i:t}function Ti(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}Si.defaults={},Si.prototype.datasetElementType=null,Si.prototype.dataElementType=null;class Ci extends Si{parsePrimitiveData(t,e,i,n){return Oi(t,e,i,n)}parseArrayData(t,e,i,n){return Oi(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:r,vScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,c="x"===r.axis?s:a,l="x"===o.axis?s:a,h=[];let u,f,d,p;for(u=i,f=i+n;u<f;++u)p=e[u],d={},d[r.axis]=r.parse(P(p,c),u),h.push(Pi(P(p,l),d,o,u));return h}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const r=i._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,r=this.getParsed(t),o=r._custom,s=Ei(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(r[n.axis]);return{label:""+i.getLabelForValue(r[i.axis]),value:s}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const r="reset"===n,{index:o,_cachedMeta:{vScale:s}}=this,a=s.getBasePixel(),c=s.isHorizontal(),h=this._getRuler(),u=this.resolveDataElementOptions(e,n),f=this.getSharedOptions(u),d=this.includeOptions(n,f);this.updateSharedOptions(f,n,u);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=r||l(e[s.axis])?{base:a,head:a}:this._calculateBarValuePixels(u),p=this._calculateBarIndexPixels(u,h),g=(e._stacks||{})[s.axis],m={horizontal:c,base:i.base,enableBorderRadius:!g||Ei(e._custom)||o===g._top||o===g._bottom,x:c?i.head:p.center,y:c?p.center:i.head,height:c?p.size:Math.abs(i.size),width:c?Math.abs(i.size):p.size};d&&(m.options=f||this.resolveDataElementOptions(u,t[u].active?"active":n));const v=m.options||t[u].options;Ai(m,v,g,o),Ti(m,v,h.ratio),this.updateElement(t[u],u,m,n)}}_getStacks(t,e){const i=this._cachedMeta.iScale,n=i.getMatchingVisibleMetas(this._type),r=i.options.stacked,o=n.length,s=[];let a,c;for(a=0;a<o;++a)if(c=n[a],c.controller.options.grouped){if(void 0!==e){const t=c.controller.getParsed(e)[c.controller._cachedMeta.vScale.axis];if(l(t)||isNaN(t))continue}if((!1===r||-1===s.indexOf(c.stack)||void 0===r&&void 0===c.stack)&&s.push(c.stack),c.index===t)break}return s.length||s.push(void 0),s}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),r=void 0!==e?n.indexOf(e):-1;return-1===r?n.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let r,o;for(r=0,o=e.data.length;r<o;++r)n.push(i.getPixelForValue(this.getParsed(r)[i.axis],r));const s=t.barThickness;return{min:s||ki(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:n,minBarLength:r}}=this,o=n||0,s=this.getParsed(t),a=s._custom,c=Ei(a);let h,u,f=s[e.axis],d=0,p=i?this.applyStack(e,s,i):f;p!==f&&(d=p-f,p=f),c&&(f=a.barStart,p=a.barEnd-a.barStart,0!==f&&V(f)!==V(a.barEnd)&&(d=0),d+=f);const g=l(n)||c?d:n;let m=e.getPixelForValue(g);if(h=this.chart.getDataVisibility(t)?e.getPixelForValue(d+p):m,u=h-m,Math.abs(u)<r&&(u=function(t,e,i){return 0!==t?V(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(u,e,o)*r,f===o&&(m-=u/2),h=m+u),m===e.getPixelForValue(o)){const t=V(u)*e.getLineWidthForValue(o)/2;m+=t,u-=t}return{size:u,base:m,head:h,center:h+u/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,r=n.skipNull,o=p(n.maxBarThickness,1/0);let s,a;if(e.grouped){const i=r?this._getStackCount(t):e.stackCount,c="flex"===n.barThickness?function(t,e,i,n){const r=e.pixels,o=r[t];let s=t>0?r[t-1]:null,a=t<r.length-1?r[t+1]:null;const c=i.categoryPercentage;null===s&&(s=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-s);const l=o-(o-Math.min(s,a))/2*c;return{chunk:Math.abs(a-s)/2*c/n,ratio:i.barPercentage,start:l}}(t,e,n,i):function(t,e,i,n){const r=i.barThickness;let o,s;return l(r)?(o=e.min*i.categoryPercentage,s=i.barPercentage):(o=r*n,s=1),{chunk:o/n,ratio:s,start:e.pixels[t]-o/2}}(t,e,n,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);s=c.start+c.chunk*h+c.chunk/2,a=Math.min(o,c.chunk*c.ratio)}else s=i.getPixelForValue(this.getParsed(t)[i.axis],t),a=Math.min(o,e.min*e.ratio);return{base:s-a/2,head:s+a/2,center:s,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let r=0;for(;r<n;++r)null!==this.getParsed(r)[e.axis]&&i[r].draw(this._ctx)}}Ci.id="bar",Ci.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Ci.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Ri extends Si{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const r=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+i).radius;return r}parseArrayData(t,e,i,n){const r=super.parseArrayData(t,e,i,n);for(let t=0;t<r.length;t++){const n=e[i+t];r[t]._custom=p(n[2],this.resolveDataElementOptions(t+i).radius)}return r}parseObjectData(t,e,i,n){const r=super.parseObjectData(t,e,i,n);for(let t=0;t<r.length;t++){const n=e[i+t];r[t]._custom=p(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return r}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:n}=e,r=this.getParsed(t),o=i.getLabelForValue(r.x),s=n.getLabelForValue(r.y),a=r._custom;return{label:e.label,value:"("+o+", "+s+(a?", "+a:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const r="reset"===n,{iScale:o,vScale:s}=this._cachedMeta,a=this.resolveDataElementOptions(e,n),c=this.getSharedOptions(a),l=this.includeOptions(n,c),h=o.axis,u=s.axis;for(let a=e;a<e+i;a++){const e=t[a],i=!r&&this.getParsed(a),c={},f=c[h]=r?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),d=c[u]=r?s.getBasePixel():s.getPixelForValue(i[u]);c.skip=isNaN(f)||isNaN(d),l&&(c.options=this.resolveDataElementOptions(a,e.active?"active":n),r&&(c.options.radius=0)),this.updateElement(e,a,c,n)}this.updateSharedOptions(c,n,a)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const r=n.radius;return"active"!==e&&(n.radius=0),n.radius+=p(i&&i._custom,r),n}}Ri.id="bubble",Ri.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Ri.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Fi extends Si{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let r,o,s=t=>+i[t];if(u(i[t])){const{key:t="value"}=this._parsing;s=e=>+P(i[e],t)}for(r=t,o=t+e;r<o;++r)n._parsed[r]=s(r)}}_getRotation(){return U(this.options.rotation-90)}_getCircumference(){return U(this.options.circumference)}_getRotationExtents(){let t=T,e=-T;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const n=this.chart.getDatasetMeta(i).controller,r=n._getRotation(),o=n._getCircumference();t=Math.min(t,r),e=Math.max(e,r+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,r=n.data,o=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,s=Math.max((Math.min(i.width,i.height)-o)/2,0),a=Math.min((l=s,"string"==typeof(c=this.options.cutout)&&c.endsWith("%")?parseFloat(c)/100:c/l),1);var c,l;const h=this._getRingWeight(this.index),{circumference:u,rotation:f}=this._getRotationExtents(),{ratioX:d,ratioY:p,offsetX:m,offsetY:v}=function(t,e,i){let n=1,r=1,o=0,s=0;if(e<T){const a=t,c=a+e,l=Math.cos(a),h=Math.sin(a),u=Math.cos(c),f=Math.sin(c),d=(t,e,n)=>Z(t,a,c,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>Z(t,a,c,!0)?-1:Math.min(e,e*i,n,n*i),g=d(0,l,u),m=d(I,h,f),v=p(L,l,u),x=p(L+I,h,f);n=(g-v)/2,r=(m-x)/2,o=-(g+v)/2,s=-(m+x)/2}return{ratioX:n,ratioY:r,offsetX:o,offsetY:s}}(f,u,a),x=(i.width-o)/d,b=(i.height-o)/p,y=Math.max(Math.min(x,b)/2,0),_=g(this.options.radius,y),w=(_-Math.max(_*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=m*_,this.offsetY=v*_,n.total=this.calculateTotal(),this.outerRadius=_-w*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-w*h,0),this.updateElements(r,0,r.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,r=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*r/T)}updateElements(t,e,i,n){const r="reset"===n,o=this.chart,s=o.chartArea,a=o.options.animation,c=(s.left+s.right)/2,l=(s.top+s.bottom)/2,h=r&&a.animateScale,u=h?0:this.innerRadius,f=h?0:this.outerRadius,d=this.resolveDataElementOptions(e,n),p=this.getSharedOptions(d),g=this.includeOptions(n,p);let m,v=this._getRotation();for(m=0;m<e;++m)v+=this._circumference(m,r);for(m=e;m<e+i;++m){const e=this._circumference(m,r),i=t[m],o={x:c+this.offsetX,y:l+this.offsetY,startAngle:v,endAngle:v+e,circumference:e,outerRadius:f,innerRadius:u};g&&(o.options=p||this.resolveDataElementOptions(m,i.active?"active":n)),v+=e,this.updateElement(i,m,o,n)}this.updateSharedOptions(p,n,d)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const r=t._parsed[i];null===r||isNaN(r)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(r))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?T*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],r=Je(e._parsed[t],i.options.locale);return{label:n[t]||"",value:r}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,r,o,s,a;if(!t)for(n=0,r=i.data.datasets.length;n<r;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,s=o.controller;break}if(!t)return 0;for(n=0,r=t.length;n<r;++n)a=s.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(p(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Fi.id="doughnut",Fi.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Fi.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Fi.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,n)=>{const r=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return h(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class Ii extends Si{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:r}=e,o=this.chart._animationsDisabled;let{start:s,count:a}=function(t,e,i){const n=e.length;let r=0,o=n;if(t._sorted){const{iScale:s,_parsed:a}=t,c=s.axis,{min:l,max:h,minDefined:u,maxDefined:f}=s.getUserBounds();u&&(r=Q(Math.min(fe(a,s.axis,l).lo,i?n:fe(e,c,s.getPixelForValue(l)).lo),0,n-1)),o=f?Q(Math.max(fe(a,s.axis,h).hi+1,i?0:fe(e,c,s.getPixelForValue(h)).hi+1),r,n)-r:n-r}return{start:r,count:o}}(e,n,o);this._drawStart=s,this._drawCount=a,function(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,r={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=r,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,r),o}(e)&&(s=0,a=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!r._decimated,i.points=n;const c=this.resolveDatasetElementOptions(t);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:c},t),this.updateElements(n,s,a,t)}updateElements(t,e,i,n){const r="reset"===n,{iScale:o,vScale:s,_stacked:a,_dataset:c}=this._cachedMeta,h=this.resolveDataElementOptions(e,n),u=this.getSharedOptions(h),f=this.includeOptions(n,u),d=o.axis,p=s.axis,{spanGaps:g,segment:m}=this.options,v=W(g)?g:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||r||"none"===n;let b=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),g=x?e:{},y=l(i[p]),_=g[d]=o.getPixelForValue(i[d],h),w=g[p]=r||y?s.getBasePixel():s.getPixelForValue(a?this.applyStack(s,i,a):i[p],h);g.skip=isNaN(_)||isNaN(w)||y,g.stop=h>0&&i[d]-b[d]>v,m&&(g.parsed=i,g.raw=c.data[h]),f&&(g.options=u||this.resolveDataElementOptions(h,e.active?"active":n)),x||this.updateElement(e,h,g,n),b=i}this.updateSharedOptions(u,n,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const r=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,r,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Ii.id="line",Ii.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Ii.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class ji extends Si{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],r=Je(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:r}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),r=Math.max(n/2,0),o=(r-Math.max(i.cutoutPercentage?r/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=r-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const r="reset"===n,o=this.chart,s=this.getDataset(),a=o.options.animation,c=this._cachedMeta.rScale,l=c.xCenter,h=c.yCenter,u=c.getIndexAngle(0)-.5*L;let f,d=u;const p=360/this.countVisibleElements();for(f=0;f<e;++f)d+=this._computeAngle(f,n,p);for(f=e;f<e+i;f++){const e=t[f];let i=d,g=d+this._computeAngle(f,n,p),m=o.getDataVisibility(f)?c.getDistanceFromCenterForValue(s.data[f]):0;d=g,r&&(a.animateScale&&(m=0),a.animateRotate&&(i=g=u));const v={x:l,y:h,innerRadius:0,outerRadius:m,startAngle:i,endAngle:g,options:this.resolveDataElementOptions(f,e.active?"active":n)};this.updateElement(e,f,v,n)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach(((e,n)=>{!isNaN(t.data[n])&&this.chart.getDataVisibility(n)&&i++})),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?U(this.resolveDataElementOptions(t,e).angle||i):0}}ji.id="polarArea",ji.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},ji.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,n)=>{const r=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Ni extends Fi{}Ni.id="pie",Ni.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class zi extends Si{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],r=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:r.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const r=this.getDataset(),o=this._cachedMeta.rScale,s="reset"===n;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":n),c=o.getPointPositionForValue(a,r.data[a]),l=s?o.xCenter:c.x,h=s?o.yCenter:c.y,u={x:l,y:h,angle:c.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,a,u,n)}}}zi.id="radar",zi.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},zi.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Vi extends Ii{}Vi.id="scatter",Vi.defaults={showLine:!1,fill:!1},Vi.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Bi=Object.freeze({__proto__:null,BarController:Ci,BubbleController:Ri,DoughnutController:Fi,LineController:Ii,PolarAreaController:ji,PieController:Ni,RadarController:zi,ScatterController:Vi});function Wi(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Hi{constructor(t){this.options=t||{}}formats(){return Wi()}parse(t,e){return Wi()}format(t,e){return Wi()}add(t,e,i){return Wi()}diff(t,e,i){return Wi()}startOf(t,e,i){return Wi()}endOf(t,e){return Wi()}}Hi.override=function(t){Object.assign(Hi.prototype,t)};var $i={_date:Hi};function Ui(t,e){return"native"in t?{x:t.x,y:t.y}:We(t,e)}function Yi(t,e,i,n){const{controller:r,data:o,_sorted:s}=t,a=r._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&s&&o.length){const t=a._reversePixels?de:fe;if(!n)return t(o,e,i);if(r._sharedOptions){const n=o[0],r="function"==typeof n.getRange&&n.getRange(e);if(r){const n=t(o,e,i-r),s=t(o,e,i+r);return{lo:n.lo,hi:s.hi}}}}return{lo:0,hi:o.length-1}}function Gi(t,e,i,n,r){const o=t.getSortedVisibleDatasetMetas(),s=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:c,hi:l}=Yi(o[t],e,s,r);for(let t=c;t<=l;++t){const e=a[t];e.skip||n(e,i,t)}}}function Xi(t,e,i,n){const r=[];return Gt(e,t.chartArea,t._minPadding)?(Gi(t,i,e,(function(t,i,o){t.inRange(e.x,e.y,n)&&r.push({element:t,datasetIndex:i,index:o})}),!0),r):r}function qi(t,e,i,n,r){return Gt(e,t.chartArea,t._minPadding)?"r"!==i||n?function(t,e,i,n,r){let o=[];const s=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const r=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}}(i);let a=Number.POSITIVE_INFINITY;return Gi(t,i,e,(function(i,c,l){const h=i.inRange(e.x,e.y,r);if(n&&!h)return;const u=i.getCenterPoint(r);if(!Gt(u,t.chartArea,t._minPadding)&&!h)return;const f=s(e,u);f<a?(o=[{element:i,datasetIndex:c,index:l}],a=f):f===a&&o.push({element:i,datasetIndex:c,index:l})})),o}(t,e,i,n,r):function(t,e,i,n){let r=[];return Gi(t,i,e,(function(t,i,o){const{startAngle:s,endAngle:a}=t.getProps(["startAngle","endAngle"],n),{angle:c}=X(t,{x:e.x,y:e.y});Z(c,s,a)&&r.push({element:t,datasetIndex:i,index:o})})),r}(t,e,i,r):[]}function Ki(t,e,i,n){const r=Ui(e,t),o=[],s=i.axis,a="x"===s?"inXRange":"inYRange";let c=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let n,r,o;for(let t=0,s=i.length;t<s;++t){({index:n,data:r}=i[t]);for(let t=0,i=r.length;t<i;++t)o=r[t],o.skip||e(o,n,t)}}(t,((t,e,i)=>{t[a](r[s],n)&&o.push({element:t,datasetIndex:e,index:i}),t.inRange(r.x,r.y,n)&&(c=!0)})),i.intersect&&!c?[]:o}var Ji={modes:{index(t,e,i,n){const r=Ui(e,t),o=i.axis||"x",s=i.intersect?Xi(t,r,o,n):qi(t,r,o,!1,n),a=[];return s.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=s[0].index,i=t.data[e];i&&!i.skip&&a.push({element:i,datasetIndex:t.index,index:e})})),a):[]},dataset(t,e,i,n){const r=Ui(e,t),o=i.axis||"xy";let s=i.intersect?Xi(t,r,o,n):qi(t,r,o,!1,n);if(s.length>0){const e=s[0].datasetIndex,i=t.getDatasetMeta(e).data;s=[];for(let t=0;t<i.length;++t)s.push({element:i[t],datasetIndex:e,index:t})}return s},point:(t,e,i,n)=>Xi(t,Ui(e,t),i.axis||"xy",n),nearest:(t,e,i,n)=>qi(t,Ui(e,t),i.axis||"xy",i.intersect,n),x:(t,e,i,n)=>Ki(t,e,{axis:"x",intersect:i.intersect},n),y:(t,e,i,n)=>Ki(t,e,{axis:"y",intersect:i.intersect},n)}};const Zi=["left","top","right","bottom"];function Qi(t,e){return t.filter((t=>t.pos===e))}function tn(t,e){return t.filter((t=>-1===Zi.indexOf(t.pos)&&t.box.axis===e))}function en(t,e){return t.sort(((t,i)=>{const n=e?i:t,r=e?t:i;return n.weight===r.weight?n.index-r.index:n.weight-r.weight}))}function nn(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function rn(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function on(t,e,i,n){const{pos:r,box:o}=i,s=t.maxPadding;if(!u(r)){i.size&&(t[r]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[r]+=i.size}o.getPadding&&rn(s,o.getPadding());const a=Math.max(0,e.outerWidth-nn(s,t,"left","right")),c=Math.max(0,e.outerHeight-nn(s,t,"top","bottom")),l=a!==t.w,h=c!==t.h;return t.w=a,t.h=c,i.horizontal?{same:l,other:h}:{same:h,other:l}}function sn(t,e){const i=e.maxPadding;return function(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}(t?["left","right"]:["top","bottom"])}function an(t,e,i,n){const r=[];let o,s,a,c,l,h;for(o=0,s=t.length,l=0;o<s;++o){a=t[o],c=a.box,c.update(a.width||e.w,a.height||e.h,sn(a.horizontal,e));const{same:s,other:u}=on(e,i,a,n);l|=s&&r.length,h=h||u,c.fullSize||r.push(a)}return l&&an(r,e,i,n)||h}function cn(t,e,i,n,r){t.top=i,t.left=e,t.right=e+n,t.bottom=i+r,t.width=n,t.height=r}function ln(t,e,i,n){const r=i.padding;let{x:o,y:s}=e;for(const a of t){const t=a.box,c=n[a.stack]||{count:1,placed:0,weight:1},l=a.stackWeight/c.weight||1;if(a.horizontal){const n=e.w*l,o=c.size||t.height;E(c.start)&&(s=c.start),t.fullSize?cn(t,r.left,s,i.outerWidth-r.right-r.left,o):cn(t,e.left+c.placed,s,n,o),c.start=s,c.placed+=n,s=t.bottom}else{const n=e.h*l,s=c.size||t.width;E(c.start)&&(o=c.start),t.fullSize?cn(t,o,r.top,s,i.outerHeight-r.bottom-r.top):cn(t,o,e.top+c.placed,s,n),c.start=o,c.placed+=n,o=t.right}}e.x=o,e.y=s}Bt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var hn={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const r=ae(t.options.layout.padding),o=Math.max(e-r.width,0),s=Math.max(i-r.height,0),a=function(t){const e=function(t){const e=[];let i,n,r,o,s,a;for(i=0,n=(t||[]).length;i<n;++i)r=t[i],({position:o,options:{stack:s,stackWeight:a=1}}=r),e.push({index:i,box:r,pos:o,horizontal:r.isHorizontal(),weight:r.weight,stack:s&&o+s,stackWeight:a});return e}(t),i=en(e.filter((t=>t.box.fullSize)),!0),n=en(Qi(e,"left"),!0),r=en(Qi(e,"right")),o=en(Qi(e,"top"),!0),s=en(Qi(e,"bottom")),a=tn(e,"x"),c=tn(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:r.concat(c).concat(s).concat(a),chartArea:Qi(e,"chartArea"),vertical:n.concat(r).concat(c),horizontal:o.concat(s).concat(a)}}(t.boxes),c=a.vertical,l=a.horizontal;v(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const h=c.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,u=Object.freeze({outerWidth:e,outerHeight:i,padding:r,availableWidth:o,availableHeight:s,vBoxMaxWidth:o/2/h,hBoxMaxHeight:s/2}),f=Object.assign({},r);rn(f,ae(n));const d=Object.assign({maxPadding:f,w:o,h:s,x:r.left,y:r.top},r),p=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:r}=i;if(!t||!Zi.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=r}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:r}=e;let o,s,a;for(o=0,s=t.length;o<s;++o){a=t[o];const{fullSize:s}=a.box,c=i[a.stack],l=c&&a.stackWeight/c.weight;a.horizontal?(a.width=l?l*n:s&&e.availableWidth,a.height=r):(a.width=n,a.height=l?l*r:s&&e.availableHeight)}return i}(c.concat(l),u);an(a.fullSize,d,u,p),an(c,d,u,p),an(l,d,u,p)&&an(c,d,u,p),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(d),ln(a.leftAndTop,d,u,p),d.x+=d.w,d.y+=d.h,ln(a.rightAndBottom,d,u,p),t.chartArea={left:d.left,top:d.top,right:d.left+d.w,bottom:d.top+d.h,height:d.h,width:d.w},v(a.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(d.w,d.h,{left:0,top:0,right:0,bottom:0})}))}};class un{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class fn extends un{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const dn={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},pn=t=>null===t||""===t,gn=!!Ue&&{passive:!0};function mn(t,e,i){t.canvas.removeEventListener(e,i,gn)}function vn(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function xn(t,e,i){const n=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||vn(i.addedNodes,n),e=e&&!vn(i.removedNodes,n);e&&i()}));return r.observe(document,{childList:!0,subtree:!0}),r}function bn(t,e,i){const n=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||vn(i.removedNodes,n),e=e&&!vn(i.addedNodes,n);e&&i()}));return r.observe(document,{childList:!0,subtree:!0}),r}const yn=new Map;let _n=0;function wn(){const t=window.devicePixelRatio;t!==_n&&(_n=t,yn.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Mn(t,e,i){const n=t.canvas,o=n&&je(n);if(!o)return;const s=r(((t,e)=>{const n=o.clientWidth;i(t,e),n<o.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||s(i,n)}));return a.observe(o),function(t,e){yn.size||window.addEventListener("resize",wn),yn.set(t,e)}(t,s),a}function Sn(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){yn.delete(t),yn.size||window.removeEventListener("resize",wn)}(t)}function kn(t,e,i){const n=t.canvas,o=r((e=>{null!==t.ctx&&i(function(t,e){const i=dn[t.type]||t.type,{x:n,y:r}=We(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==r?r:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,gn)}(n,e,o),o}class Pn extends un{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),r=t.getAttribute("width");if(t.$chartjs={initial:{height:n,width:r,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",pn(r)){const e=Ye(t,"width");void 0!==e&&(t.width=e)}if(pn(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Ye(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach((t=>{const n=i[t];l(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),r={attach:xn,detach:bn,resize:Mn}[e]||kn;n[e]=r(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];n&&(({attach:Sn,detach:Sn,resize:Sn}[e]||mn)(t,e,n),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return function(t,e,i,n){const r=ze(t),o=Be(r,"margin"),s=Ne(r.maxWidth,t,"clientWidth")||R,a=Ne(r.maxHeight,t,"clientHeight")||R,c=function(t,e,i){let n,r;if(void 0===e||void 0===i){const o=je(t);if(o){const t=o.getBoundingClientRect(),s=ze(o),a=Be(s,"border","width"),c=Be(s,"padding");e=t.width-c.width-a.width,i=t.height-c.height-a.height,n=Ne(s.maxWidth,o,"clientWidth"),r=Ne(s.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||R,maxHeight:r||R}}(t,e,i);let{width:l,height:h}=c;if("content-box"===r.boxSizing){const t=Be(r,"border","width"),e=Be(r,"padding");l-=e.width+t.width,h-=e.height+t.height}return l=Math.max(0,l-o.width),h=Math.max(0,n?Math.floor(l/n):h-o.height),l=He(Math.min(l,s,c.maxWidth)),h=He(Math.min(h,a,c.maxHeight)),l&&!h&&(h=He(l/2)),{width:l,height:h}}(t,e,i,n)}isAttached(t){const e=je(t);return!(!e||!e.isConnected)}}class On{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return W(this.x)&&W(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}On.defaults={},On.defaultRoutes=void 0;const En={values:t=>h(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let r,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const s=z(Math.abs(o)),a=Math.max(Math.min(-1*Math.floor(s),20),0),c={notation:r,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(c,this.options.ticks.format),Je(t,n,c)},logarithmic(t,e,i){if(0===t)return"0";const n=t/Math.pow(10,Math.floor(z(t)));return 1===n||2===n||5===n?En.numeric.call(this,t,e,i):""}};var An={formatters:En};function Dn(t,e,i,n,r){const o=p(n,0),s=Math.min(p(r,t.length),t.length);let a,c,l,h=0;for(i=Math.ceil(i),r&&(a=r-n,i=a/Math.floor(a/i)),l=o;l<0;)h++,l=Math.round(o+h*i);for(c=Math.max(o,0);c<s;c++)c===l&&(e.push(t[c]),h++,l=Math.round(o+h*i))}Bt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:An.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Bt.route("scale.ticks","color","","color"),Bt.route("scale.grid","color","","borderColor"),Bt.route("scale.grid","borderColor","","borderColor"),Bt.route("scale.title","color","","color"),Bt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Bt.describe("scales",{_fallback:"scale"}),Bt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Ln=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Tn(t,e){const i=[],n=t.length/e,r=t.length;let o=0;for(;o<r;o+=n)i.push(t[Math.floor(o)]);return i}function Cn(t,e,i){const n=t.ticks.length,r=Math.min(e,n-1),o=t._startPixel,s=t._endPixel,a=1e-6;let c,l=t.getPixelForTick(r);if(!(i&&(c=1===n?Math.max(l-o,s-l):0===e?(t.getPixelForTick(1)-l)/2:(l-t.getPixelForTick(r-1))/2,l+=r<e?c:-c,l<o-a||l>s+a)))return l}function Rn(t){return t.drawTicks?t.tickLength:0}function Fn(t,e){if(!t.display)return 0;const i=ce(t.font,e),n=ae(t.padding);return(h(t.text)?t.text.length:1)*i.lineHeight+n.height}function In(t,e,i){let n=o(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class jn extends On{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=d(t,Number.POSITIVE_INFINITY),e=d(e,Number.NEGATIVE_INFINITY),i=d(i,Number.POSITIVE_INFINITY),n=d(n,Number.NEGATIVE_INFINITY),{min:d(t,i),max:d(e,n),minDefined:f(t),maxDefined:f(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:r,maxDefined:o}=this.getUserBounds();if(r&&o)return{min:i,max:n};const s=this.getMatchingVisibleMetas();for(let a=0,c=s.length;a<c;++a)e=s[a].controller.getMinMax(this,t),r||(i=Math.min(i,e.min)),o||(n=Math.max(n,e.max));return i=o&&i>n?n:i,n=r&&i>n?i:n,{min:d(i,d(n,i)),max:d(n,d(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){m(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:r,ticks:o}=this.options,s=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:r}=t,o=g(e,(r-n)/2),s=(t,e)=>i&&0===t?0:t+e;return{min:s(n,-Math.abs(o)),max:s(r,o)}}(this,r,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=s<this.ticks.length;this._convertTicksToLabels(a?Tn(this.ticks,s):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,n=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),r=t._maxLength/i;return Math.floor(Math.min(n,r))}(t),r=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],o=r.length,s=r[0],a=r[o-1],c=[];if(o>n)return function(t,e,i,n){let r,o=0,s=i[0];for(n=Math.ceil(n),r=0;r<t.length;r++)r===s&&(e.push(t[r]),o++,s=i[o*n])}(e,c,r,o/n),c;const h=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),r=e.length/i;if(!n)return Math.max(r,1);const o=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>r)return e}return Math.max(r,1)}(r,e,n);if(o>0){let t,i;const n=o>1?Math.round((a-s)/(o-1)):null;for(Dn(e,c,h,l(n)?0:s-n,s),t=0,i=o-1;t<i;t++)Dn(e,c,h,r[t],r[t+1]);return Dn(e,c,h,a,l(n)?e.length:a+n),c}return Dn(e,c,h),c}(this,this.ticks),this._labelSizes=null),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){m(this.options.afterUpdate,[this])}beforeSetDimensions(){m(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){m(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),m(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){m(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,r;for(i=0,n=t.length;i<n;i++)r=t[i],r.label=m(e.callback,[r.value,i,t],this)}afterTickToLabelConversion(){m(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){m(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,n=e.minRotation||0,r=e.maxRotation;let o,s,a,c=n;if(!this._isVisible()||!e.display||n>=r||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const l=this._getLabelSizes(),h=l.widest.width,u=l.highest.height,f=Q(this.chart.width-h,0,this.maxWidth);o=t.offset?this.maxWidth/i:f/(i-1),h+6>o&&(o=f/(i-(t.offset?.5:1)),s=this.maxHeight-Rn(t.grid)-e.padding-Fn(t.title,this.chart.options.font),a=Math.sqrt(h*h+u*u),c=Y(Math.min(Math.asin(Q((l.highest.height+6)/o,-1,1)),Math.asin(Q(s/a,-1,1))-Math.asin(Q(u/a,-1,1)))),c=Math.max(n,Math.min(r,c))),this.labelRotation=c}afterCalculateLabelRotation(){m(this.options.afterCalculateLabelRotation,[this])}beforeFit(){m(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:r}}=this,o=this._isVisible(),s=this.isHorizontal();if(o){const o=Fn(n,e.options.font);if(s?(t.width=this.maxWidth,t.height=Rn(r)+o):(t.height=this.maxHeight,t.width=Rn(r)+o),i.display&&this.ticks.length){const{first:e,last:n,widest:r,highest:o}=this._getLabelSizes(),a=2*i.padding,c=U(this.labelRotation),l=Math.cos(c),h=Math.sin(c);if(s){const e=i.mirror?0:h*r.width+l*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=i.mirror?0:l*r.width+h*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,n,h,l)}}this._handleMargins(),s?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:r,padding:o},position:s}=this.options,a=0!==this.labelRotation,c="top"!==s&&"x"===this.axis;if(this.isHorizontal()){const s=this.getPixelForTick(0)-this.left,l=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,u=0;a?c?(h=n*t.width,u=i*e.height):(h=i*t.height,u=n*e.width):"start"===r?u=e.width:"end"===r?h=t.width:(h=t.width/2,u=e.width/2),this.paddingLeft=Math.max((h-s+o)*this.width/(this.width-s),0),this.paddingRight=Math.max((u-l+o)*this.width/(this.width-l),0)}else{let i=e.height/2,n=t.height/2;"start"===r?(i=0,n=t.height):"end"===r&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){m(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)l(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Tn(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:n}=this,r=[],o=[];let s,a,c,u,f,d,p,g,m,x,b,y=0,_=0;for(s=0;s<e;++s){if(u=t[s].label,f=this._resolveTickFontOptions(s),i.font=d=f.string,p=n[d]=n[d]||{data:{},gc:[]},g=f.lineHeight,m=x=0,l(u)||h(u)){if(h(u))for(a=0,c=u.length;a<c;++a)b=u[a],l(b)||h(b)||(m=Wt(i,p.data,p.gc,m,b),x+=g)}else m=Wt(i,p.data,p.gc,m,u),x=g;r.push(m),o.push(x),y=Math.max(m,y),_=Math.max(x,_)}!function(t,e){v(t,(t=>{const i=t.gc,n=i.length/2;let r;if(n>e){for(r=0;r<n;++r)delete t.data[i[r]];i.splice(0,n)}}))}(n,e);const w=r.indexOf(y),M=o.indexOf(_),S=t=>({width:r[t]||0,height:o[t]||0});return{first:S(0),last:S(e-1),widest:S(w),highest:S(M),widths:r,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Q(this._alignToPixels?$t(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return he(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=he(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=U(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),r=this._getLabelSizes(),o=t.autoSkipPadding||0,s=r?r.widest.width+o:0,a=r?r.highest.height+o:0;return this.isHorizontal()?a*i>s*n?s/i:a/n:a*n<s*i?a/i:s/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:r,position:o}=n,s=r.offset,a=this.isHorizontal(),c=this.ticks.length+(s?1:0),l=Rn(r),h=[],f=r.setContext(this.getContext()),d=f.drawBorder?f.borderWidth:0,g=d/2,m=function(t){return $t(i,t,d)};let v,x,b,y,_,w,M,S,k,P,O,E;if("top"===o)v=m(this.bottom),w=this.bottom-l,S=v-g,P=m(t.top)+g,E=t.bottom;else if("bottom"===o)v=m(this.top),P=t.top,E=m(t.bottom)-g,w=v+g,S=this.top+l;else if("left"===o)v=m(this.right),_=this.right-l,M=v-g,k=m(t.left)+g,O=t.right;else if("right"===o)v=m(this.left),k=t.left,O=m(t.right)-g,_=v+g,M=this.left+l;else if("x"===e){if("center"===o)v=m((t.top+t.bottom)/2+.5);else if(u(o)){const t=Object.keys(o)[0],e=o[t];v=m(this.chart.scales[t].getPixelForValue(e))}P=t.top,E=t.bottom,w=v+g,S=w+l}else if("y"===e){if("center"===o)v=m((t.left+t.right)/2);else if(u(o)){const t=Object.keys(o)[0],e=o[t];v=m(this.chart.scales[t].getPixelForValue(e))}_=v-g,M=_-l,k=t.left,O=t.right}const A=p(n.ticks.maxTicksLimit,c),D=Math.max(1,Math.ceil(c/A));for(x=0;x<c;x+=D){const t=r.setContext(this.getContext(x)),e=t.lineWidth,n=t.color,o=r.borderDash||[],c=t.borderDashOffset,l=t.tickWidth,u=t.tickColor,f=t.tickBorderDash||[],d=t.tickBorderDashOffset;b=Cn(this,x,s),void 0!==b&&(y=$t(i,b,e),a?_=M=k=O=y:w=S=P=E=y,h.push({tx1:_,ty1:w,tx2:M,ty2:S,x1:k,y1:P,x2:O,y2:E,width:e,color:n,borderDash:o,borderDashOffset:c,tickWidth:l,tickColor:u,tickBorderDash:f,tickBorderDashOffset:d}))}return this._ticksLength=c,this._borderValue=v,h}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:r}=i,o=this.isHorizontal(),s=this.ticks,{align:a,crossAlign:c,padding:l,mirror:f}=r,d=Rn(i.grid),p=d+l,g=f?-l:p,m=-U(this.labelRotation),v=[];let x,b,y,_,w,M,S,k,P,O,E,A,D="middle";if("top"===n)M=this.bottom-g,S=this._getXAxisLabelAlignment();else if("bottom"===n)M=this.top+g,S=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(d);S=t.textAlign,w=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(d);S=t.textAlign,w=t.x}else if("x"===e){if("center"===n)M=(t.top+t.bottom)/2+p;else if(u(n)){const t=Object.keys(n)[0],e=n[t];M=this.chart.scales[t].getPixelForValue(e)+p}S=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)w=(t.left+t.right)/2-p;else if(u(n)){const t=Object.keys(n)[0],e=n[t];w=this.chart.scales[t].getPixelForValue(e)}S=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===a?D="top":"end"===a&&(D="bottom"));const L=this._getLabelSizes();for(x=0,b=s.length;x<b;++x){y=s[x],_=y.label;const t=r.setContext(this.getContext(x));k=this.getPixelForTick(x)+r.labelOffset,P=this._resolveTickFontOptions(x),O=P.lineHeight,E=h(_)?_.length:1;const e=E/2,i=t.color,a=t.textStrokeColor,l=t.textStrokeWidth;let u;if(o?(w=k,A="top"===n?"near"===c||0!==m?-E*O+O/2:"center"===c?-L.highest.height/2-e*O+O:-L.highest.height+O/2:"near"===c||0!==m?O/2:"center"===c?L.highest.height/2-e*O:L.highest.height-E*O,f&&(A*=-1)):(M=k,A=(1-E)*O/2),t.showLabelBackdrop){const e=ae(t.backdropPadding),i=L.heights[x],n=L.widths[x];let r=M+A-e.top,o=w-e.left;switch(D){case"middle":r-=i/2;break;case"bottom":r-=i}switch(S){case"center":o-=n/2;break;case"right":o-=n}u={left:o,top:r,width:n+e.width,height:i+e.height,color:t.backdropColor}}v.push({rotation:m,label:_,font:P,color:i,strokeColor:a,strokeWidth:l,textOffset:A,textAlign:S,textBaseline:D,translation:[w,M],backdrop:u})}return v}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-U(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:r}}=this.options,o=t+r,s=this._getLabelSizes().widest.width;let a,c;return"left"===e?n?(c=this.right+r,"near"===i?a="left":"center"===i?(a="center",c+=s/2):(a="right",c+=s)):(c=this.right-o,"near"===i?a="right":"center"===i?(a="center",c-=s/2):(a="left",c=this.left)):"right"===e?n?(c=this.left+r,"near"===i?a="right":"center"===i?(a="center",c-=s/2):(a="left",c-=s)):(c=this.left+o,"near"===i?a="left":"center"===i?(a="center",c+=s/2):(a="right",c=this.right)):a="right",{textAlign:a,x:c}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:r,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,r,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,o;const s=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(r=0,o=n.length;r<o;++r){const t=n[r];e.drawOnChartArea&&s({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&s({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,n=i.setContext(this.getContext()),r=i.drawBorder?n.borderWidth:0;if(!r)return;const o=i.setContext(this.getContext(0)).lineWidth,s=this._borderValue;let a,c,l,h;this.isHorizontal()?(a=$t(t,this.left,r)-r/2,c=$t(t,this.right,o)+o/2,l=h=s):(l=$t(t,this.top,r)-r/2,h=$t(t,this.bottom,o)+o/2,a=c=s),e.save(),e.lineWidth=n.borderWidth,e.strokeStyle=n.borderColor,e.beginPath(),e.moveTo(a,l),e.lineTo(c,h),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Xt(e,i);const n=this._labelItems||(this._labelItems=this._computeLabelItems(t));let r,o;for(r=0,o=n.length;r<o;++r){const t=n[r],i=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),Zt(e,o,0,t.textOffset,i,t)}i&&qt(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const r=ce(i.font),o=ae(i.padding),a=i.align;let c=r.lineHeight/2;"bottom"===e||"center"===e||u(e)?(c+=o.bottom,h(i.text)&&(c+=r.lineHeight*(i.text.length-1))):c+=o.top;const{titleX:l,titleY:f,maxWidth:d,rotation:p}=function(t,e,i,n){const{top:r,left:o,bottom:a,right:c,chart:l}=t,{chartArea:h,scales:f}=l;let d,p,g,m=0;const v=a-r,x=c-o;if(t.isHorizontal()){if(p=s(n,o,c),u(i)){const t=Object.keys(i)[0],n=i[t];g=f[t].getPixelForValue(n)+v-e}else g="center"===i?(h.bottom+h.top)/2+v-e:Ln(t,i,e);d=c-o}else{if(u(i)){const t=Object.keys(i)[0],n=i[t];p=f[t].getPixelForValue(n)-x+e}else p="center"===i?(h.left+h.right)/2-x+e:Ln(t,i,e);g=s(n,a,r),m="left"===i?-I:I}return{titleX:p,titleY:g,maxWidth:d,rotation:m}}(this,c,e,a);Zt(t,i.text,0,0,r,{color:i.color,maxWidth:d,rotation:p,textAlign:In(a,e,n),textBaseline:"middle",translation:[l,f]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=p(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===jn.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let r,o;for(r=0,o=e.length;r<o;++r){const o=e[r];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){return ce(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Nn{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,r=t.id,o=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in n||(n[r]=t,function(t,e,i){const n=w(Object.create(null),[i?Bt.get(i):{},Bt.get(e),t.defaults]);Bt.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),r=n.pop(),o=[t].concat(n).join("."),s=e[i].split("."),a=s.pop(),c=s.join(".");Bt.route(o,r,c,a)}))}(e,t.defaultRoutes),t.descriptors&&Bt.describe(e,t.descriptors)}(t,o,i),this.override&&Bt.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in Bt[n]&&(delete Bt[n][i],this.override&&delete jt[i])}}var zn=new class{constructor(){this.controllers=new Nn(Si,"datasets",!0),this.elements=new Nn(On,"elements"),this.plugins=new Nn(Object,"plugins"),this.scales=new Nn(jn,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):v(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=O(t);m(i["before"+n],[],i),e[t](i),m(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}};class Vn{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(r,t,e,i);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const r of t){const t=r.plugin;if(!1===m(t[i],[e,n,r.options],t)&&n.cancelable)return!1}return!0}invalidate(){l(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=p(i.options&&i.options.plugins,{}),r=function(t){const e=[],i=Object.keys(zn.plugins.items);for(let t=0;t<i.length;t++)e.push(zn.getPlugin(i[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const i=n[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==n||e?function(t,e,i,n){const r=[],o=t.getContext();for(let s=0;s<e.length;s++){const a=e[s],c=Bn(i[a.id],n);null!==c&&r.push({plugin:a,options:Wn(t.config,a,c,o)})}return r}(t,r,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function Bn(t,e){return e||!1!==t?!0===t?{}:t:null}function Wn(t,e,i,n){const r=t.pluginScopeKeys(e),o=t.getOptionScopes(i,r);return t.createResolver(o,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Hn(t,e){const i=Bt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function $n(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function Un(t){const e=t.options||(t.options={});e.plugins=p(e.plugins,{}),e.scales=function(t,e){const i=jt[t.type]||{scales:{}},n=e.scales||{},r=Hn(t.type,e),o=Object.create(null),s=Object.create(null);return Object.keys(n).forEach((t=>{const e=n[t];if(!u(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const a=$n(t,e),c=function(t,e){return t===e?"_index_":"_value_"}(a,r),l=i.scales||{};o[a]=o[a]||t,s[t]=M(Object.create(null),[{axis:a},e,l[a],l[c]])})),t.data.datasets.forEach((i=>{const r=i.type||t.type,a=i.indexAxis||Hn(r,e),c=(jt[r]||{}).scales||{};Object.keys(c).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),r=i[e+"AxisID"]||o[e]||e;s[r]=s[r]||Object.create(null),M(s[r],[{axis:e},n[r],c[t]])}))})),Object.keys(s).forEach((t=>{const e=s[t];M(e,[Bt.scales[e.type],Bt.scale])})),s}(t,e)}function Yn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Gn=new Map,Xn=new Set;function qn(t,e){let i=Gn.get(t);return i||(i=e(),Gn.set(t,i),Xn.add(i)),i}const Kn=(t,e,i)=>{const n=P(e,i);void 0!==n&&t.add(n)};class Jn{constructor(t){this._config=function(t){return(t=t||{}).data=Yn(t.data),Un(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Yn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Un(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return qn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return qn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return qn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return qn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:r}=this,o=this._cachedScopes(t,i),s=o.get(e);if(s)return s;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>Kn(a,t,e)))),e.forEach((t=>Kn(a,n,t))),e.forEach((t=>Kn(a,jt[r]||{},t))),e.forEach((t=>Kn(a,Bt,t))),e.forEach((t=>Kn(a,Nt,t)))}));const c=Array.from(a);return 0===c.length&&c.push(Object.create(null)),Xn.has(e)&&o.set(e,c),c}chartOptionScopes(){const{options:t,type:e}=this;return[t,jt[e]||{},Bt.datasets[e]||{},{type:e},Bt,Nt]}resolveNamedOptions(t,e,i,n=[""]){const r={$shared:!0},{resolver:o,subPrefixes:s}=Zn(this._resolverCache,t,n);let a=o;(function(t,e){const{isScriptable:i,isIndexable:n}=be(t);for(const r of e){const e=i(r),o=n(r),s=(o||e)&&t[r];if(e&&(A(s)||Qn(s))||o&&h(s))return!0}return!1})(o,e)&&(r.$shared=!1,a=xe(o,i=A(i)?i():i,this.createResolver(t,i,s)));for(const t of e)r[t]=a[t];return r}createResolver(t,e,i=[""],n){const{resolver:r}=Zn(this._resolverCache,t,i);return u(e)?xe(r,e,void 0,n):r}}function Zn(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const r=i.join();let o=n.get(r);return o||(o={resolver:ve(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(r,o)),o}const Qn=t=>u(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||A(t[i])),!1),tr=["top","bottom","left","right","chartArea"];function er(t,e){return"top"===t||"bottom"===t||-1===tr.indexOf(t)&&"x"===e}function ir(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function nr(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),m(i&&i.onComplete,[t],e)}function rr(t){const e=t.chart,i=e.options.animation;m(i&&i.onProgress,[t],e)}function or(t){return Ie()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const sr={},ar=t=>{const e=or(t);return Object.values(sr).filter((t=>t.canvas===e)).pop()};function cr(t,e,i){const n=Object.keys(t);for(const r of n){const n=+r;if(n>=e){const o=t[r];delete t[r],(i>0||n>e)&&(t[n+i]=o)}}}class lr{constructor(t,e){const i=this.config=new Jn(e),n=or(t),r=ar(n);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Ie()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?fn:Pn}(n)),this.platform.updateConfig(i);const s=this.platform.acquireContext(n,o.aspectRatio),a=s&&s.canvas,l=a&&a.height,h=a&&a.width;this.id=c(),this.ctx=s,this.canvas=a,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Vn,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],sr[this.id]=this,s&&a?(ai.listen(this,"complete",nr),ai.listen(this,"progress",rr),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:r}=this;return l(t)?e&&r?r:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():$e(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Ut(this.canvas,this.ctx),this}stop(){return ai.stop(this),this}resize(t,e){ai.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,r=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(n,t,e,r),s=i.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,$e(this,s,!0)&&(this.notifyPlugins("resize",{size:o}),m(i.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){v(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const i=e[t],n=$n(t,i),r="r"===n,o="x"===n;return{options:i,dposition:r?"chartArea":o?"bottom":"left",dtype:r?"radialLinear":o?"category":"linear"}})))),v(r,(e=>{const r=e.options,o=r.id,s=$n(o,r),a=p(r.type,e.dtype);void 0!==r.position&&er(r.position,s)===er(e.dposition)||(r.position=e.dposition),n[o]=!0;let c=null;o in i&&i[o].type===a?c=i[o]:(c=new(zn.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),i[c.id]=c),c.init(r,t)})),v(n,((t,e)=>{t||delete i[e]})),v(i,(t=>{hn.configure(this,t,t.options),hn.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(ir("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let r=this.getDatasetMeta(i);const o=n.type||this.config.type;if(r.type&&r.type!==o&&(this._destroyDatasetMeta(i),r=this.getDatasetMeta(i)),r.type=o,r.indexAxis=n.indexAxis||Hn(o,this.options),r.order=n.order||0,r.index=i,r.label=""+n.label,r.visible=this.isDatasetVisible(i),r.controller)r.controller.updateIndex(i),r.controller.linkScales();else{const e=zn.getController(o),{datasetElementType:n,dataElementType:s}=Bt.datasets[o];Object.assign(e.prototype,{dataElementType:zn.getElement(s),datasetElementType:n&&zn.getElement(n)}),r.controller=new e(this,i),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){v(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===r.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),n||v(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(ir("z","_idx"));const{_active:s,_lastEvent:a}=this;a?this._eventHandler(a,!0):s.length&&this._updateHoverStyles(s,s,!0),this.render()}_updateScales(){v(this.scales,(t=>{hn.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);D(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:r}of e)cr(t,n,"_removeElements"===i?-r:r)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!D(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;hn.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],v(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,A(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(ai.has(this)?this.attached&&!ai.running(this)&&ai.start(this):(this.draw(),nr({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,r;for(n=0,r=e.length;n<r;++n){const r=e[n];t&&!r.visible||i.push(r)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,r=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(n&&Xt(e,{left:!1===i.left?0:r.left-i.left,right:!1===i.right?this.width:r.right+i.right,top:!1===i.top?0:r.top-i.top,bottom:!1===i.bottom?this.height:r.bottom+i.bottom}),t.controller.draw(),n&&qt(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}getElementsAtEventForMode(t,e,i,n){const r=Ji.modes[e];return"function"==typeof r?r(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=he(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",r=this.getDatasetMeta(t),o=r.controller._resolveAnimations(void 0,n);E(e)?(r.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(r,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),ai.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Ut(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete sr[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};v(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const s=()=>{n("attach",s),this.attached=!0,this.resize(),i("resize",r),i("detach",o)};o=()=>{this.attached=!1,n("resize",r),this._stop(),this._resize(0,0),i("attach",s)},e.isAttached(this.canvas)?s():o()}unbindEvents(){v(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},v(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let r,o,s,a;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+n+"DatasetHoverStyle"]()),s=0,a=t.length;s<a;++s){o=t[s];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!x(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const n=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=r(e,t),s=i?t:r(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),s.length&&n.mode&&this.updateHoverStyle(s,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:Gt(t,this.chartArea,this._minPadding)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const r=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(r||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:r}=this,o=e,s=this._getActiveElements(t,n,i,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),c=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,a);i&&(this._lastEvent=null,m(r.onHover,[t,s,this],this),a&&m(r.onClick,[t,s,this],this));const l=!x(s,n);return(l||e)&&(this._active=s,this._updateHoverStyles(s,n,e)),this._lastEvent=c,l}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,n)}}const hr=()=>v(lr.instances,(t=>t._plugins.invalidate())),ur=!0;function fr(t,e,i){const{startAngle:n,pixelMargin:r,x:o,y:s,outerRadius:a,innerRadius:c}=e;let l=r/a;t.beginPath(),t.arc(o,s,a,n-l,i+l),c>r?(l=r/c,t.arc(o,s,c,i+l,n-l,!0)):t.arc(o,s,r,i+I,n-I),t.closePath(),t.clip()}function dr(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function pr(t,e,i,n,r){const{x:o,y:s,startAngle:a,pixelMargin:c,innerRadius:l}=e,h=Math.max(e.outerRadius+n+i-c,0),u=l>0?l+n+i+c:0;let f=0;const d=r-a;if(n){const t=((l>0?l-n:0)+(h>0?h-n:0))/2;f=(d-(0!==t?d*t/(t+n):d))/2}const p=(d-Math.max(.001,d*h-i/L)/h)/2,g=a+p+f,m=r-p-f,{outerStart:v,outerEnd:x,innerStart:b,innerEnd:y}=function(t,e,i,n){const r=re(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,s=Math.min(o,n*e/2),a=t=>{const e=(i-Math.min(o,t))*n/2;return Q(t,0,Math.min(o,e))};return{outerStart:a(r.outerStart),outerEnd:a(r.outerEnd),innerStart:Q(r.innerStart,0,s),innerEnd:Q(r.innerEnd,0,s)}}(e,u,h,m-g),_=h-v,w=h-x,M=g+v/_,S=m-x/w,k=u+b,P=u+y,O=g+b/k,E=m-y/P;if(t.beginPath(),t.arc(o,s,h,M,S),x>0){const e=dr(w,S,o,s);t.arc(e.x,e.y,x,S,m+I)}const A=dr(P,m,o,s);if(t.lineTo(A.x,A.y),y>0){const e=dr(P,E,o,s);t.arc(e.x,e.y,y,m+I,E+Math.PI)}if(t.arc(o,s,u,m-y/u,g+b/u,!0),b>0){const e=dr(k,O,o,s);t.arc(e.x,e.y,b,O+Math.PI,g-I)}const D=dr(_,g,o,s);if(t.lineTo(D.x,D.y),v>0){const e=dr(_,M,o,s);t.arc(e.x,e.y,v,g-I,M)}t.closePath()}Object.defineProperties(lr,{defaults:{enumerable:ur,value:Bt},instances:{enumerable:ur,value:sr},overrides:{enumerable:ur,value:jt},registry:{enumerable:ur,value:zn},version:{enumerable:ur,value:"3.7.1"},getChart:{enumerable:ur,value:ar},register:{enumerable:ur,value:(...t)=>{zn.add(...t),hr()}},unregister:{enumerable:ur,value:(...t)=>{zn.remove(...t),hr()}}});class gr extends On{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:r,distance:o}=X(n,{x:t,y:e}),{startAngle:s,endAngle:a,innerRadius:c,outerRadius:l,circumference:h}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),u=this.options.spacing/2,f=p(h,a-s)>=T||Z(r,s,a),d=tt(o,c+u,l+u);return f&&d}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:r,innerRadius:o,outerRadius:s}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:a,spacing:c}=this.options,l=(n+r)/2,h=(o+s+c+a)/2;return{x:e+Math.cos(l)*h,y:i+Math.sin(l)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/2,r=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>T?Math.floor(i/T):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let o=0;if(n){o=n/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*o,Math.sin(e)*o),this.circumference>=L&&(o=n)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const s=function(t,e,i,n){const{fullCircles:r,startAngle:o,circumference:s}=e;let a=e.endAngle;if(r){pr(t,e,i,n,o+T);for(let e=0;e<r;++e)t.fill();isNaN(s)||(a=o+s%T,s%T==0&&(a+=T))}return pr(t,e,i,n,a),t.fill(),a}(t,this,o,r);(function(t,e,i,n,r){const{options:o}=e,{borderWidth:s,borderJoinStyle:a}=o,c="inner"===o.borderAlign;s&&(c?(t.lineWidth=2*s,t.lineJoin=a||"round"):(t.lineWidth=s,t.lineJoin=a||"bevel"),e.fullCircles&&function(t,e,i){const{x:n,y:r,startAngle:o,pixelMargin:s,fullCircles:a}=e,c=Math.max(e.outerRadius-s,0),l=e.innerRadius+s;let h;for(i&&fr(t,e,o+T),t.beginPath(),t.arc(n,r,l,o+T,o,!0),h=0;h<a;++h)t.stroke();for(t.beginPath(),t.arc(n,r,c,o,o+T),h=0;h<a;++h)t.stroke()}(t,e,c),c&&fr(t,e,r),pr(t,e,i,n,r),t.stroke())})(t,this,o,r,s),t.restore()}}function mr(t,e,i=e){t.lineCap=p(i.borderCapStyle,e.borderCapStyle),t.setLineDash(p(i.borderDash,e.borderDash)),t.lineDashOffset=p(i.borderDashOffset,e.borderDashOffset),t.lineJoin=p(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=p(i.borderWidth,e.borderWidth),t.strokeStyle=p(i.borderColor,e.borderColor)}function vr(t,e,i){t.lineTo(i.x,i.y)}function xr(t,e,i={}){const n=t.length,{start:r=0,end:o=n-1}=i,{start:s,end:a}=e,c=Math.max(r,s),l=Math.min(o,a),h=r<s&&o<s||r>a&&o>a;return{count:n,start:c,loop:e.loop,ilen:l<c&&!h?n+l-c:l-c}}function br(t,e,i,n){const{points:r,options:o}=e,{count:s,start:a,loop:c,ilen:l}=xr(r,i,n),h=function(t){return t.stepped?Kt:t.tension||"monotone"===t.cubicInterpolationMode?Jt:vr}(o);let u,f,d,{move:p=!0,reverse:g}=n||{};for(u=0;u<=l;++u)f=r[(a+(g?l-u:u))%s],f.skip||(p?(t.moveTo(f.x,f.y),p=!1):h(t,d,f,g,o.stepped),d=f);return c&&(f=r[(a+(g?l:0))%s],h(t,d,f,g,o.stepped)),!!c}function yr(t,e,i,n){const r=e.points,{count:o,start:s,ilen:a}=xr(r,i,n),{move:c=!0,reverse:l}=n||{};let h,u,f,d,p,g,m=0,v=0;const x=t=>(s+(l?a-t:t))%o,b=()=>{d!==p&&(t.lineTo(m,p),t.lineTo(m,d),t.lineTo(m,g))};for(c&&(u=r[x(0)],t.moveTo(u.x,u.y)),h=0;h<=a;++h){if(u=r[x(h)],u.skip)continue;const e=u.x,i=u.y,n=0|e;n===f?(i<d?d=i:i>p&&(p=i),m=(v*m+e)/++v):(b(),t.lineTo(e,i),f=n,v=0,d=p=i),g=i}b()}function _r(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?br:yr}gr.id="arc",gr.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},gr.defaultRoutes={backgroundColor:"backgroundColor"};const wr="function"==typeof Path2D;class Mr extends On{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;Fe(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,r=i.length;if(!r)return[];const o=!!t._loop,{start:s,end:a}=function(t,e,i,n){let r=0,o=e-1;if(i&&!n)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,i&&(o+=r);o>r&&t[o%e].skip;)o--;return o%=e,{start:r,end:o}}(i,r,o,n);return function(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const r=t._chart.getContext(),o=oi(t.options),{_datasetIndex:s,options:{spanGaps:a}}=t,c=i.length,l=[];let h=o,u=e[0].start,f=u;function d(t,e,n,r){const o=a?-1:1;if(t!==e){for(t+=c;i[t%c].skip;)t-=o;for(;i[e%c].skip;)e+=o;t%c!=e%c&&(l.push({start:t%c,end:e%c,loop:n,style:r}),h=r,u=e%c)}}for(const t of e){u=a?u:t.start;let e,o=i[u%c];for(f=u+1;f<=t.end;f++){const a=i[f%c];e=oi(n.setContext(he(r,{type:"segment",p0:o,p1:a,p0DataIndex:(f-1)%c,p1DataIndex:f%c,datasetIndex:s}))),si(e,h)&&d(u,f-1,t.loop,h),o=a,h=e}u<f-1&&d(u,f-1,t.loop,h)}return l}(t,e,i,n):e}(t,!0===n?[{start:s,end:a,loop:o}]:function(t,e,i,n){const r=t.length,o=[];let s,a=e,c=t[e];for(s=e+1;s<=i;++s){const i=t[s%r];i.skip||i.stop?c.skip||(n=!1,o.push({start:e%r,end:(s-1)%r,loop:n}),e=a=i.stop?s:null):(a=s,c.skip&&(e=s)),c=i}return null!==a&&o.push({start:e%r,end:a%r,loop:n}),o}(i,s,a<s?a+r:a,!!t._fullLoop&&0===s&&a===r-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],r=this.points,o=ri(this,{property:e,start:n,end:n});if(!o.length)return;const s=[],a=function(t){return t.stepped?Xe:t.tension||"monotone"===t.cubicInterpolationMode?qe:Ge}(i);let c,l;for(c=0,l=o.length;c<l;++c){const{start:l,end:h}=o[c],u=r[l],f=r[h];if(u===f){s.push(u);continue}const d=a(u,f,Math.abs((n-u[e])/(f[e]-u[e])),i.stepped);d[e]=t[e],s.push(d)}return 1===s.length?s[0]:s}pathSegment(t,e,i){return _r(this)(t,this,e,i)}path(t,e,i){const n=this.segments,r=_r(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const s of n)o&=r(t,this,s,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),function(t,e,i,n){wr&&!e.options.segment?function(t,e,i,n){let r=e._path;r||(r=e._path=new Path2D,e.path(r,i,n)&&r.closePath()),mr(t,e.options),t.stroke(r)}(t,e,i,n):function(t,e,i,n){const{segments:r,options:o}=e,s=_r(e);for(const a of r)mr(t,o,a.style),t.beginPath(),s(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Sr(t,e,i,n){const r=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<r.radius+r.hitRadius}Mr.id="line",Mr.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Mr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Mr.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class kr extends On{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:r,y:o}=this.getProps(["x","y"],i);return Math.pow(t-r,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return Sr(this,t,"x",e)}inYRange(t,e){return Sr(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Gt(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,Yt(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Pr(t,e){const{x:i,y:n,base:r,width:o,height:s}=t.getProps(["x","y","base","width","height"],e);let a,c,l,h,u;return t.horizontal?(u=s/2,a=Math.min(i,r),c=Math.max(i,r),l=n-u,h=n+u):(u=o/2,a=i-u,c=i+u,l=Math.min(n,r),h=Math.max(n,r)),{left:a,top:l,right:c,bottom:h}}function Or(t,e,i,n){return t?0:Q(e,i,n)}function Er(t,e,i,n){const r=null===e,o=null===i,s=t&&!(r&&o)&&Pr(t,n);return s&&(r||tt(e,s.left,s.right))&&(o||tt(i,s.top,s.bottom))}function Ar(t,e){t.rect(e.x,e.y,e.w,e.h)}function Dr(t,e,i={}){const n=t.x!==i.x?-e:0,r=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,s=(t.y+t.h!==i.y+i.h?e:0)-r;return{x:t.x+n,y:t.y+r,w:t.w+o,h:t.h+s,radius:t.radius}}kr.id="point",kr.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},kr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Lr extends On{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:r,outer:o}=function(t){const e=Pr(t),i=e.right-e.left,n=e.bottom-e.top,r=function(t,e,i){const n=t.options.borderWidth,r=t.borderSkipped,o=oe(n);return{t:Or(r.top,o.top,0,i),r:Or(r.right,o.right,0,e),b:Or(r.bottom,o.bottom,0,i),l:Or(r.left,o.left,0,e)}}(t,i/2,n/2),o=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,o=se(r),s=Math.min(e,i),a=t.borderSkipped,c=n||u(r);return{topLeft:Or(!c||a.top||a.left,o.topLeft,0,s),topRight:Or(!c||a.top||a.right,o.topRight,0,s),bottomLeft:Or(!c||a.bottom||a.left,o.bottomLeft,0,s),bottomRight:Or(!c||a.bottom||a.right,o.bottomRight,0,s)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:o},inner:{x:e.left+r.l,y:e.top+r.t,w:i-r.l-r.r,h:n-r.t-r.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,o.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(r.b,r.r))}}}}(this),s=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?te:Ar;var a;t.save(),o.w===r.w&&o.h===r.h||(t.beginPath(),s(t,Dr(o,e,r)),t.clip(),s(t,Dr(r,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),s(t,Dr(r,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return Er(this,t,e,i)}inXRange(t,e){return Er(this,t,null,e)}inYRange(t,e){return Er(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+n)/2:e,y:r?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Lr.id="bar",Lr.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Lr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Tr=Object.freeze({__proto__:null,ArcElement:gr,LineElement:Mr,PointElement:kr,BarElement:Lr});function Cr(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Rr(t){t.data.datasets.forEach((t=>{Cr(t)}))}var Fr={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Rr(t);const n=t.width;t.data.datasets.forEach(((e,r)=>{const{_data:o,indexAxis:s}=e,a=t.getDatasetMeta(r),c=o||e.data;if("y"===le([s,t.options.indexAxis]))return;if("line"!==a.type)return;const h=t.scales[a.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let u,{start:f,count:d}=function(t,e){const i=e.length;let n,r=0;const{iScale:o}=t,{min:s,max:a,minDefined:c,maxDefined:l}=o.getUserBounds();return c&&(r=Q(fe(e,o.axis,s).lo,0,i-1)),n=l?Q(fe(e,o.axis,a).hi+1,r,i)-r:i-r,{start:r,count:n}}(a,c);if(d<=(i.threshold||4*n))Cr(e);else{switch(l(o)&&(e._data=c,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":u=function(t,e,i,n,r){const o=r.samples||n;if(o>=i)return t.slice(e,e+i);const s=[],a=(i-2)/(o-2);let c=0;const l=e+i-1;let h,u,f,d,p,g=e;for(s[c++]=t[g],h=0;h<o-2;h++){let n,r=0,o=0;const l=Math.floor((h+1)*a)+1+e,m=Math.min(Math.floor((h+2)*a)+1,i)+e,v=m-l;for(n=l;n<m;n++)r+=t[n].x,o+=t[n].y;r/=v,o/=v;const x=Math.floor(h*a)+1+e,b=Math.min(Math.floor((h+1)*a)+1,i)+e,{x:y,y:_}=t[g];for(f=d=-1,n=x;n<b;n++)d=.5*Math.abs((y-r)*(t[n].y-_)-(y-t[n].x)*(o-_)),d>f&&(f=d,u=t[n],p=n);s[c++]=u,g=p}return s[c++]=t[l],s}(c,f,d,n,i);break;case"min-max":u=function(t,e,i,n){let r,o,s,a,c,h,u,f,d,p,g=0,m=0;const v=[],x=e+i-1,b=t[e].x,y=t[x].x-b;for(r=e;r<e+i;++r){o=t[r],s=(o.x-b)/y*n,a=o.y;const e=0|s;if(e===c)a<d?(d=a,h=r):a>p&&(p=a,u=r),g=(m*g+o.x)/++m;else{const i=r-1;if(!l(h)&&!l(u)){const e=Math.min(h,u),n=Math.max(h,u);e!==f&&e!==i&&v.push({...t[e],x:g}),n!==f&&n!==i&&v.push({...t[n],x:g})}r>0&&i!==f&&v.push(t[i]),v.push(o),c=e,m=0,d=p=a,h=u=f=r}}return v}(c,f,d,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=u}}))},destroy(t){Rr(t)}};function Ir(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=p(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(u(n))return!isNaN(n.value)&&n;let r=parseFloat(n);return f(r)&&Math.floor(r)===r?("-"!==n[0]&&"+"!==n[0]||(r=e+r),!(r===e||r<0||r>=i)&&r):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}class jr{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:r,radius:o}=this;return e=e||{start:0,end:T},t.arc(n,r,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,r=t.angle;return{x:e+Math.cos(r)*n,y:i+Math.sin(r)*n,angle:r}}}function Nr(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function zr(t,e,i){const n=[];for(let r=0;r<i.length;r++){const o=i[r],{first:s,last:a,point:c}=Vr(o,e,"x");if(!(!c||s&&a))if(s)n.unshift(c);else if(t.push(c),!a)break}t.push(...n)}function Vr(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const r=n[i],o=t.segments,s=t.points;let a=!1,c=!1;for(let t=0;t<o.length;t++){const e=o[t],n=s[e.start][i],l=s[e.end][i];if(tt(r,n,l)){a=r===n,c=r===l;break}}return{first:a,last:c,point:n}}function Br(t){const{chart:e,fill:i,line:n}=t;if(f(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,r=[],o=n.segments,s=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const r=n[t];if(r.index===e)break;r.hidden||i.unshift(r.dataset)}return i}(e,i);a.push(Wr({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)zr(r,s[t],a)}return new Mr({points:r,options:{}})}(t);if("shape"===i)return!0;const r=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,r=e.getLabels().length,o=[],s=n.reverse?e.max:e.min,a=n.reverse?e.min:e.max;let c,l,h;if(h="start"===i?s:"end"===i?a:u(i)?i.value:e.getBaseValue(),n.grid.circular)return l=e.getPointPositionForValue(0,s),new jr({x:l.x,y:l.y,radius:e.getDistanceFromCenterForValue(h)});for(c=0;c<r;++c)o.push(e.getPointPositionForValue(c,h));return o}(t):function(t){const{scale:e={},fill:i}=t;let n,r=null;return"start"===i?r=e.bottom:"end"===i?r=e.top:u(i)?r=e.getPixelForValue(i.value):e.getBasePixel&&(r=e.getBasePixel()),f(r)?(n=e.isHorizontal(),{x:n?r:null,y:n?null:r}):null}(t)}(t);return r instanceof jr?r:Wr(r,n)}function Wr(t,e){let i=[],n=!1;return h(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},r=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Nr(t,e,r);const s=r[t],a=r[e];null!==n?(o.push({x:s.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:s.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new Mr({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function Hr(t,e,i){let n=t[e].fill;const r=[e];let o;if(!i)return n;for(;!1!==n&&-1===r.indexOf(n);){if(!f(n))return n;if(o=t[n],!o)return!1;if(o.visible)return n;r.push(n),n=o.fill}return!1}function $r(t,e,i){const{segments:n,points:r}=e;let o=!0,s=!1;t.beginPath();for(const a of n){const{start:n,end:c}=a,l=r[n],h=r[Nr(n,c,r)];o?(t.moveTo(l.x,l.y),o=!1):(t.lineTo(l.x,i),t.lineTo(l.x,l.y)),s=!!e.pathSegment(t,a,{move:s}),s?t.closePath():t.lineTo(h.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Ur(t,e,i,n){if(n)return;let r=e[t],o=i[t];return"angle"===t&&(r=J(r),o=J(o)),{property:t,start:r,end:o}}function Yr(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function Gr(t,e,i){const{top:n,bottom:r}=e.chart.chartArea,{property:o,start:s,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(s,n,a-s,r-n),t.clip())}function Xr(t,e,i,n){const r=e.interpolate(i,n);r&&t.lineTo(r.x,r.y)}function qr(t,e){const{line:i,target:n,property:r,color:o,scale:s}=e,a=function(t,e,i){const n=t.segments,r=t.points,o=e.points,s=[];for(const t of n){let{start:n,end:a}=t;a=Nr(n,a,r);const c=Ur(i,r[n],r[a],t.loop);if(!e.segments){s.push({source:t,target:c,start:r[n],end:r[a]});continue}const l=ri(e,c);for(const e of l){const n=Ur(i,o[e.start],o[e.end],e.loop),a=ni(t,r,n);for(const t of a)s.push({source:t,target:e,start:{[i]:Yr(c,n,"start",Math.max)},end:{[i]:Yr(c,n,"end",Math.min)}})}}return s}(i,n,r);for(const{source:e,target:c,start:l,end:h}of a){const{style:{backgroundColor:a=o}={}}=e,u=!0!==n;t.save(),t.fillStyle=a,Gr(t,s,u&&Ur(r,l,h)),t.beginPath();const f=!!i.pathSegment(t,e);let d;if(u){f?t.closePath():Xr(t,n,h,r);const e=!!n.pathSegment(t,c,{move:f,reverse:!0});d=f&&e,d||Xr(t,n,l,r)}t.closePath(),t.fill(d?"evenodd":"nonzero"),t.restore()}}function Kr(t,e,i){const n=Br(e),{line:r,scale:o,axis:s}=e,a=r.options,c=a.fill,l=a.backgroundColor,{above:h=l,below:u=l}=c||{};n&&r.points.length&&(Xt(t,i),function(t,e){const{line:i,target:n,above:r,below:o,area:s,scale:a}=e,c=i._loop?"angle":e.axis;t.save(),"x"===c&&o!==r&&($r(t,n,s.top),qr(t,{line:i,target:n,color:r,scale:a,property:c}),t.restore(),t.save(),$r(t,n,s.bottom)),qr(t,{line:i,target:n,color:o,scale:a,property:c}),t.restore()}(t,{line:r,target:n,above:h,below:u,area:i,scale:o,axis:s}),qt(t))}var Jr={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,r=[];let o,s,a,c;for(s=0;s<n;++s)o=t.getDatasetMeta(s),a=o.dataset,c=null,a&&a.options&&a instanceof Mr&&(c={visible:t.isDatasetVisible(s),index:s,fill:Ir(a,s,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=c,r.push(c);for(s=0;s<n;++s)c=r[s],c&&!1!==c.fill&&(c.fill=Hr(r,s,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,r=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=r.length-1;e>=0;--e){const i=r[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&Kr(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&Kr(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;n&&!1!==n.fill&&"beforeDatasetDraw"===i.drawTime&&Kr(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Zr=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class Qr extends On{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=m(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=ce(i.font),r=n.size,o=this._computeTitleHeight(),{boxWidth:s,itemHeight:a}=Zr(i,r);let c,l;e.font=n.string,this.isHorizontal()?(c=this.maxWidth,l=this._fitRows(o,r,s,a)+10):(l=this.maxHeight,c=this._fitCols(o,r,s,a)+10),this.width=Math.min(c,t.maxWidth||this.maxWidth),this.height=Math.min(l,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:r,maxWidth:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],c=this.lineWidths=[0],l=n+s;let h=t;r.textAlign="left",r.textBaseline="middle";let u=-1,f=-l;return this.legendItems.forEach(((t,d)=>{const p=i+e/2+r.measureText(t.text).width;(0===d||c[c.length-1]+p+2*s>o)&&(h+=l,c[c.length-(d>0?0:1)]=0,f+=l,u++),a[d]={left:0,top:f,row:u,width:p,height:n},c[c.length-1]+=p+s})),h}_fitCols(t,e,i,n){const{ctx:r,maxHeight:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],c=this.columnSizes=[],l=o-t;let h=s,u=0,f=0,d=0,p=0;return this.legendItems.forEach(((t,o)=>{const g=i+e/2+r.measureText(t.text).width;o>0&&f+n+2*s>l&&(h+=u+s,c.push({width:u,height:f}),d+=u+s,p++,u=f=0),a[o]={left:d,top:f,col:p,width:g,height:n},u=Math.max(u,g),f+=n+s})),h+=u,c.push({width:u,height:f}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:r}}=this,o=Ze(r,this.left,this.width);if(this.isHorizontal()){let r=0,a=s(i,this.left+n,this.right-this.lineWidths[r]);for(const c of e)r!==c.row&&(r=c.row,a=s(i,this.left+n,this.right-this.lineWidths[r])),c.top+=this.top+t+n,c.left=o.leftForLtr(o.x(a),c.width),a+=c.width+n}else{let r=0,a=s(i,this.top+t+n,this.bottom-this.columnSizes[r].height);for(const c of e)c.col!==r&&(r=c.col,a=s(i,this.top+t+n,this.bottom-this.columnSizes[r].height)),c.top=a,c.left+=this.left+n,c.left=o.leftForLtr(o.x(c.left),c.width),a+=c.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Xt(t,this),this._draw(),qt(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:r,labels:o}=t,a=Bt.color,c=Ze(t.rtl,this.left,this.width),l=ce(o.font),{color:h,padding:u}=o,f=l.size,d=f/2;let g;this.drawTitle(),n.textAlign=c.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=l.string;const{boxWidth:m,boxHeight:v,itemHeight:x}=Zr(o,f),b=this.isHorizontal(),y=this._computeTitleHeight();g=b?{x:s(r,this.left+u,this.right-i[0]),y:this.top+u+y,line:0}:{x:this.left+u,y:s(r,this.top+y+u,this.bottom-e[0].height),line:0},Qe(this.ctx,t.textDirection);const _=x+u;this.legendItems.forEach(((w,M)=>{n.strokeStyle=w.fontColor||h,n.fillStyle=w.fontColor||h;const S=n.measureText(w.text).width,k=c.textAlign(w.textAlign||(w.textAlign=o.textAlign)),P=m+d+S;let O=g.x,E=g.y;c.setWidth(this.width),b?M>0&&O+P+u>this.right&&(E=g.y+=_,g.line++,O=g.x=s(r,this.left+u,this.right-i[g.line])):M>0&&E+_>this.bottom&&(O=g.x=O+e[g.line].width+u,g.line++,E=g.y=s(r,this.top+y+u,this.bottom-e[g.line].height)),function(t,e,i){if(isNaN(m)||m<=0||isNaN(v)||v<0)return;n.save();const r=p(i.lineWidth,1);if(n.fillStyle=p(i.fillStyle,a),n.lineCap=p(i.lineCap,"butt"),n.lineDashOffset=p(i.lineDashOffset,0),n.lineJoin=p(i.lineJoin,"miter"),n.lineWidth=r,n.strokeStyle=p(i.strokeStyle,a),n.setLineDash(p(i.lineDash,[])),o.usePointStyle){const o={radius:m*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:r},s=c.xPlus(t,m/2);Yt(n,o,s,e+d)}else{const o=e+Math.max((f-v)/2,0),s=c.leftForLtr(t,m),a=se(i.borderRadius);n.beginPath(),Object.values(a).some((t=>0!==t))?te(n,{x:s,y:o,w:m,h:v,radius:a}):n.rect(s,o,m,v),n.fill(),0!==r&&n.stroke()}n.restore()}(c.x(O),E,w),O=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(k,O+m+d,b?O+P:this.right,t.rtl),function(t,e,i){Zt(n,i.text,t,e+x/2,l,{strikethrough:i.hidden,textAlign:c.textAlign(i.textAlign)})}(c.x(O),E,w),b?g.x+=P+u:g.y+=_})),ti(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=ce(e.font),n=ae(e.padding);if(!e.display)return;const r=Ze(t.rtl,this.left,this.width),a=this.ctx,c=e.position,l=i.size/2,h=n.top+l;let u,f=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),u=this.top+h,f=s(t.align,f,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);u=h+s(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const p=s(c,f,f+d);a.textAlign=r.textAlign(o(c)),a.textBaseline="middle",a.strokeStyle=e.color,a.fillStyle=e.color,a.font=i.string,Zt(a,e.text,p,u,i)}_computeTitleHeight(){const t=this.options.title,e=ce(t.font),i=ae(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,r;if(tt(t,this.left,this.right)&&tt(e,this.top,this.bottom))for(r=this.legendHitBoxes,i=0;i<r.length;++i)if(n=r[i],tt(t,n.left,n.left+n.width)&&tt(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const o=this._hoveredItem,s=(r=i,null!==(n=o)&&null!==r&&n.datasetIndex===r.datasetIndex&&n.index===r.index);o&&!s&&m(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!s&&m(e.onHover,[t,i,this],this)}else i&&m(e.onClick,[t,i,this],this);var n,r}}var to={id:"legend",_element:Qr,start(t,e,i){const n=t.legend=new Qr({ctx:t.ctx,options:i,chart:t});hn.configure(t,n,i),hn.addBox(t,n)},stop(t){hn.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;hn.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,r=i.chart;r.isDatasetVisible(n)?(r.hide(n),e.hidden=!0):(r.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:r,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const s=t.controller.getStyle(i?0:void 0),a=ae(s.borderWidth);return{text:e[t.index].label,fillStyle:s.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:s.borderCapStyle,lineDash:s.borderDash,lineDashOffset:s.borderDashOffset,lineJoin:s.borderJoinStyle,lineWidth:(a.width+a.height)/4,strokeStyle:s.borderColor,pointStyle:n||s.pointStyle,rotation:s.rotation,textAlign:r||s.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class eo extends On{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=h(i.text)?i.text.length:1;this._padding=ae(i.padding);const r=n*ce(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:r,options:o}=this,a=o.align;let c,l,h,u=0;return this.isHorizontal()?(l=s(a,i,r),h=e+t,c=r-i):("left"===o.position?(l=i+t,h=s(a,n,e),u=-.5*L):(l=r-t,h=s(a,e,n),u=.5*L),c=n-e),{titleX:l,titleY:h,maxWidth:c,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=ce(e.font),n=i.lineHeight/2+this._padding.top,{titleX:r,titleY:s,maxWidth:a,rotation:c}=this._drawArgs(n);Zt(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:c,textAlign:o(e.align),textBaseline:"middle",translation:[r,s]})}}var io={id:"title",_element:eo,start(t,e,i){!function(t,e){const i=new eo({ctx:t.ctx,options:e,chart:t});hn.configure(t,i,e),hn.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;hn.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;hn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const no=new WeakMap;var ro={id:"subtitle",start(t,e,i){const n=new eo({ctx:t.ctx,options:i,chart:t});hn.configure(t,n,i),hn.addBox(t,n),no.set(t,n)},stop(t){hn.removeBox(t,no.get(t)),no.delete(t)},beforeUpdate(t,e,i){const n=no.get(t);hn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const oo={average(t){if(!t.length)return!1;let e,i,n=0,r=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,r+=t.y,++o}}return{x:n/o,y:r/o}},nearest(t,e){if(!t.length)return!1;let i,n,r,o=e.x,s=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=q(e,n.getCenterPoint());t<a&&(a=t,r=n)}}if(r){const t=r.tooltipPosition();o=t.x,s=t.y}return{x:o,y:s}}};function so(t,e){return e&&(h(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function ao(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function co(t,e){const{element:i,datasetIndex:n,index:r}=e,o=t.getDatasetMeta(n).controller,{label:s,value:a}=o.getLabelAndValue(r);return{chart:t,label:s,parsed:o.getParsed(r),raw:t.data.datasets[n].data[r],formattedValue:a,dataset:o.getDataset(),dataIndex:r,datasetIndex:n,element:i}}function lo(t,e){const i=t.chart.ctx,{body:n,footer:r,title:o}=t,{boxWidth:s,boxHeight:a}=e,c=ce(e.bodyFont),l=ce(e.titleFont),h=ce(e.footerFont),u=o.length,f=r.length,d=n.length,p=ae(e.padding);let g=p.height,m=0,x=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);x+=t.beforeBody.length+t.afterBody.length,u&&(g+=u*l.lineHeight+(u-1)*e.titleSpacing+e.titleMarginBottom),x&&(g+=d*(e.displayColors?Math.max(a,c.lineHeight):c.lineHeight)+(x-d)*c.lineHeight+(x-1)*e.bodySpacing),f&&(g+=e.footerMarginTop+f*h.lineHeight+(f-1)*e.footerSpacing);let b=0;const y=function(t){m=Math.max(m,i.measureText(t).width+b)};return i.save(),i.font=l.string,v(t.title,y),i.font=c.string,v(t.beforeBody.concat(t.afterBody),y),b=e.displayColors?s+2+e.boxPadding:0,v(n,(t=>{v(t.before,y),v(t.lines,y),v(t.after,y)})),b=0,i.font=h.string,v(t.footer,y),i.restore(),m+=p.width,{width:m,height:g}}function ho(t,e,i,n){const{x:r,width:o}=i,{width:s,chartArea:{left:a,right:c}}=t;let l="center";return"center"===n?l=r<=(a+c)/2?"left":"right":r<=o/2?l="left":r>=s-o/2&&(l="right"),function(t,e,i,n){const{x:r,width:o}=n,s=i.caretSize+i.caretPadding;return"left"===t&&r+o+s>e.width||"right"===t&&r-o-s<0||void 0}(l,t,e,i)&&(l="center"),l}function uo(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||ho(t,e,i,n),yAlign:n}}function fo(t,e,i,n){const{caretSize:r,caretPadding:o,cornerRadius:s}=t,{xAlign:a,yAlign:c}=i,l=r+o,{topLeft:h,topRight:u,bottomLeft:f,bottomRight:d}=se(s);let p=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const g=function(t,e,i){let{y:n,height:r}=t;return"top"===e?n+=i:n-="bottom"===e?r+i:r/2,n}(e,c,l);return"center"===c?"left"===a?p+=l:"right"===a&&(p-=l):"left"===a?p-=Math.max(h,f)+r:"right"===a&&(p+=Math.max(u,d)+r),{x:Q(p,0,n.width-e.width),y:Q(g,0,n.height-e.height)}}function po(t,e,i){const n=ae(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function go(t){return so([],ao(t))}function mo(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class vo extends On{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,r=new fi(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=(this,he(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,n=i.beforeTitle.apply(this,[t]),r=i.title.apply(this,[t]),o=i.afterTitle.apply(this,[t]);let s=[];return s=so(s,ao(n)),s=so(s,ao(r)),s=so(s,ao(o)),s}getBeforeBody(t,e){return go(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,n=[];return v(t,(t=>{const e={before:[],lines:[],after:[]},r=mo(i,t);so(e.before,ao(r.beforeLabel.call(this,t))),so(e.lines,r.label.call(this,t)),so(e.after,ao(r.afterLabel.call(this,t))),n.push(e)})),n}getAfterBody(t,e){return go(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,n=i.beforeFooter.apply(this,[t]),r=i.footer.apply(this,[t]),o=i.afterFooter.apply(this,[t]);let s=[];return s=so(s,ao(n)),s=so(s,ao(r)),s=so(s,ao(o)),s}_createItems(t){const e=this._active,i=this.chart.data,n=[],r=[],o=[];let s,a,c=[];for(s=0,a=e.length;s<a;++s)c.push(co(this.chart,e[s]));return t.filter&&(c=c.filter(((e,n,r)=>t.filter(e,n,r,i)))),t.itemSort&&(c=c.sort(((e,n)=>t.itemSort(e,n,i)))),v(c,(e=>{const i=mo(t.callbacks,e);n.push(i.labelColor.call(this,e)),r.push(i.labelPointStyle.call(this,e)),o.push(i.labelTextColor.call(this,e))})),this.labelColors=n,this.labelPointStyles=r,this.labelTextColors=o,this.dataPoints=c,c}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let r,o=[];if(n.length){const t=oo[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=lo(this,i),s=Object.assign({},t,e),a=uo(this.chart,i,s),c=fo(i,s,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,r={opacity:1,x:c.x,y:c.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=o,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const r=this.getCaretPosition(t,i,n);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:r}=this,{caretSize:o,cornerRadius:s}=i,{topLeft:a,topRight:c,bottomLeft:l,bottomRight:h}=se(s),{x:u,y:f}=t,{width:d,height:p}=e;let g,m,v,x,b,y;return"center"===r?(b=f+p/2,"left"===n?(g=u,m=g-o,x=b+o,y=b-o):(g=u+d,m=g+o,x=b-o,y=b+o),v=g):(m="left"===n?u+Math.max(a,l)+o:"right"===n?u+d-Math.max(c,h)-o:this.caretX,"top"===r?(x=f,b=x-o,g=m-o,v=m+o):(x=f+p,b=x+o,g=m+o,v=m-o),y=x),{x1:g,x2:m,x3:v,y1:x,y2:b,y3:y}}drawTitle(t,e,i){const n=this.title,r=n.length;let o,s,a;if(r){const c=Ze(i.rtl,this.x,this.width);for(t.x=po(this,i.titleAlign,i),e.textAlign=c.textAlign(i.titleAlign),e.textBaseline="middle",o=ce(i.titleFont),s=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,a=0;a<r;++a)e.fillText(n[a],c.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+s,a+1===r&&(t.y+=i.titleMarginBottom-s)}}_drawColorBox(t,e,i,n,r){const o=this.labelColors[i],s=this.labelPointStyles[i],{boxHeight:a,boxWidth:c,boxPadding:l}=r,h=ce(r.bodyFont),u=po(this,"left",r),f=n.x(u),d=a<h.lineHeight?(h.lineHeight-a)/2:0,p=e.y+d;if(r.usePointStyle){const e={radius:Math.min(c,a)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},i=n.leftForLtr(f,c)+c/2,l=p+a/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,Yt(t,e,i,l),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,Yt(t,e,i,l)}else{t.lineWidth=o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=n.leftForLtr(f,c-l),i=n.leftForLtr(n.xPlus(f,1),c-l-2),s=se(o.borderRadius);Object.values(s).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,te(t,{x:e,y:p,w:c,h:a,radius:s}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),te(t,{x:i,y:p+1,w:c-2,h:a-2,radius:s}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,p,c,a),t.strokeRect(e,p,c,a),t.fillStyle=o.backgroundColor,t.fillRect(i,p+1,c-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:r,bodyAlign:o,displayColors:s,boxHeight:a,boxWidth:c,boxPadding:l}=i,h=ce(i.bodyFont);let u=h.lineHeight,f=0;const d=Ze(i.rtl,this.x,this.width),p=function(i){e.fillText(i,d.x(t.x+f),t.y+u/2),t.y+=u+r},g=d.textAlign(o);let m,x,b,y,_,w,M;for(e.textAlign=o,e.textBaseline="middle",e.font=h.string,t.x=po(this,g,i),e.fillStyle=i.bodyColor,v(this.beforeBody,p),f=s&&"right"!==g?"center"===o?c/2+l:c+2+l:0,y=0,w=n.length;y<w;++y){for(m=n[y],x=this.labelTextColors[y],e.fillStyle=x,v(m.before,p),b=m.lines,s&&b.length&&(this._drawColorBox(e,t,y,d,i),u=Math.max(h.lineHeight,a)),_=0,M=b.length;_<M;++_)p(b[_]),u=h.lineHeight;v(m.after,p)}f=0,u=h.lineHeight,v(this.afterBody,p),t.y-=r}drawFooter(t,e,i){const n=this.footer,r=n.length;let o,s;if(r){const a=Ze(i.rtl,this.x,this.width);for(t.x=po(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=a.textAlign(i.footerAlign),e.textBaseline="middle",o=ce(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,s=0;s<r;++s)e.fillText(n[s],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:r,yAlign:o}=this,{x:s,y:a}=t,{width:c,height:l}=i,{topLeft:h,topRight:u,bottomLeft:f,bottomRight:d}=se(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(s+h,a),"top"===o&&this.drawCaret(t,e,i,n),e.lineTo(s+c-u,a),e.quadraticCurveTo(s+c,a,s+c,a+u),"center"===o&&"right"===r&&this.drawCaret(t,e,i,n),e.lineTo(s+c,a+l-d),e.quadraticCurveTo(s+c,a+l,s+c-d,a+l),"bottom"===o&&this.drawCaret(t,e,i,n),e.lineTo(s+f,a+l),e.quadraticCurveTo(s,a+l,s,a+l-f),"center"===o&&"left"===r&&this.drawCaret(t,e,i,n),e.lineTo(s,a+h),e.quadraticCurveTo(s,a,s+h,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,r=i&&i.y;if(n||r){const i=oo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=lo(this,t),s=Object.assign({},i,this._size),a=uo(e,t,s),c=fo(t,s,a,e);n._to===c.x&&r._to===c.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,c))}}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},r={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=ae(e.padding),s=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&s&&(t.save(),t.globalAlpha=i,this.drawBackground(r,t,n,e),Qe(t,e.textDirection),r.y+=o.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),ti(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),r=!x(i,n),o=this._positionChanged(n,e);(r||o)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,r=this._active||[],o=this._getActiveElements(t,r,e,i),s=this._positionChanged(o,t),a=e||!x(o,r)||s;return a&&(this._active=o,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,i,n){const r=this.options;if("mouseout"===t.type)return[];if(!n)return e;const o=this.chart.getElementsAtEventForMode(t,r.mode,r,i);return r.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:r}=this,o=oo[r.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}vo.positioners=oo;var xo={id:"tooltip",_element:vo,positioners:oo,afterInit(t,e,i){i&&(t.tooltip=new vo({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:a,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:a,beforeBody:a,beforeLabel:a,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return l(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:a,afterBody:a,beforeFooter:a,footer:a,afterFooter:a}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},bo=Object.freeze({__proto__:null,Decimation:Fr,Filler:Jr,Legend:to,SubTitle:ro,Title:io,Tooltip:xo});class yo extends jn{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(l(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Q(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,n){const r=t.indexOf(e);return-1===r?((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n):r!==t.lastIndexOf(e)?i:r}(i,t,p(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function _o(t,e,{horizontal:i,minRotation:n}){const r=U(n),o=(i?Math.sin(r):Math.cos(r))||.001,s=.75*e*(""+t).length;return Math.min(e/o,s)}yo.id="category",yo.defaults={ticks:{callback:yo.prototype.getLabelForValue}};class wo extends jn{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return l(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:r}=this;const o=t=>n=e?n:t,s=t=>r=i?r:t;if(t){const t=V(n),e=V(r);t<0&&e<0?s(0):t>0&&e>0&&o(0)}if(n===r){let e=1;(r>=Number.MAX_SAFE_INTEGER||n<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*r)),s(r+e),t||o(n-e)}this.min=n,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:r,min:o,max:s,precision:a,count:c,maxTicks:h,maxDigits:u,includeBounds:f}=t,d=r||1,p=h-1,{min:g,max:m}=e,v=!l(o),x=!l(s),b=!l(c),y=(m-g)/(u+1);let _,w,M,S,k=B((m-g)/p/d)*d;if(k<1e-14&&!v&&!x)return[{value:g},{value:m}];S=Math.ceil(m/k)-Math.floor(g/k),S>p&&(k=B(S*k/p/d)*d),l(a)||(_=Math.pow(10,a),k=Math.ceil(k*_)/_),"ticks"===n?(w=Math.floor(g/k)*k,M=Math.ceil(m/k)*k):(w=g,M=m),v&&x&&r&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((s-o)/r,k/1e3)?(S=Math.round(Math.min((s-o)/k,h)),k=(s-o)/S,w=o,M=s):b?(w=v?o:w,M=x?s:M,S=c-1,k=(M-w)/S):(S=(M-w)/k,S=H(S,Math.round(S),k/1e3)?Math.round(S):Math.ceil(S));const P=Math.max(G(k),G(w));_=Math.pow(10,l(a)?P:a),w=Math.round(w*_)/_,M=Math.round(M*_)/_;let O=0;for(v&&(f&&w!==o?(i.push({value:o}),w<o&&O++,H(Math.round((w+O*k)*_)/_,o,_o(o,y,t))&&O++):w<o&&O++);O<S;++O)i.push({value:Math.round((w+O*k)*_)/_});return x&&f&&M!==s?i.length&&H(i[i.length-1].value,s,_o(s,y,t))?i[i.length-1].value=s:i.push({value:s}):x&&M!==s||i.push({value:M}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&$(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return Je(t,this.chart.options.locale,this.options.ticks.format)}}class Mo extends wo{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=f(t)?t:0,this.max=f(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=U(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function So(t){return 1==t/Math.pow(10,Math.floor(z(t)))}Mo.id="linear",Mo.defaults={ticks:{callback:An.formatters.numeric}};class ko extends jn{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=wo.prototype.parse.apply(this,[t,e]);if(0!==i)return f(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=f(t)?Math.max(0,t):null,this.max=f(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const r=e=>i=t?i:e,o=t=>n=e?n:t,s=(t,e)=>Math.pow(10,Math.floor(z(t))+e);i===n&&(i<=0?(r(1),o(10)):(r(s(i,-1)),o(s(n,1)))),i<=0&&r(s(n,-1)),n<=0&&o(s(i,1)),this._zero&&this.min!==this._suggestedMin&&i===s(this.min,0)&&r(s(i,-1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(z(e.max)),n=Math.ceil(e.max/Math.pow(10,i)),r=[];let o=d(t.min,Math.pow(10,Math.floor(z(e.min)))),s=Math.floor(z(o)),a=Math.floor(o/Math.pow(10,s)),c=s<0?Math.pow(10,Math.abs(s)):1;do{r.push({value:o,major:So(o)}),++a,10===a&&(a=1,++s,c=s>=0?1:c),o=Math.round(a*Math.pow(10,s)*c)/c}while(s<i||s===i&&a<n);const l=d(t.max,o);return r.push({value:l,major:So(o)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&$(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":Je(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=z(t),this._valueRange=z(this.max)-z(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(z(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Po(t){const e=t.ticks;if(e.display&&t.display){const t=ae(e.backdropPadding);return p(e.font&&e.font.size,Bt.font.size)+t.height}return 0}function Oo(t,e,i,n,r){return t===n||t===r?{start:e-i/2,end:e+i/2}:t<n||t>r?{start:e-i,end:e}:{start:e,end:e+i}}function Eo(t,e,i,n,r){const o=Math.abs(Math.sin(i)),s=Math.abs(Math.cos(i));let a=0,c=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),r.start<e.t?(c=(e.t-r.start)/s,t.t=Math.min(t.t,e.t-c)):r.end>e.b&&(c=(r.end-e.b)/s,t.b=Math.max(t.b,e.b+c))}function Ao(t){return 0===t||180===t?"center":t<180?"left":"right"}function Do(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Lo(t,e,i,n){const{ctx:r}=t;if(i)r.arc(t.xCenter,t.yCenter,e,0,T);else{let i=t.getPointPosition(0,e);r.moveTo(i.x,i.y);for(let o=1;o<n;o++)i=t.getPointPosition(o,e),r.lineTo(i.x,i.y)}}ko.id="logarithmic",ko.defaults={ticks:{callback:An.formatters.logarithmic,major:{enabled:!0}}};class To extends wo{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ae(Po(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=f(t)&&!isNaN(t)?t:0,this.max=f(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Po(this.options))}generateTickLabels(t){wo.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=m(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],r=[],o=t._pointLabels.length,s=t.options.pointLabels,a=s.centerPointLabels?L/o:0;for(let f=0;f<o;f++){const o=s.setContext(t.getPointLabelContext(f));r[f]=o.padding;const d=t.getPointPosition(f,t.drawingArea+r[f],a),p=ce(o.font),g=(c=t.ctx,l=p,u=h(u=t._pointLabels[f])?u:[u],{w:Ht(c,l.string,u),h:u.length*l.lineHeight});n[f]=g;const m=J(t.getIndexAngle(f)+a),v=Math.round(Y(m));Eo(i,e,m,Oo(v,d.x,g.w,0,180),Oo(v,d.y,g.h,90,270))}var c,l,u;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],r=t._pointLabels.length,o=t.options,s=Po(o)/2,a=t.drawingArea,c=o.pointLabels.centerPointLabels?L/r:0;for(let o=0;o<r;o++){const r=t.getPointPosition(o,a+s+i[o],c),f=Math.round(Y(J(r.angle+I))),d=e[o],p=Do(r.y,d.h,f),g=Ao(f),m=(l=r.x,h=d.w,"right"===(u=g)?l-=h:"center"===u&&(l-=h/2),l);n.push({x:r.x,y:p,textAlign:g,left:m,top:p,right:m+d.w,bottom:p+d.h})}var l,h,u;return n}(t,n,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return J(t*(T/(this._pointLabels.length||1))+U(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(l(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(l(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return he(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-I+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:r}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:r}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Lo(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n}=e,r=this._pointLabels.length;let o,s,a;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let r=e-1;r>=0;r--){const e=n.setContext(t.getPointLabelContext(r)),o=ce(e.font),{x:s,y:a,textAlign:c,left:h,top:u,right:f,bottom:d}=t._pointLabelItems[r],{backdropColor:p}=e;if(!l(p)){const t=ae(e.backdropPadding);i.fillStyle=p,i.fillRect(h-t.left,u-t.top,f-h+t.width,d-u+t.height)}Zt(i,t._pointLabels[r],s,a+o.lineHeight/2,o,{color:e.color,textAlign:c,textBaseline:"middle"})}}(this,r),n.display&&this.ticks.forEach(((t,e)=>{0!==e&&(s=this.getDistanceFromCenterForValue(t.value),function(t,e,i,n){const r=t.ctx,o=e.circular,{color:s,lineWidth:a}=e;!o&&!n||!s||!a||i<0||(r.save(),r.strokeStyle=s,r.lineWidth=a,r.setLineDash(e.borderDash),r.lineDashOffset=e.borderDashOffset,r.beginPath(),Lo(t,i,o,n),r.closePath(),r.stroke(),r.restore())}(this,n.setContext(this.getContext(e-1)),s,r))})),i.display){for(t.save(),o=r-1;o>=0;o--){const n=i.setContext(this.getPointLabelContext(o)),{color:r,lineWidth:c}=n;c&&r&&(t.lineWidth=c,t.strokeStyle=r,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,s=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),a=this.getPointPosition(o,s),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(a.x,a.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let r,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,s)=>{if(0===s&&!e.reverse)return;const a=i.setContext(this.getContext(s)),c=ce(a.font);if(r=this.getDistanceFromCenterForValue(this.ticks[s].value),a.showLabelBackdrop){t.font=c.string,o=t.measureText(n.label).width,t.fillStyle=a.backdropColor;const e=ae(a.backdropPadding);t.fillRect(-o/2-e.left,-r-c.size/2-e.top,o+e.width,c.size+e.height)}Zt(t,n.label,0,-r,c,{color:a.color})})),t.restore()}drawTitle(){}}To.id="radialLinear",To.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:An.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},To.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},To.descriptors={angleLines:{_fallback:"grid"}};const Co={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Ro=Object.keys(Co);function Fo(t,e){return t-e}function Io(t,e){if(l(e))return null;const i=t._adapter,{parser:n,round:r,isoWeekday:o}=t._parseOpts;let s=e;return"function"==typeof n&&(s=n(s)),f(s)||(s="string"==typeof n?i.parse(s,n):i.parse(s)),null===s?null:(r&&(s="week"!==r||!W(o)&&!0!==o?i.startOf(s,r):i.startOf(s,"isoWeek",o)),+s)}function jo(t,e,i,n){const r=Ro.length;for(let o=Ro.indexOf(t);o<r-1;++o){const t=Co[Ro[o]],r=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(r*t.size))<=n)return Ro[o]}return Ro[r-1]}function No(t,e,i){if(i){if(i.length){const{lo:n,hi:r}=ue(i,e);t[i[n]>=e?i[n]:i[r]]=!0}}else t[e]=!0}function zo(t,e,i){const n=[],r={},o=e.length;let s,a;for(s=0;s<o;++s)a=e[s],r[a]=s,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const r=t._adapter,o=+r.startOf(e[0].value,n),s=e[e.length-1].value;let a,c;for(a=o;a<=s;a=+r.add(a,1,n))c=i[a],c>=0&&(e[c].major=!0);return e}(t,n,r,i):n}class Vo extends jn{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),n=this._adapter=new $i._date(t.adapters.date);M(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Io(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:r,minDefined:o,maxDefined:s}=this.getUserBounds();function a(t){o||isNaN(t.min)||(n=Math.min(n,t.min)),s||isNaN(t.max)||(r=Math.max(r,t.max))}o&&s||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),n=f(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),r=f(r)&&!isNaN(r)?r:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,r-1),this.max=Math.max(n+1,r)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const r=this.min,o=function(t,e,i){let n=0,r=t.length;for(;n<r&&t[n]<e;)n++;for(;r>n&&t[r-1]>i;)r--;return n>0||r<t.length?t.slice(n,r):t}(n,r,this.max);return this._unit=e.unit||(i.autoSkip?jo(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(t,e,i,n,r){for(let o=Ro.length-1;o>=Ro.indexOf(i);o--){const i=Ro[o];if(Co[i].common&&t._adapter.diff(r,n,i)>=e-1)return i}return Ro[i?Ro.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Ro.indexOf(t)+1,i=Ro.length;e<i;++e)if(Co[Ro[e]].common)return Ro[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&o.reverse(),zo(this,o,this._majorUnit)}initOffsets(t){let e,i,n=0,r=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),r=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;n=Q(n,0,o),r=Q(r,0,o),this._offsets={start:n,end:r,factor:1/(n+1+r)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,r=n.time,o=r.unit||jo(r.minUnit,e,i,this._getLabelCapacity(e)),s=p(r.stepSize,1),a="week"===o&&r.isoWeekday,c=W(a)||!0===a,l={};let h,u,f=e;if(c&&(f=+t.startOf(f,"isoWeek",a)),f=+t.startOf(f,c?"day":o),t.diff(i,e,o)>1e5*s)throw new Error(e+" and "+i+" are too far apart with stepSize of "+s+" "+o);const d="data"===n.ticks.source&&this.getDataTimestamps();for(h=f,u=0;h<i;h=+t.add(h,s,o),u++)No(l,h,d);return h!==i&&"ticks"!==n.bounds&&1!==u||No(l,h,d),Object.keys(l).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,n){const r=this.options,o=r.time.displayFormats,s=this._unit,a=this._majorUnit,c=s&&o[s],l=a&&o[a],h=i[e],u=a&&l&&h&&h.major,f=this._adapter.format(t,n||(u?l:c)),d=r.ticks.callback;return d?m(d,[f,e,i],this):f}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=U(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(n),o=Math.sin(n),s=this._resolveTickFontOptions(0).size;return{w:i*r+s*o,h:i*o+s*r}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,r=this._tickFormatFunction(t,0,zo(this,[t],this._majorUnit),n),o=this._getLabelSize(r),s=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return s>0?s:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(Io(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return me(t.sort(Fo))}}function Bo(t,e,i){let n,r,o,s,a=0,c=t.length-1;i?(e>=t[a].pos&&e<=t[c].pos&&({lo:a,hi:c}=fe(t,"pos",e)),({pos:n,time:o}=t[a]),({pos:r,time:s}=t[c])):(e>=t[a].time&&e<=t[c].time&&({lo:a,hi:c}=fe(t,"time",e)),({time:n,pos:o}=t[a]),({time:r,pos:s}=t[c]));const l=r-n;return l?o+(s-o)*(e-n)/l:o}Vo.id="time",Vo.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Wo extends Vo{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Bo(e,this.min),this._tableRange=Bo(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],r=[];let o,s,a,c,l;for(o=0,s=t.length;o<s;++o)c=t[o],c>=e&&c<=i&&n.push(c);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,s=n.length;o<s;++o)l=n[o+1],a=n[o-1],c=n[o],Math.round((l+a)/2)!==c&&r.push({time:c,pos:o/(s-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Bo(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Bo(this._table,i*this._tableRange+this._minPos,!0)}}Wo.id="timeseries",Wo.defaults=Vo.defaults;const Ho=[Bi,Tr,bo,Object.freeze({__proto__:null,CategoryScale:yo,LinearScale:Mo,LogarithmicScale:ko,RadialLinearScale:To,TimeScale:Vo,TimeSeriesScale:Wo})];lr.register(...Ho);const $o=lr},7694:(t,e,i)=>{i(1761),t.exports=i(5645).RegExp.escape},4963:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},3365:(t,e,i)=>{var n=i(2032);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},7722:(t,e,i)=>{var n=i(6314)("unscopables"),r=Array.prototype;null==r[n]&&i(7728)(r,n,{}),t.exports=function(t){r[n][t]=!0}},6793:(t,e,i)=>{"use strict";var n=i(4496)(!0);t.exports=function(t,e,i){return e+(i?n(t,e).length:1)}},3328:t=>{t.exports=function(t,e,i,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(i+": incorrect invocation!");return t}},7007:(t,e,i)=>{var n=i(5286);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},5216:(t,e,i)=>{"use strict";var n=i(508),r=i(2337),o=i(875);t.exports=[].copyWithin||function(t,e){var i=n(this),s=o(i.length),a=r(t,s),c=r(e,s),l=arguments.length>2?arguments[2]:void 0,h=Math.min((void 0===l?s:r(l,s))-c,s-a),u=1;for(c<a&&a<c+h&&(u=-1,c+=h-1,a+=h-1);h-- >0;)c in i?i[a]=i[c]:delete i[a],a+=u,c+=u;return i}},6852:(t,e,i)=>{"use strict";var n=i(508),r=i(2337),o=i(875);t.exports=function(t){for(var e=n(this),i=o(e.length),s=arguments.length,a=r(s>1?arguments[1]:void 0,i),c=s>2?arguments[2]:void 0,l=void 0===c?i:r(c,i);l>a;)e[a++]=t;return e}},9490:(t,e,i)=>{var n=i(3531);t.exports=function(t,e){var i=[];return n(t,!1,i.push,i,e),i}},9315:(t,e,i)=>{var n=i(2110),r=i(875),o=i(2337);t.exports=function(t){return function(e,i,s){var a,c=n(e),l=r(c.length),h=o(s,l);if(t&&i!=i){for(;l>h;)if((a=c[h++])!=a)return!0}else for(;l>h;h++)if((t||h in c)&&c[h]===i)return t||h||0;return!t&&-1}}},50:(t,e,i)=>{var n=i(741),r=i(9797),o=i(508),s=i(875),a=i(6886);t.exports=function(t,e){var i=1==t,c=2==t,l=3==t,h=4==t,u=6==t,f=5==t||u,d=e||a;return function(e,a,p){for(var g,m,v=o(e),x=r(v),b=n(a,p,3),y=s(x.length),_=0,w=i?d(e,y):c?d(e,0):void 0;y>_;_++)if((f||_ in x)&&(m=b(g=x[_],_,v),t))if(i)w[_]=m;else if(m)switch(t){case 3:return!0;case 5:return g;case 6:return _;case 2:w.push(g)}else if(h)return!1;return u?-1:l||h?h:w}}},7628:(t,e,i)=>{var n=i(4963),r=i(508),o=i(9797),s=i(875);t.exports=function(t,e,i,a,c){n(e);var l=r(t),h=o(l),u=s(l.length),f=c?u-1:0,d=c?-1:1;if(i<2)for(;;){if(f in h){a=h[f],f+=d;break}if(f+=d,c?f<0:u<=f)throw TypeError("Reduce of empty array with no initial value")}for(;c?f>=0:u>f;f+=d)f in h&&(a=e(a,h[f],f,l));return a}},2736:(t,e,i)=>{var n=i(5286),r=i(4302),o=i(6314)("species");t.exports=function(t){var e;return r(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!r(e.prototype)||(e=void 0),n(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},6886:(t,e,i)=>{var n=i(2736);t.exports=function(t,e){return new(n(t))(e)}},4398:(t,e,i)=>{"use strict";var n=i(4963),r=i(5286),o=i(7242),s=[].slice,a={},c=function(t,e,i){if(!(e in a)){for(var n=[],r=0;r<e;r++)n[r]="a["+r+"]";a[e]=Function("F,a","return new F("+n.join(",")+")")}return a[e](t,i)};t.exports=Function.bind||function(t){var e=n(this),i=s.call(arguments,1),a=function(){var n=i.concat(s.call(arguments));return this instanceof a?c(e,n.length,n):o(e,n,t)};return r(e.prototype)&&(a.prototype=e.prototype),a}},1488:(t,e,i)=>{var n=i(2032),r=i(6314)("toStringTag"),o="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,i,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(i=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),r))?i:o?n(e):"Object"==(s=n(e))&&"function"==typeof e.callee?"Arguments":s}},2032:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},9824:(t,e,i)=>{"use strict";var n=i(9275).f,r=i(2503),o=i(4408),s=i(741),a=i(3328),c=i(3531),l=i(2923),h=i(5436),u=i(2974),f=i(7057),d=i(4728).fastKey,p=i(1616),g=f?"_s":"size",m=function(t,e){var i,n=d(e);if("F"!==n)return t._i[n];for(i=t._f;i;i=i.n)if(i.k==e)return i};t.exports={getConstructor:function(t,e,i,l){var h=t((function(t,n){a(t,h,e,"_i"),t._t=e,t._i=r(null),t._f=void 0,t._l=void 0,t[g]=0,null!=n&&c(n,i,t[l],t)}));return o(h.prototype,{clear:function(){for(var t=p(this,e),i=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete i[n.i];t._f=t._l=void 0,t[g]=0},delete:function(t){var i=p(this,e),n=m(i,t);if(n){var r=n.n,o=n.p;delete i._i[n.i],n.r=!0,o&&(o.n=r),r&&(r.p=o),i._f==n&&(i._f=r),i._l==n&&(i._l=o),i[g]--}return!!n},forEach:function(t){p(this,e);for(var i,n=s(t,arguments.length>1?arguments[1]:void 0,3);i=i?i.n:this._f;)for(n(i.v,i.k,this);i&&i.r;)i=i.p},has:function(t){return!!m(p(this,e),t)}}),f&&n(h.prototype,"size",{get:function(){return p(this,e)[g]}}),h},def:function(t,e,i){var n,r,o=m(t,e);return o?o.v=i:(t._l=o={i:r=d(e,!0),k:e,v:i,p:n=t._l,n:void 0,r:!1},t._f||(t._f=o),n&&(n.n=o),t[g]++,"F"!==r&&(t._i[r]=o)),t},getEntry:m,setStrong:function(t,e,i){l(t,e,(function(t,i){this._t=p(t,e),this._k=i,this._l=void 0}),(function(){for(var t=this,e=t._k,i=t._l;i&&i.r;)i=i.p;return t._t&&(t._l=i=i?i.n:t._t._f)?h(0,"keys"==e?i.k:"values"==e?i.v:[i.k,i.v]):(t._t=void 0,h(1))}),i?"entries":"values",!i,!0),u(e)}}},6132:(t,e,i)=>{var n=i(1488),r=i(9490);t.exports=function(t){return function(){if(n(this)!=t)throw TypeError(t+"#toJSON isn't generic");return r(this)}}},3657:(t,e,i)=>{"use strict";var n=i(4408),r=i(4728).getWeak,o=i(7007),s=i(5286),a=i(3328),c=i(3531),l=i(50),h=i(9181),u=i(1616),f=l(5),d=l(6),p=0,g=function(t){return t._l||(t._l=new m)},m=function(){this.a=[]},v=function(t,e){return f(t.a,(function(t){return t[0]===e}))};m.prototype={get:function(t){var e=v(this,t);if(e)return e[1]},has:function(t){return!!v(this,t)},set:function(t,e){var i=v(this,t);i?i[1]=e:this.a.push([t,e])},delete:function(t){var e=d(this.a,(function(e){return e[0]===t}));return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,i,o){var l=t((function(t,n){a(t,l,e,"_i"),t._t=e,t._i=p++,t._l=void 0,null!=n&&c(n,i,t[o],t)}));return n(l.prototype,{delete:function(t){if(!s(t))return!1;var i=r(t);return!0===i?g(u(this,e)).delete(t):i&&h(i,this._i)&&delete i[this._i]},has:function(t){if(!s(t))return!1;var i=r(t);return!0===i?g(u(this,e)).has(t):i&&h(i,this._i)}}),l},def:function(t,e,i){var n=r(o(e),!0);return!0===n?g(t).set(e,i):n[t._i]=i,t},ufstore:g}},5795:(t,e,i)=>{"use strict";var n=i(3816),r=i(2985),o=i(7234),s=i(4408),a=i(4728),c=i(3531),l=i(3328),h=i(5286),u=i(4253),f=i(7462),d=i(2943),p=i(266);t.exports=function(t,e,i,g,m,v){var x=n[t],b=x,y=m?"set":"add",_=b&&b.prototype,w={},M=function(t){var e=_[t];o(_,t,"delete"==t||"has"==t?function(t){return!(v&&!h(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return v&&!h(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,i){return e.call(this,0===t?0:t,i),this})};if("function"==typeof b&&(v||_.forEach&&!u((function(){(new b).entries().next()})))){var S=new b,k=S[y](v?{}:-0,1)!=S,P=u((function(){S.has(1)})),O=f((function(t){new b(t)})),E=!v&&u((function(){for(var t=new b,e=5;e--;)t[y](e,e);return!t.has(-0)}));O||((b=e((function(e,i){l(e,b,t);var n=p(new x,e,b);return null!=i&&c(i,m,n[y],n),n}))).prototype=_,_.constructor=b),(P||E)&&(M("delete"),M("has"),m&&M("get")),(E||k)&&M(y),v&&_.clear&&delete _.clear}else b=g.getConstructor(e,t,m,y),s(b.prototype,i),a.NEED=!0;return d(b,t),w[t]=b,r(r.G+r.W+r.F*(b!=x),w),v||g.setStrong(b,t,m),b}},5645:t=>{var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)},2811:(t,e,i)=>{"use strict";var n=i(9275),r=i(681);t.exports=function(t,e,i){e in t?n.f(t,e,r(0,i)):t[e]=i}},741:(t,e,i)=>{var n=i(4963);t.exports=function(t,e,i){if(n(t),void 0===e)return t;switch(i){case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,r){return t.call(e,i,n,r)}}return function(){return t.apply(e,arguments)}}},3537:(t,e,i)=>{"use strict";var n=i(4253),r=Date.prototype.getTime,o=Date.prototype.toISOString,s=function(t){return t>9?t:"0"+t};t.exports=n((function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-50000000000001))}))||!n((function(){o.call(new Date(NaN))}))?function(){if(!isFinite(r.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),i=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+s(t.getUTCMonth()+1)+"-"+s(t.getUTCDate())+"T"+s(t.getUTCHours())+":"+s(t.getUTCMinutes())+":"+s(t.getUTCSeconds())+"."+(i>99?i:"0"+s(i))+"Z"}:o},870:(t,e,i)=>{"use strict";var n=i(7007),r=i(1689),o="number";t.exports=function(t){if("string"!==t&&t!==o&&"default"!==t)throw TypeError("Incorrect hint");return r(n(this),t!=o)}},1355:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},7057:(t,e,i)=>{t.exports=!i(4253)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},2457:(t,e,i)=>{var n=i(5286),r=i(3816).document,o=n(r)&&n(r.createElement);t.exports=function(t){return o?r.createElement(t):{}}},4430:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},5541:(t,e,i)=>{var n=i(7184),r=i(4548),o=i(4682);t.exports=function(t){var e=n(t),i=r.f;if(i)for(var s,a=i(t),c=o.f,l=0;a.length>l;)c.call(t,s=a[l++])&&e.push(s);return e}},2985:(t,e,i)=>{var n=i(3816),r=i(5645),o=i(7728),s=i(7234),a=i(741),c=function(t,e,i){var l,h,u,f,d=t&c.F,p=t&c.G,g=t&c.S,m=t&c.P,v=t&c.B,x=p?n:g?n[e]||(n[e]={}):(n[e]||{}).prototype,b=p?r:r[e]||(r[e]={}),y=b.prototype||(b.prototype={});for(l in p&&(i=e),i)u=((h=!d&&x&&void 0!==x[l])?x:i)[l],f=v&&h?a(u,n):m&&"function"==typeof u?a(Function.call,u):u,x&&s(x,l,u,t&c.U),b[l]!=u&&o(b,l,f),m&&y[l]!=u&&(y[l]=u)};n.core=r,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},8852:(t,e,i)=>{var n=i(6314)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(i){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},4253:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},8082:(t,e,i)=>{"use strict";i(8269);var n=i(7234),r=i(7728),o=i(4253),s=i(1355),a=i(6314),c=i(1165),l=a("species"),h=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),u=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var i="ab".split(t);return 2===i.length&&"a"===i[0]&&"b"===i[1]}();t.exports=function(t,e,i){var f=a(t),d=!o((function(){var e={};return e[f]=function(){return 7},7!=""[t](e)})),p=d?!o((function(){var e=!1,i=/a/;return i.exec=function(){return e=!0,null},"split"===t&&(i.constructor={},i.constructor[l]=function(){return i}),i[f](""),!e})):void 0;if(!d||!p||"replace"===t&&!h||"split"===t&&!u){var g=/./[f],m=i(s,f,""[t],(function(t,e,i,n,r){return e.exec===c?d&&!r?{done:!0,value:g.call(e,i,n)}:{done:!0,value:t.call(i,e,n)}:{done:!1}})),v=m[0],x=m[1];n(String.prototype,t,v),r(RegExp.prototype,f,2==e?function(t,e){return x.call(t,this,e)}:function(t){return x.call(t,this)})}}},3218:(t,e,i)=>{"use strict";var n=i(7007);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},3325:(t,e,i)=>{"use strict";var n=i(4302),r=i(5286),o=i(875),s=i(741),a=i(6314)("isConcatSpreadable");t.exports=function t(e,i,c,l,h,u,f,d){for(var p,g,m=h,v=0,x=!!f&&s(f,d,3);v<l;){if(v in c){if(p=x?x(c[v],v,i):c[v],g=!1,r(p)&&(g=void 0!==(g=p[a])?!!g:n(p)),g&&u>0)m=t(e,i,p,o(p.length),m,u-1)-1;else{if(m>=9007199254740991)throw TypeError();e[m]=p}m++}v++}return m}},3531:(t,e,i)=>{var n=i(741),r=i(8851),o=i(6555),s=i(7007),a=i(875),c=i(9002),l={},h={},u=t.exports=function(t,e,i,u,f){var d,p,g,m,v=f?function(){return t}:c(t),x=n(i,u,e?2:1),b=0;if("function"!=typeof v)throw TypeError(t+" is not iterable!");if(o(v)){for(d=a(t.length);d>b;b++)if((m=e?x(s(p=t[b])[0],p[1]):x(t[b]))===l||m===h)return m}else for(g=v.call(t);!(p=g.next()).done;)if((m=r(g,x,p.value,e))===l||m===h)return m};u.BREAK=l,u.RETURN=h},18:(t,e,i)=>{t.exports=i(3825)("native-function-to-string",Function.toString)},3816:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},9181:t=>{var e={}.hasOwnProperty;t.exports=function(t,i){return e.call(t,i)}},7728:(t,e,i)=>{var n=i(9275),r=i(681);t.exports=i(7057)?function(t,e,i){return n.f(t,e,r(1,i))}:function(t,e,i){return t[e]=i,t}},639:(t,e,i)=>{var n=i(3816).document;t.exports=n&&n.documentElement},1734:(t,e,i)=>{t.exports=!i(7057)&&!i(4253)((function(){return 7!=Object.defineProperty(i(2457)("div"),"a",{get:function(){return 7}}).a}))},266:(t,e,i)=>{var n=i(5286),r=i(7375).set;t.exports=function(t,e,i){var o,s=e.constructor;return s!==i&&"function"==typeof s&&(o=s.prototype)!==i.prototype&&n(o)&&r&&r(t,o),t}},7242:t=>{t.exports=function(t,e,i){var n=void 0===i;switch(e.length){case 0:return n?t():t.call(i);case 1:return n?t(e[0]):t.call(i,e[0]);case 2:return n?t(e[0],e[1]):t.call(i,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(i,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(i,e[0],e[1],e[2],e[3])}return t.apply(i,e)}},9797:(t,e,i)=>{var n=i(2032);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},6555:(t,e,i)=>{var n=i(2803),r=i(6314)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||o[r]===t)}},4302:(t,e,i)=>{var n=i(2032);t.exports=Array.isArray||function(t){return"Array"==n(t)}},8367:(t,e,i)=>{var n=i(5286),r=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&r(t)===t}},5286:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},5364:(t,e,i)=>{var n=i(5286),r=i(2032),o=i(6314)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==r(t))}},8851:(t,e,i)=>{var n=i(7007);t.exports=function(t,e,i,r){try{return r?e(n(i)[0],i[1]):e(i)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},9988:(t,e,i)=>{"use strict";var n=i(2503),r=i(681),o=i(2943),s={};i(7728)(s,i(6314)("iterator"),(function(){return this})),t.exports=function(t,e,i){t.prototype=n(s,{next:r(1,i)}),o(t,e+" Iterator")}},2923:(t,e,i)=>{"use strict";var n=i(4461),r=i(2985),o=i(7234),s=i(7728),a=i(2803),c=i(9988),l=i(2943),h=i(468),u=i(6314)("iterator"),f=!([].keys&&"next"in[].keys()),d="keys",p="values",g=function(){return this};t.exports=function(t,e,i,m,v,x,b){c(i,e,m);var y,_,w,M=function(t){if(!f&&t in O)return O[t];switch(t){case d:case p:return function(){return new i(this,t)}}return function(){return new i(this,t)}},S=e+" Iterator",k=v==p,P=!1,O=t.prototype,E=O[u]||O["@@iterator"]||v&&O[v],A=E||M(v),D=v?k?M("entries"):A:void 0,L="Array"==e&&O.entries||E;if(L&&(w=h(L.call(new t)))!==Object.prototype&&w.next&&(l(w,S,!0),n||"function"==typeof w[u]||s(w,u,g)),k&&E&&E.name!==p&&(P=!0,A=function(){return E.call(this)}),n&&!b||!f&&!P&&O[u]||s(O,u,A),a[e]=A,a[S]=g,v)if(y={values:k?A:M(p),keys:x?A:M(d),entries:D},b)for(_ in y)_ in O||o(O,_,y[_]);else r(r.P+r.F*(f||P),e,y);return y}},7462:(t,e,i)=>{var n=i(6314)("iterator"),r=!1;try{var o=[7][n]();o.return=function(){r=!0},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!r)return!1;var i=!1;try{var o=[7],s=o[n]();s.next=function(){return{done:i=!0}},o[n]=function(){return s},t(o)}catch(t){}return i}},5436:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},2803:t=>{t.exports={}},4461:t=>{t.exports=!1},3086:t=>{var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},4934:(t,e,i)=>{var n=i(1801),r=Math.pow,o=r(2,-52),s=r(2,-23),a=r(2,127)*(2-s),c=r(2,-126);t.exports=Math.fround||function(t){var e,i,r=Math.abs(t),l=n(t);return r<c?l*(r/c/s+1/o-1/o)*c*s:(i=(e=(1+s/o)*r)-(e-r))>a||i!=i?l*(1/0):l*i}},6206:t=>{t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},8757:t=>{t.exports=Math.scale||function(t,e,i,n,r){return 0===arguments.length||t!=t||e!=e||i!=i||n!=n||r!=r?NaN:t===1/0||t===-1/0?t:(t-e)*(r-n)/(i-e)+n}},1801:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},4728:(t,e,i)=>{var n=i(3953)("meta"),r=i(5286),o=i(9181),s=i(9275).f,a=0,c=Object.isExtensible||function(){return!0},l=!i(4253)((function(){return c(Object.preventExtensions({}))})),h=function(t){s(t,n,{value:{i:"O"+ ++a,w:{}}})},u=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!r(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,n)){if(!c(t))return"F";if(!e)return"E";h(t)}return t[n].i},getWeak:function(t,e){if(!o(t,n)){if(!c(t))return!0;if(!e)return!1;h(t)}return t[n].w},onFreeze:function(t){return l&&u.NEED&&c(t)&&!o(t,n)&&h(t),t}}},133:(t,e,i)=>{var n=i(8416),r=i(2985),o=i(3825)("metadata"),s=o.store||(o.store=new(i(147))),a=function(t,e,i){var r=s.get(t);if(!r){if(!i)return;s.set(t,r=new n)}var o=r.get(e);if(!o){if(!i)return;r.set(e,o=new n)}return o};t.exports={store:s,map:a,has:function(t,e,i){var n=a(e,i,!1);return void 0!==n&&n.has(t)},get:function(t,e,i){var n=a(e,i,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,i,n){a(i,n,!0).set(t,e)},keys:function(t,e){var i=a(t,e,!1),n=[];return i&&i.forEach((function(t,e){n.push(e)})),n},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){r(r.S,"Reflect",t)}}},4351:(t,e,i)=>{var n=i(3816),r=i(4193).set,o=n.MutationObserver||n.WebKitMutationObserver,s=n.process,a=n.Promise,c="process"==i(2032)(s);t.exports=function(){var t,e,i,l=function(){var n,r;for(c&&(n=s.domain)&&n.exit();t;){r=t.fn,t=t.next;try{r()}catch(n){throw t?i():e=void 0,n}}e=void 0,n&&n.enter()};if(c)i=function(){s.nextTick(l)};else if(!o||n.navigator&&n.navigator.standalone)if(a&&a.resolve){var h=a.resolve(void 0);i=function(){h.then(l)}}else i=function(){r.call(n,l)};else{var u=!0,f=document.createTextNode("");new o(l).observe(f,{characterData:!0}),i=function(){f.data=u=!u}}return function(n){var r={fn:n,next:void 0};e&&(e.next=r),t||(t=r,i()),e=r}}},3499:(t,e,i)=>{"use strict";var n=i(4963);function r(t){var e,i;this.promise=new t((function(t,n){if(void 0!==e||void 0!==i)throw TypeError("Bad Promise constructor");e=t,i=n})),this.resolve=n(e),this.reject=n(i)}t.exports.f=function(t){return new r(t)}},5345:(t,e,i)=>{"use strict";var n=i(7057),r=i(7184),o=i(4548),s=i(4682),a=i(508),c=i(9797),l=Object.assign;t.exports=!l||i(4253)((function(){var t={},e={},i=Symbol(),n="abcdefghijklmnopqrst";return t[i]=7,n.split("").forEach((function(t){e[t]=t})),7!=l({},t)[i]||Object.keys(l({},e)).join("")!=n}))?function(t,e){for(var i=a(t),l=arguments.length,h=1,u=o.f,f=s.f;l>h;)for(var d,p=c(arguments[h++]),g=u?r(p).concat(u(p)):r(p),m=g.length,v=0;m>v;)d=g[v++],n&&!f.call(p,d)||(i[d]=p[d]);return i}:l},2503:(t,e,i)=>{var n=i(7007),r=i(5588),o=i(4430),s=i(9335)("IE_PROTO"),a=function(){},c=function(){var t,e=i(2457)("iframe"),n=o.length;for(e.style.display="none",i(639).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;n--;)delete c.prototype[o[n]];return c()};t.exports=Object.create||function(t,e){var i;return null!==t?(a.prototype=n(t),i=new a,a.prototype=null,i[s]=t):i=c(),void 0===e?i:r(i,e)}},9275:(t,e,i)=>{var n=i(7007),r=i(1734),o=i(1689),s=Object.defineProperty;e.f=i(7057)?Object.defineProperty:function(t,e,i){if(n(t),e=o(e,!0),n(i),r)try{return s(t,e,i)}catch(t){}if("get"in i||"set"in i)throw TypeError("Accessors not supported!");return"value"in i&&(t[e]=i.value),t}},5588:(t,e,i)=>{var n=i(9275),r=i(7007),o=i(7184);t.exports=i(7057)?Object.defineProperties:function(t,e){r(t);for(var i,s=o(e),a=s.length,c=0;a>c;)n.f(t,i=s[c++],e[i]);return t}},1670:(t,e,i)=>{"use strict";t.exports=i(4461)||!i(4253)((function(){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete i(3816)[t]}))},8693:(t,e,i)=>{var n=i(4682),r=i(681),o=i(2110),s=i(1689),a=i(9181),c=i(1734),l=Object.getOwnPropertyDescriptor;e.f=i(7057)?l:function(t,e){if(t=o(t),e=s(e,!0),c)try{return l(t,e)}catch(t){}if(a(t,e))return r(!n.f.call(t,e),t[e])}},9327:(t,e,i)=>{var n=i(2110),r=i(616).f,o={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return s&&"[object Window]"==o.call(t)?function(t){try{return r(t)}catch(t){return s.slice()}}(t):r(n(t))}},616:(t,e,i)=>{var n=i(189),r=i(4430).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,r)}},4548:(t,e)=>{e.f=Object.getOwnPropertySymbols},468:(t,e,i)=>{var n=i(9181),r=i(508),o=i(9335)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=r(t),n(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},189:(t,e,i)=>{var n=i(9181),r=i(2110),o=i(9315)(!1),s=i(9335)("IE_PROTO");t.exports=function(t,e){var i,a=r(t),c=0,l=[];for(i in a)i!=s&&n(a,i)&&l.push(i);for(;e.length>c;)n(a,i=e[c++])&&(~o(l,i)||l.push(i));return l}},7184:(t,e,i)=>{var n=i(189),r=i(4430);t.exports=Object.keys||function(t){return n(t,r)}},4682:(t,e)=>{e.f={}.propertyIsEnumerable},3160:(t,e,i)=>{var n=i(2985),r=i(5645),o=i(4253);t.exports=function(t,e){var i=(r.Object||{})[t]||Object[t],s={};s[t]=e(i),n(n.S+n.F*o((function(){i(1)})),"Object",s)}},1131:(t,e,i)=>{var n=i(7057),r=i(7184),o=i(2110),s=i(4682).f;t.exports=function(t){return function(e){for(var i,a=o(e),c=r(a),l=c.length,h=0,u=[];l>h;)i=c[h++],n&&!s.call(a,i)||u.push(t?[i,a[i]]:a[i]);return u}}},7643:(t,e,i)=>{var n=i(616),r=i(4548),o=i(7007),s=i(3816).Reflect;t.exports=s&&s.ownKeys||function(t){var e=n.f(o(t)),i=r.f;return i?e.concat(i(t)):e}},7743:(t,e,i)=>{var n=i(3816).parseFloat,r=i(9599).trim;t.exports=1/n(i(4644)+"-0")!=-1/0?function(t){var e=r(String(t),3),i=n(e);return 0===i&&"-"==e.charAt(0)?-0:i}:n},5960:(t,e,i)=>{var n=i(3816).parseInt,r=i(9599).trim,o=i(4644),s=/^[-+]?0[xX]/;t.exports=8!==n(o+"08")||22!==n(o+"0x16")?function(t,e){var i=r(String(t),3);return n(i,e>>>0||(s.test(i)?16:10))}:n},188:t=>{t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},94:(t,e,i)=>{var n=i(7007),r=i(5286),o=i(3499);t.exports=function(t,e){if(n(t),r(e)&&e.constructor===t)return e;var i=o.f(t);return(0,i.resolve)(e),i.promise}},681:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},4408:(t,e,i)=>{var n=i(7234);t.exports=function(t,e,i){for(var r in e)n(t,r,e[r],i);return t}},7234:(t,e,i)=>{var n=i(3816),r=i(7728),o=i(9181),s=i(3953)("src"),a=i(18),c="toString",l=(""+a).split(c);i(5645).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,i,a){var c="function"==typeof i;c&&(o(i,"name")||r(i,"name",e)),t[e]!==i&&(c&&(o(i,s)||r(i,s,t[e]?""+t[e]:l.join(String(e)))),t===n?t[e]=i:a?t[e]?t[e]=i:r(t,e,i):(delete t[e],r(t,e,i)))})(Function.prototype,c,(function(){return"function"==typeof this&&this[s]||a.call(this)}))},7787:(t,e,i)=>{"use strict";var n=i(1488),r=RegExp.prototype.exec;t.exports=function(t,e){var i=t.exec;if("function"==typeof i){var o=i.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return r.call(t,e)}},1165:(t,e,i)=>{"use strict";var n,r,o=i(3218),s=RegExp.prototype.exec,a=String.prototype.replace,c=s,l=(n=/a/,r=/b*/g,s.call(n,"a"),s.call(r,"a"),0!==n.lastIndex||0!==r.lastIndex),h=void 0!==/()??/.exec("")[1];(l||h)&&(c=function(t){var e,i,n,r,c=this;return h&&(i=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),l&&(e=c.lastIndex),n=s.call(c,t),l&&n&&(c.lastIndex=c.global?n.index+n[0].length:e),h&&n&&n.length>1&&a.call(n[0],i,(function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(n[r]=void 0)})),n}),t.exports=c},5496:t=>{t.exports=function(t,e){var i=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,i)}}},7195:t=>{t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},1024:(t,e,i)=>{"use strict";var n=i(2985),r=i(4963),o=i(741),s=i(3531);t.exports=function(t){n(n.S,t,{from:function(t){var e,i,n,a,c=arguments[1];return r(this),(e=void 0!==c)&&r(c),null==t?new this:(i=[],e?(n=0,a=o(c,arguments[2],2),s(t,!1,(function(t){i.push(a(t,n++))}))):s(t,!1,i.push,i),new this(i))}})}},4881:(t,e,i)=>{"use strict";var n=i(2985);t.exports=function(t){n(n.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},7375:(t,e,i)=>{var n=i(5286),r=i(7007),o=function(t,e){if(r(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=i(741)(Function.call,i(8693).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,i){return o(t,i),e?t.__proto__=i:n(t,i),t}}({},!1):void 0),check:o}},2974:(t,e,i)=>{"use strict";var n=i(3816),r=i(9275),o=i(7057),s=i(6314)("species");t.exports=function(t){var e=n[t];o&&e&&!e[s]&&r.f(e,s,{configurable:!0,get:function(){return this}})}},2943:(t,e,i)=>{var n=i(9275).f,r=i(9181),o=i(6314)("toStringTag");t.exports=function(t,e,i){t&&!r(t=i?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},9335:(t,e,i)=>{var n=i(3825)("keys"),r=i(3953);t.exports=function(t){return n[t]||(n[t]=r(t))}},3825:(t,e,i)=>{var n=i(5645),r=i(3816),o="__core-js_shared__",s=r[o]||(r[o]={});(t.exports=function(t,e){return s[t]||(s[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:i(4461)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},8364:(t,e,i)=>{var n=i(7007),r=i(4963),o=i(6314)("species");t.exports=function(t,e){var i,s=n(t).constructor;return void 0===s||null==(i=n(s)[o])?e:r(i)}},7717:(t,e,i)=>{"use strict";var n=i(4253);t.exports=function(t,e){return!!t&&n((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},4496:(t,e,i)=>{var n=i(1467),r=i(1355);t.exports=function(t){return function(e,i){var o,s,a=String(r(e)),c=n(i),l=a.length;return c<0||c>=l?t?"":void 0:(o=a.charCodeAt(c))<55296||o>56319||c+1===l||(s=a.charCodeAt(c+1))<56320||s>57343?t?a.charAt(c):o:t?a.slice(c,c+2):s-56320+(o-55296<<10)+65536}}},2094:(t,e,i)=>{var n=i(5364),r=i(1355);t.exports=function(t,e,i){if(n(e))throw TypeError("String#"+i+" doesn't accept regex!");return String(r(t))}},9395:(t,e,i)=>{var n=i(2985),r=i(4253),o=i(1355),s=/"/g,a=function(t,e,i,n){var r=String(o(t)),a="<"+e;return""!==i&&(a+=" "+i+'="'+String(n).replace(s,"&quot;")+'"'),a+">"+r+"</"+e+">"};t.exports=function(t,e){var i={};i[t]=e(a),n(n.P+n.F*r((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3})),"String",i)}},5442:(t,e,i)=>{var n=i(875),r=i(8595),o=i(1355);t.exports=function(t,e,i,s){var a=String(o(t)),c=a.length,l=void 0===i?" ":String(i),h=n(e);if(h<=c||""==l)return a;var u=h-c,f=r.call(l,Math.ceil(u/l.length));return f.length>u&&(f=f.slice(0,u)),s?f+a:a+f}},8595:(t,e,i)=>{"use strict";var n=i(1467),r=i(1355);t.exports=function(t){var e=String(r(this)),i="",o=n(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(i+=e);return i}},9599:(t,e,i)=>{var n=i(2985),r=i(1355),o=i(4253),s=i(4644),a="["+s+"]",c=RegExp("^"+a+a+"*"),l=RegExp(a+a+"*$"),h=function(t,e,i){var r={},a=o((function(){return!!s[t]()||"​"!="​"[t]()})),c=r[t]=a?e(u):s[t];i&&(r[i]=c),n(n.P+n.F*a,"String",r)},u=h.trim=function(t,e){return t=String(r(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(l,"")),t};t.exports=h},4644:t=>{t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},4193:(t,e,i)=>{var n,r,o,s=i(741),a=i(7242),c=i(639),l=i(2457),h=i(3816),u=h.process,f=h.setImmediate,d=h.clearImmediate,p=h.MessageChannel,g=h.Dispatch,m=0,v={},x=function(){var t=+this;if(v.hasOwnProperty(t)){var e=v[t];delete v[t],e()}},b=function(t){x.call(t.data)};f&&d||(f=function(t){for(var e=[],i=1;arguments.length>i;)e.push(arguments[i++]);return v[++m]=function(){a("function"==typeof t?t:Function(t),e)},n(m),m},d=function(t){delete v[t]},"process"==i(2032)(u)?n=function(t){u.nextTick(s(x,t,1))}:g&&g.now?n=function(t){g.now(s(x,t,1))}:p?(o=(r=new p).port2,r.port1.onmessage=b,n=s(o.postMessage,o,1)):h.addEventListener&&"function"==typeof postMessage&&!h.importScripts?(n=function(t){h.postMessage(t+"","*")},h.addEventListener("message",b,!1)):n="onreadystatechange"in l("script")?function(t){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),x.call(t)}}:function(t){setTimeout(s(x,t,1),0)}),t.exports={set:f,clear:d}},2337:(t,e,i)=>{var n=i(1467),r=Math.max,o=Math.min;t.exports=function(t,e){return(t=n(t))<0?r(t+e,0):o(t,e)}},4843:(t,e,i)=>{var n=i(1467),r=i(875);t.exports=function(t){if(void 0===t)return 0;var e=n(t),i=r(e);if(e!==i)throw RangeError("Wrong length!");return i}},1467:t=>{var e=Math.ceil,i=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?i:e)(t)}},2110:(t,e,i)=>{var n=i(9797),r=i(1355);t.exports=function(t){return n(r(t))}},875:(t,e,i)=>{var n=i(1467),r=Math.min;t.exports=function(t){return t>0?r(n(t),9007199254740991):0}},508:(t,e,i)=>{var n=i(1355);t.exports=function(t){return Object(n(t))}},1689:(t,e,i)=>{var n=i(5286);t.exports=function(t,e){if(!n(t))return t;var i,r;if(e&&"function"==typeof(i=t.toString)&&!n(r=i.call(t)))return r;if("function"==typeof(i=t.valueOf)&&!n(r=i.call(t)))return r;if(!e&&"function"==typeof(i=t.toString)&&!n(r=i.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},8440:(t,e,i)=>{"use strict";if(i(7057)){var n=i(4461),r=i(3816),o=i(4253),s=i(2985),a=i(9383),c=i(1125),l=i(741),h=i(3328),u=i(681),f=i(7728),d=i(4408),p=i(1467),g=i(875),m=i(4843),v=i(2337),x=i(1689),b=i(9181),y=i(1488),_=i(5286),w=i(508),M=i(6555),S=i(2503),k=i(468),P=i(616).f,O=i(9002),E=i(3953),A=i(6314),D=i(50),L=i(9315),T=i(8364),C=i(6997),R=i(2803),F=i(7462),I=i(2974),j=i(6852),N=i(5216),z=i(9275),V=i(8693),B=z.f,W=V.f,H=r.RangeError,$=r.TypeError,U=r.Uint8Array,Y="ArrayBuffer",G="SharedArrayBuffer",X="BYTES_PER_ELEMENT",q=Array.prototype,K=c.ArrayBuffer,J=c.DataView,Z=D(0),Q=D(2),tt=D(3),et=D(4),it=D(5),nt=D(6),rt=L(!0),ot=L(!1),st=C.values,at=C.keys,ct=C.entries,lt=q.lastIndexOf,ht=q.reduce,ut=q.reduceRight,ft=q.join,dt=q.sort,pt=q.slice,gt=q.toString,mt=q.toLocaleString,vt=A("iterator"),xt=A("toStringTag"),bt=E("typed_constructor"),yt=E("def_constructor"),_t=a.CONSTR,wt=a.TYPED,Mt=a.VIEW,St="Wrong length!",kt=D(1,(function(t,e){return Dt(T(t,t[yt]),e)})),Pt=o((function(){return 1===new U(new Uint16Array([1]).buffer)[0]})),Ot=!!U&&!!U.prototype.set&&o((function(){new U(1).set({})})),Et=function(t,e){var i=p(t);if(i<0||i%e)throw H("Wrong offset!");return i},At=function(t){if(_(t)&&wt in t)return t;throw $(t+" is not a typed array!")},Dt=function(t,e){if(!_(t)||!(bt in t))throw $("It is not a typed array constructor!");return new t(e)},Lt=function(t,e){return Tt(T(t,t[yt]),e)},Tt=function(t,e){for(var i=0,n=e.length,r=Dt(t,n);n>i;)r[i]=e[i++];return r},Ct=function(t,e,i){B(t,e,{get:function(){return this._d[i]}})},Rt=function(t){var e,i,n,r,o,s,a=w(t),c=arguments.length,h=c>1?arguments[1]:void 0,u=void 0!==h,f=O(a);if(null!=f&&!M(f)){for(s=f.call(a),n=[],e=0;!(o=s.next()).done;e++)n.push(o.value);a=n}for(u&&c>2&&(h=l(h,arguments[2],2)),e=0,i=g(a.length),r=Dt(this,i);i>e;e++)r[e]=u?h(a[e],e):a[e];return r},Ft=function(){for(var t=0,e=arguments.length,i=Dt(this,e);e>t;)i[t]=arguments[t++];return i},It=!!U&&o((function(){mt.call(new U(1))})),jt=function(){return mt.apply(It?pt.call(At(this)):At(this),arguments)},Nt={copyWithin:function(t,e){return N.call(At(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return et(At(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return j.apply(At(this),arguments)},filter:function(t){return Lt(this,Q(At(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return it(At(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return nt(At(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Z(At(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return ot(At(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return rt(At(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ft.apply(At(this),arguments)},lastIndexOf:function(t){return lt.apply(At(this),arguments)},map:function(t){return kt(At(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ht.apply(At(this),arguments)},reduceRight:function(t){return ut.apply(At(this),arguments)},reverse:function(){for(var t,e=this,i=At(e).length,n=Math.floor(i/2),r=0;r<n;)t=e[r],e[r++]=e[--i],e[i]=t;return e},some:function(t){return tt(At(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return dt.call(At(this),t)},subarray:function(t,e){var i=At(this),n=i.length,r=v(t,n);return new(T(i,i[yt]))(i.buffer,i.byteOffset+r*i.BYTES_PER_ELEMENT,g((void 0===e?n:v(e,n))-r))}},zt=function(t,e){return Lt(this,pt.call(At(this),t,e))},Vt=function(t){At(this);var e=Et(arguments[1],1),i=this.length,n=w(t),r=g(n.length),o=0;if(r+e>i)throw H(St);for(;o<r;)this[e+o]=n[o++]},Bt={entries:function(){return ct.call(At(this))},keys:function(){return at.call(At(this))},values:function(){return st.call(At(this))}},Wt=function(t,e){return _(t)&&t[wt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Ht=function(t,e){return Wt(t,e=x(e,!0))?u(2,t[e]):W(t,e)},$t=function(t,e,i){return!(Wt(t,e=x(e,!0))&&_(i)&&b(i,"value"))||b(i,"get")||b(i,"set")||i.configurable||b(i,"writable")&&!i.writable||b(i,"enumerable")&&!i.enumerable?B(t,e,i):(t[e]=i.value,t)};_t||(V.f=Ht,z.f=$t),s(s.S+s.F*!_t,"Object",{getOwnPropertyDescriptor:Ht,defineProperty:$t}),o((function(){gt.call({})}))&&(gt=mt=function(){return ft.call(this)});var Ut=d({},Nt);d(Ut,Bt),f(Ut,vt,Bt.values),d(Ut,{slice:zt,set:Vt,constructor:function(){},toString:gt,toLocaleString:jt}),Ct(Ut,"buffer","b"),Ct(Ut,"byteOffset","o"),Ct(Ut,"byteLength","l"),Ct(Ut,"length","e"),B(Ut,xt,{get:function(){return this[wt]}}),t.exports=function(t,e,i,c){var l=t+((c=!!c)?"Clamped":"")+"Array",u="get"+t,d="set"+t,p=r[l],v=p||{},x=p&&k(p),b=!p||!a.ABV,w={},M=p&&p.prototype,O=function(t,i){B(t,i,{get:function(){return function(t,i){var n=t._d;return n.v[u](i*e+n.o,Pt)}(this,i)},set:function(t){return function(t,i,n){var r=t._d;c&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),r.v[d](i*e+r.o,n,Pt)}(this,i,t)},enumerable:!0})};b?(p=i((function(t,i,n,r){h(t,p,l,"_d");var o,s,a,c,u=0,d=0;if(_(i)){if(!(i instanceof K||(c=y(i))==Y||c==G))return wt in i?Tt(p,i):Rt.call(p,i);o=i,d=Et(n,e);var v=i.byteLength;if(void 0===r){if(v%e)throw H(St);if((s=v-d)<0)throw H(St)}else if((s=g(r)*e)+d>v)throw H(St);a=s/e}else a=m(i),o=new K(s=a*e);for(f(t,"_d",{b:o,o:d,l:s,e:a,v:new J(o)});u<a;)O(t,u++)})),M=p.prototype=S(Ut),f(M,"constructor",p)):o((function(){p(1)}))&&o((function(){new p(-1)}))&&F((function(t){new p,new p(null),new p(1.5),new p(t)}),!0)||(p=i((function(t,i,n,r){var o;return h(t,p,l),_(i)?i instanceof K||(o=y(i))==Y||o==G?void 0!==r?new v(i,Et(n,e),r):void 0!==n?new v(i,Et(n,e)):new v(i):wt in i?Tt(p,i):Rt.call(p,i):new v(m(i))})),Z(x!==Function.prototype?P(v).concat(P(x)):P(v),(function(t){t in p||f(p,t,v[t])})),p.prototype=M,n||(M.constructor=p));var E=M[vt],A=!!E&&("values"==E.name||null==E.name),D=Bt.values;f(p,bt,!0),f(M,wt,l),f(M,Mt,!0),f(M,yt,p),(c?new p(1)[xt]==l:xt in M)||B(M,xt,{get:function(){return l}}),w[l]=p,s(s.G+s.W+s.F*(p!=v),w),s(s.S,l,{BYTES_PER_ELEMENT:e}),s(s.S+s.F*o((function(){v.of.call(p,1)})),l,{from:Rt,of:Ft}),X in M||f(M,X,e),s(s.P,l,Nt),I(l),s(s.P+s.F*Ot,l,{set:Vt}),s(s.P+s.F*!A,l,Bt),n||M.toString==gt||(M.toString=gt),s(s.P+s.F*o((function(){new p(1).slice()})),l,{slice:zt}),s(s.P+s.F*(o((function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()}))||!o((function(){M.toLocaleString.call([1,2])}))),l,{toLocaleString:jt}),R[l]=A?E:D,n||A||f(M,vt,D)}}else t.exports=function(){}},1125:(t,e,i)=>{"use strict";var n=i(3816),r=i(7057),o=i(4461),s=i(9383),a=i(7728),c=i(4408),l=i(4253),h=i(3328),u=i(1467),f=i(875),d=i(4843),p=i(616).f,g=i(9275).f,m=i(6852),v=i(2943),x="ArrayBuffer",b="DataView",y="Wrong index!",_=n.ArrayBuffer,w=n.DataView,M=n.Math,S=n.RangeError,k=n.Infinity,P=_,O=M.abs,E=M.pow,A=M.floor,D=M.log,L=M.LN2,T="buffer",C="byteLength",R="byteOffset",F=r?"_b":T,I=r?"_l":C,j=r?"_o":R;function N(t,e,i){var n,r,o,s=new Array(i),a=8*i-e-1,c=(1<<a)-1,l=c>>1,h=23===e?E(2,-24)-E(2,-77):0,u=0,f=t<0||0===t&&1/t<0?1:0;for((t=O(t))!=t||t===k?(r=t!=t?1:0,n=c):(n=A(D(t)/L),t*(o=E(2,-n))<1&&(n--,o*=2),(t+=n+l>=1?h/o:h*E(2,1-l))*o>=2&&(n++,o/=2),n+l>=c?(r=0,n=c):n+l>=1?(r=(t*o-1)*E(2,e),n+=l):(r=t*E(2,l-1)*E(2,e),n=0));e>=8;s[u++]=255&r,r/=256,e-=8);for(n=n<<e|r,a+=e;a>0;s[u++]=255&n,n/=256,a-=8);return s[--u]|=128*f,s}function z(t,e,i){var n,r=8*i-e-1,o=(1<<r)-1,s=o>>1,a=r-7,c=i-1,l=t[c--],h=127&l;for(l>>=7;a>0;h=256*h+t[c],c--,a-=8);for(n=h&(1<<-a)-1,h>>=-a,a+=e;a>0;n=256*n+t[c],c--,a-=8);if(0===h)h=1-s;else{if(h===o)return n?NaN:l?-k:k;n+=E(2,e),h-=s}return(l?-1:1)*n*E(2,h-e)}function V(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function B(t){return[255&t]}function W(t){return[255&t,t>>8&255]}function H(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function $(t){return N(t,52,8)}function U(t){return N(t,23,4)}function Y(t,e,i){g(t.prototype,e,{get:function(){return this[i]}})}function G(t,e,i,n){var r=d(+i);if(r+e>t[I])throw S(y);var o=t[F]._b,s=r+t[j],a=o.slice(s,s+e);return n?a:a.reverse()}function X(t,e,i,n,r,o){var s=d(+i);if(s+e>t[I])throw S(y);for(var a=t[F]._b,c=s+t[j],l=n(+r),h=0;h<e;h++)a[c+h]=l[o?h:e-h-1]}if(s.ABV){if(!l((function(){_(1)}))||!l((function(){new _(-1)}))||l((function(){return new _,new _(1.5),new _(NaN),_.name!=x}))){for(var q,K=(_=function(t){return h(this,_),new P(d(t))}).prototype=P.prototype,J=p(P),Z=0;J.length>Z;)(q=J[Z++])in _||a(_,q,P[q]);o||(K.constructor=_)}var Q=new w(new _(2)),tt=w.prototype.setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||c(w.prototype,{setInt8:function(t,e){tt.call(this,t,e<<24>>24)},setUint8:function(t,e){tt.call(this,t,e<<24>>24)}},!0)}else _=function(t){h(this,_,x);var e=d(t);this._b=m.call(new Array(e),0),this[I]=e},w=function(t,e,i){h(this,w,b),h(t,_,b);var n=t[I],r=u(e);if(r<0||r>n)throw S("Wrong offset!");if(r+(i=void 0===i?n-r:f(i))>n)throw S("Wrong length!");this[F]=t,this[j]=r,this[I]=i},r&&(Y(_,C,"_l"),Y(w,T,"_b"),Y(w,C,"_l"),Y(w,R,"_o")),c(w.prototype,{getInt8:function(t){return G(this,1,t)[0]<<24>>24},getUint8:function(t){return G(this,1,t)[0]},getInt16:function(t){var e=G(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=G(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return V(G(this,4,t,arguments[1]))},getUint32:function(t){return V(G(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return z(G(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return z(G(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){X(this,1,t,B,e)},setUint8:function(t,e){X(this,1,t,B,e)},setInt16:function(t,e){X(this,2,t,W,e,arguments[2])},setUint16:function(t,e){X(this,2,t,W,e,arguments[2])},setInt32:function(t,e){X(this,4,t,H,e,arguments[2])},setUint32:function(t,e){X(this,4,t,H,e,arguments[2])},setFloat32:function(t,e){X(this,4,t,U,e,arguments[2])},setFloat64:function(t,e){X(this,8,t,$,e,arguments[2])}});v(_,x),v(w,b),a(w.prototype,s.VIEW,!0),e.ArrayBuffer=_,e.DataView=w},9383:(t,e,i)=>{for(var n,r=i(3816),o=i(7728),s=i(3953),a=s("typed_array"),c=s("view"),l=!(!r.ArrayBuffer||!r.DataView),h=l,u=0,f="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");u<9;)(n=r[f[u++]])?(o(n.prototype,a,!0),o(n.prototype,c,!0)):h=!1;t.exports={ABV:l,CONSTR:h,TYPED:a,VIEW:c}},3953:t=>{var e=0,i=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+i).toString(36))}},575:(t,e,i)=>{var n=i(3816).navigator;t.exports=n&&n.userAgent||""},1616:(t,e,i)=>{var n=i(5286);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},6074:(t,e,i)=>{var n=i(3816),r=i(5645),o=i(4461),s=i(8787),a=i(9275).f;t.exports=function(t){var e=r.Symbol||(r.Symbol=o?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:s.f(t)})}},8787:(t,e,i)=>{e.f=i(6314)},6314:(t,e,i)=>{var n=i(3825)("wks"),r=i(3953),o=i(3816).Symbol,s="function"==typeof o;(t.exports=function(t){return n[t]||(n[t]=s&&o[t]||(s?o:r)("Symbol."+t))}).store=n},9002:(t,e,i)=>{var n=i(1488),r=i(6314)("iterator"),o=i(2803);t.exports=i(5645).getIteratorMethod=function(t){if(null!=t)return t[r]||t["@@iterator"]||o[n(t)]}},1761:(t,e,i)=>{var n=i(2985),r=i(5496)(/[\\^$*+?.()|[\]{}]/g,"\\$&");n(n.S,"RegExp",{escape:function(t){return r(t)}})},2e3:(t,e,i)=>{var n=i(2985);n(n.P,"Array",{copyWithin:i(5216)}),i(7722)("copyWithin")},5745:(t,e,i)=>{"use strict";var n=i(2985),r=i(50)(4);n(n.P+n.F*!i(7717)([].every,!0),"Array",{every:function(t){return r(this,t,arguments[1])}})},8977:(t,e,i)=>{var n=i(2985);n(n.P,"Array",{fill:i(6852)}),i(7722)("fill")},8837:(t,e,i)=>{"use strict";var n=i(2985),r=i(50)(2);n(n.P+n.F*!i(7717)([].filter,!0),"Array",{filter:function(t){return r(this,t,arguments[1])}})},4899:(t,e,i)=>{"use strict";var n=i(2985),r=i(50)(6),o="findIndex",s=!0;o in[]&&Array(1)[o]((function(){s=!1})),n(n.P+n.F*s,"Array",{findIndex:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(7722)(o)},2310:(t,e,i)=>{"use strict";var n=i(2985),r=i(50)(5),o="find",s=!0;o in[]&&Array(1).find((function(){s=!1})),n(n.P+n.F*s,"Array",{find:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(7722)(o)},4336:(t,e,i)=>{"use strict";var n=i(2985),r=i(50)(0),o=i(7717)([].forEach,!0);n(n.P+n.F*!o,"Array",{forEach:function(t){return r(this,t,arguments[1])}})},522:(t,e,i)=>{"use strict";var n=i(741),r=i(2985),o=i(508),s=i(8851),a=i(6555),c=i(875),l=i(2811),h=i(9002);r(r.S+r.F*!i(7462)((function(t){Array.from(t)})),"Array",{from:function(t){var e,i,r,u,f=o(t),d="function"==typeof this?this:Array,p=arguments.length,g=p>1?arguments[1]:void 0,m=void 0!==g,v=0,x=h(f);if(m&&(g=n(g,p>2?arguments[2]:void 0,2)),null==x||d==Array&&a(x))for(i=new d(e=c(f.length));e>v;v++)l(i,v,m?g(f[v],v):f[v]);else for(u=x.call(f),i=new d;!(r=u.next()).done;v++)l(i,v,m?s(u,g,[r.value,v],!0):r.value);return i.length=v,i}})},3369:(t,e,i)=>{"use strict";var n=i(2985),r=i(9315)(!1),o=[].indexOf,s=!!o&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(s||!i(7717)(o)),"Array",{indexOf:function(t){return s?o.apply(this,arguments)||0:r(this,t,arguments[1])}})},774:(t,e,i)=>{var n=i(2985);n(n.S,"Array",{isArray:i(4302)})},6997:(t,e,i)=>{"use strict";var n=i(7722),r=i(5436),o=i(2803),s=i(2110);t.exports=i(2923)(Array,"Array",(function(t,e){this._t=s(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,i=this._i++;return!t||i>=t.length?(this._t=void 0,r(1)):r(0,"keys"==e?i:"values"==e?t[i]:[i,t[i]])}),"values"),o.Arguments=o.Array,n("keys"),n("values"),n("entries")},7842:(t,e,i)=>{"use strict";var n=i(2985),r=i(2110),o=[].join;n(n.P+n.F*(i(9797)!=Object||!i(7717)(o)),"Array",{join:function(t){return o.call(r(this),void 0===t?",":t)}})},9564:(t,e,i)=>{"use strict";var n=i(2985),r=i(2110),o=i(1467),s=i(875),a=[].lastIndexOf,c=!!a&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(c||!i(7717)(a)),"Array",{lastIndexOf:function(t){if(c)return a.apply(this,arguments)||0;var e=r(this),i=s(e.length),n=i-1;for(arguments.length>1&&(n=Math.min(n,o(arguments[1]))),n<0&&(n=i+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},1802:(t,e,i)=>{"use strict";var n=i(2985),r=i(50)(1);n(n.P+n.F*!i(7717)([].map,!0),"Array",{map:function(t){return r(this,t,arguments[1])}})},8295:(t,e,i)=>{"use strict";var n=i(2985),r=i(2811);n(n.S+n.F*i(4253)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,e=arguments.length,i=new("function"==typeof this?this:Array)(e);e>t;)r(i,t,arguments[t++]);return i.length=e,i}})},3750:(t,e,i)=>{"use strict";var n=i(2985),r=i(7628);n(n.P+n.F*!i(7717)([].reduceRight,!0),"Array",{reduceRight:function(t){return r(this,t,arguments.length,arguments[1],!0)}})},3057:(t,e,i)=>{"use strict";var n=i(2985),r=i(7628);n(n.P+n.F*!i(7717)([].reduce,!0),"Array",{reduce:function(t){return r(this,t,arguments.length,arguments[1],!1)}})},110:(t,e,i)=>{"use strict";var n=i(2985),r=i(639),o=i(2032),s=i(2337),a=i(875),c=[].slice;n(n.P+n.F*i(4253)((function(){r&&c.call(r)})),"Array",{slice:function(t,e){var i=a(this.length),n=o(this);if(e=void 0===e?i:e,"Array"==n)return c.call(this,t,e);for(var r=s(t,i),l=s(e,i),h=a(l-r),u=new Array(h),f=0;f<h;f++)u[f]="String"==n?this.charAt(r+f):this[r+f];return u}})},6773:(t,e,i)=>{"use strict";var n=i(2985),r=i(50)(3);n(n.P+n.F*!i(7717)([].some,!0),"Array",{some:function(t){return r(this,t,arguments[1])}})},75:(t,e,i)=>{"use strict";var n=i(2985),r=i(4963),o=i(508),s=i(4253),a=[].sort,c=[1,2,3];n(n.P+n.F*(s((function(){c.sort(void 0)}))||!s((function(){c.sort(null)}))||!i(7717)(a)),"Array",{sort:function(t){return void 0===t?a.call(o(this)):a.call(o(this),r(t))}})},1842:(t,e,i)=>{i(2974)("Array")},1822:(t,e,i)=>{var n=i(2985);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},1031:(t,e,i)=>{var n=i(2985),r=i(3537);n(n.P+n.F*(Date.prototype.toISOString!==r),"Date",{toISOString:r})},9977:(t,e,i)=>{"use strict";var n=i(2985),r=i(508),o=i(1689);n(n.P+n.F*i(4253)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var e=r(this),i=o(e);return"number"!=typeof i||isFinite(i)?e.toISOString():null}})},1560:(t,e,i)=>{var n=i(6314)("toPrimitive"),r=Date.prototype;n in r||i(7728)(r,n,i(870))},6331:(t,e,i)=>{var n=Date.prototype,r="Invalid Date",o=n.toString,s=n.getTime;new Date(NaN)+""!=r&&i(7234)(n,"toString",(function(){var t=s.call(this);return t==t?o.call(this):r}))},9730:(t,e,i)=>{var n=i(2985);n(n.P,"Function",{bind:i(4398)})},8377:(t,e,i)=>{"use strict";var n=i(5286),r=i(468),o=i(6314)("hasInstance"),s=Function.prototype;o in s||i(9275).f(s,o,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=r(t);)if(this.prototype===t)return!0;return!1}})},6059:(t,e,i)=>{var n=i(9275).f,r=Function.prototype,o=/^\s*function ([^ (]*)/,s="name";s in r||i(7057)&&n(r,s,{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},8416:(t,e,i)=>{"use strict";var n=i(9824),r=i(1616),o="Map";t.exports=i(5795)(o,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var e=n.getEntry(r(this,o),t);return e&&e.v},set:function(t,e){return n.def(r(this,o),0===t?0:t,e)}},n,!0)},6503:(t,e,i)=>{var n=i(2985),r=i(6206),o=Math.sqrt,s=Math.acosh;n(n.S+n.F*!(s&&710==Math.floor(s(Number.MAX_VALUE))&&s(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:r(t-1+o(t-1)*o(t+1))}})},6786:(t,e,i)=>{var n=i(2985),r=Math.asinh;n(n.S+n.F*!(r&&1/r(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},932:(t,e,i)=>{var n=i(2985),r=Math.atanh;n(n.S+n.F*!(r&&1/r(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},7526:(t,e,i)=>{var n=i(2985),r=i(1801);n(n.S,"Math",{cbrt:function(t){return r(t=+t)*Math.pow(Math.abs(t),1/3)}})},1591:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},9073:(t,e,i)=>{var n=i(2985),r=Math.exp;n(n.S,"Math",{cosh:function(t){return(r(t=+t)+r(-t))/2}})},347:(t,e,i)=>{var n=i(2985),r=i(3086);n(n.S+n.F*(r!=Math.expm1),"Math",{expm1:r})},579:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{fround:i(4934)})},4669:(t,e,i)=>{var n=i(2985),r=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var i,n,o=0,s=0,a=arguments.length,c=0;s<a;)c<(i=r(arguments[s++]))?(o=o*(n=c/i)*n+1,c=i):o+=i>0?(n=i/c)*n:i;return c===1/0?1/0:c*Math.sqrt(o)}})},7710:(t,e,i)=>{var n=i(2985),r=Math.imul;n(n.S+n.F*i(4253)((function(){return-5!=r(4294967295,5)||2!=r.length})),"Math",{imul:function(t,e){var i=65535,n=+t,r=+e,o=i&n,s=i&r;return 0|o*s+((i&n>>>16)*s+o*(i&r>>>16)<<16>>>0)}})},5789:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},3514:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{log1p:i(6206)})},9978:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},8472:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{sign:i(1801)})},6946:(t,e,i)=>{var n=i(2985),r=i(3086),o=Math.exp;n(n.S+n.F*i(4253)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(r(t)-r(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},5068:(t,e,i)=>{var n=i(2985),r=i(3086),o=Math.exp;n(n.S,"Math",{tanh:function(t){var e=r(t=+t),i=r(-t);return e==1/0?1:i==1/0?-1:(e-i)/(o(t)+o(-t))}})},413:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},1246:(t,e,i)=>{"use strict";var n=i(3816),r=i(9181),o=i(2032),s=i(266),a=i(1689),c=i(4253),l=i(616).f,h=i(8693).f,u=i(9275).f,f=i(9599).trim,d="Number",p=n.Number,g=p,m=p.prototype,v=o(i(2503)(m))==d,x="trim"in String.prototype,b=function(t){var e=a(t,!1);if("string"==typeof e&&e.length>2){var i,n,r,o=(e=x?e.trim():f(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(i=e.charCodeAt(2))||120===i)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:n=2,r=49;break;case 79:case 111:n=8,r=55;break;default:return+e}for(var s,c=e.slice(2),l=0,h=c.length;l<h;l++)if((s=c.charCodeAt(l))<48||s>r)return NaN;return parseInt(c,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,i=this;return i instanceof p&&(v?c((function(){m.valueOf.call(i)})):o(i)!=d)?s(new g(b(e)),i,p):b(e)};for(var y,_=i(7057)?l(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;_.length>w;w++)r(g,y=_[w])&&!r(p,y)&&u(p,y,h(g,y));p.prototype=m,m.constructor=p,i(7234)(n,d,p)}},5972:(t,e,i)=>{var n=i(2985);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},3403:(t,e,i)=>{var n=i(2985),r=i(3816).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&r(t)}})},2516:(t,e,i)=>{var n=i(2985);n(n.S,"Number",{isInteger:i(8367)})},9371:(t,e,i)=>{var n=i(2985);n(n.S,"Number",{isNaN:function(t){return t!=t}})},6479:(t,e,i)=>{var n=i(2985),r=i(8367),o=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return r(t)&&o(t)<=9007199254740991}})},1736:(t,e,i)=>{var n=i(2985);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},1889:(t,e,i)=>{var n=i(2985);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},5177:(t,e,i)=>{var n=i(2985),r=i(7743);n(n.S+n.F*(Number.parseFloat!=r),"Number",{parseFloat:r})},6943:(t,e,i)=>{var n=i(2985),r=i(5960);n(n.S+n.F*(Number.parseInt!=r),"Number",{parseInt:r})},726:(t,e,i)=>{"use strict";var n=i(2985),r=i(1467),o=i(3365),s=i(8595),a=1..toFixed,c=Math.floor,l=[0,0,0,0,0,0],h="Number.toFixed: incorrect invocation!",u="0",f=function(t,e){for(var i=-1,n=e;++i<6;)n+=t*l[i],l[i]=n%1e7,n=c(n/1e7)},d=function(t){for(var e=6,i=0;--e>=0;)i+=l[e],l[e]=c(i/t),i=i%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==l[t]){var i=String(l[t]);e=""===e?i:e+s.call(u,7-i.length)+i}return e},g=function(t,e,i){return 0===e?i:e%2==1?g(t,e-1,i*t):g(t*t,e/2,i)};n(n.P+n.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!i(4253)((function(){a.call({})}))),"Number",{toFixed:function(t){var e,i,n,a,c=o(this,h),l=r(t),m="",v=u;if(l<0||l>20)throw RangeError(h);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(m="-",c=-c),c>1e-21)if(e=function(t){for(var e=0,i=t;i>=4096;)e+=12,i/=4096;for(;i>=2;)e+=1,i/=2;return e}(c*g(2,69,1))-69,i=e<0?c*g(2,-e,1):c/g(2,e,1),i*=4503599627370496,(e=52-e)>0){for(f(0,i),n=l;n>=7;)f(1e7,0),n-=7;for(f(g(10,n,1),0),n=e-1;n>=23;)d(1<<23),n-=23;d(1<<n),f(1,1),d(2),v=p()}else f(0,i),f(1<<-e,0),v=p()+s.call(u,l);return l>0?m+((a=v.length)<=l?"0."+s.call(u,l-a)+v:v.slice(0,a-l)+"."+v.slice(a-l)):m+v}})},1901:(t,e,i)=>{"use strict";var n=i(2985),r=i(4253),o=i(3365),s=1..toPrecision;n(n.P+n.F*(r((function(){return"1"!==s.call(1,void 0)}))||!r((function(){s.call({})}))),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?s.call(e):s.call(e,t)}})},5115:(t,e,i)=>{var n=i(2985);n(n.S+n.F,"Object",{assign:i(5345)})},8132:(t,e,i)=>{var n=i(2985);n(n.S,"Object",{create:i(2503)})},7470:(t,e,i)=>{var n=i(2985);n(n.S+n.F*!i(7057),"Object",{defineProperties:i(5588)})},8388:(t,e,i)=>{var n=i(2985);n(n.S+n.F*!i(7057),"Object",{defineProperty:i(9275).f})},9375:(t,e,i)=>{var n=i(5286),r=i(4728).onFreeze;i(3160)("freeze",(function(t){return function(e){return t&&n(e)?t(r(e)):e}}))},4882:(t,e,i)=>{var n=i(2110),r=i(8693).f;i(3160)("getOwnPropertyDescriptor",(function(){return function(t,e){return r(n(t),e)}}))},9622:(t,e,i)=>{i(3160)("getOwnPropertyNames",(function(){return i(9327).f}))},1520:(t,e,i)=>{var n=i(508),r=i(468);i(3160)("getPrototypeOf",(function(){return function(t){return r(n(t))}}))},9892:(t,e,i)=>{var n=i(5286);i(3160)("isExtensible",(function(t){return function(e){return!!n(e)&&(!t||t(e))}}))},4157:(t,e,i)=>{var n=i(5286);i(3160)("isFrozen",(function(t){return function(e){return!n(e)||!!t&&t(e)}}))},5095:(t,e,i)=>{var n=i(5286);i(3160)("isSealed",(function(t){return function(e){return!n(e)||!!t&&t(e)}}))},9176:(t,e,i)=>{var n=i(2985);n(n.S,"Object",{is:i(7195)})},7476:(t,e,i)=>{var n=i(508),r=i(7184);i(3160)("keys",(function(){return function(t){return r(n(t))}}))},4672:(t,e,i)=>{var n=i(5286),r=i(4728).onFreeze;i(3160)("preventExtensions",(function(t){return function(e){return t&&n(e)?t(r(e)):e}}))},3533:(t,e,i)=>{var n=i(5286),r=i(4728).onFreeze;i(3160)("seal",(function(t){return function(e){return t&&n(e)?t(r(e)):e}}))},8838:(t,e,i)=>{var n=i(2985);n(n.S,"Object",{setPrototypeOf:i(7375).set})},6253:(t,e,i)=>{"use strict";var n=i(1488),r={};r[i(6314)("toStringTag")]="z",r+""!="[object z]"&&i(7234)(Object.prototype,"toString",(function(){return"[object "+n(this)+"]"}),!0)},4299:(t,e,i)=>{var n=i(2985),r=i(7743);n(n.G+n.F*(parseFloat!=r),{parseFloat:r})},1084:(t,e,i)=>{var n=i(2985),r=i(5960);n(n.G+n.F*(parseInt!=r),{parseInt:r})},851:(t,e,i)=>{"use strict";var n,r,o,s,a=i(4461),c=i(3816),l=i(741),h=i(1488),u=i(2985),f=i(5286),d=i(4963),p=i(3328),g=i(3531),m=i(8364),v=i(4193).set,x=i(4351)(),b=i(3499),y=i(188),_=i(575),w=i(94),M="Promise",S=c.TypeError,k=c.process,P=k&&k.versions,O=P&&P.v8||"",E=c.Promise,A="process"==h(k),D=function(){},L=r=b.f,T=!!function(){try{var t=E.resolve(1),e=(t.constructor={})[i(6314)("species")]=function(t){t(D,D)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(D)instanceof e&&0!==O.indexOf("6.6")&&-1===_.indexOf("Chrome/66")}catch(t){}}(),C=function(t){var e;return!(!f(t)||"function"!=typeof(e=t.then))&&e},R=function(t,e){if(!t._n){t._n=!0;var i=t._c;x((function(){for(var n=t._v,r=1==t._s,o=0,s=function(e){var i,o,s,a=r?e.ok:e.fail,c=e.resolve,l=e.reject,h=e.domain;try{a?(r||(2==t._h&&j(t),t._h=1),!0===a?i=n:(h&&h.enter(),i=a(n),h&&(h.exit(),s=!0)),i===e.promise?l(S("Promise-chain cycle")):(o=C(i))?o.call(i,c,l):c(i)):l(n)}catch(t){h&&!s&&h.exit(),l(t)}};i.length>o;)s(i[o++]);t._c=[],t._n=!1,e&&!t._h&&F(t)}))}},F=function(t){v.call(c,(function(){var e,i,n,r=t._v,o=I(t);if(o&&(e=y((function(){A?k.emit("unhandledRejection",r,t):(i=c.onunhandledrejection)?i({promise:t,reason:r}):(n=c.console)&&n.error&&n.error("Unhandled promise rejection",r)})),t._h=A||I(t)?2:1),t._a=void 0,o&&e.e)throw e.v}))},I=function(t){return 1!==t._h&&0===(t._a||t._c).length},j=function(t){v.call(c,(function(){var e;A?k.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})}))},N=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),R(e,!0))},z=function(t){var e,i=this;if(!i._d){i._d=!0,i=i._w||i;try{if(i===t)throw S("Promise can't be resolved itself");(e=C(t))?x((function(){var n={_w:i,_d:!1};try{e.call(t,l(z,n,1),l(N,n,1))}catch(t){N.call(n,t)}})):(i._v=t,i._s=1,R(i,!1))}catch(t){N.call({_w:i,_d:!1},t)}}};T||(E=function(t){p(this,E,M,"_h"),d(t),n.call(this);try{t(l(z,this,1),l(N,this,1))}catch(t){N.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=i(4408)(E.prototype,{then:function(t,e){var i=L(m(this,E));return i.ok="function"!=typeof t||t,i.fail="function"==typeof e&&e,i.domain=A?k.domain:void 0,this._c.push(i),this._a&&this._a.push(i),this._s&&R(this,!1),i.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n;this.promise=t,this.resolve=l(z,t,1),this.reject=l(N,t,1)},b.f=L=function(t){return t===E||t===s?new o(t):r(t)}),u(u.G+u.W+u.F*!T,{Promise:E}),i(2943)(E,M),i(2974)(M),s=i(5645).Promise,u(u.S+u.F*!T,M,{reject:function(t){var e=L(this);return(0,e.reject)(t),e.promise}}),u(u.S+u.F*(a||!T),M,{resolve:function(t){return w(a&&this===s?E:this,t)}}),u(u.S+u.F*!(T&&i(7462)((function(t){E.all(t).catch(D)}))),M,{all:function(t){var e=this,i=L(e),n=i.resolve,r=i.reject,o=y((function(){var i=[],o=0,s=1;g(t,!1,(function(t){var a=o++,c=!1;i.push(void 0),s++,e.resolve(t).then((function(t){c||(c=!0,i[a]=t,--s||n(i))}),r)})),--s||n(i)}));return o.e&&r(o.v),i.promise},race:function(t){var e=this,i=L(e),n=i.reject,r=y((function(){g(t,!1,(function(t){e.resolve(t).then(i.resolve,n)}))}));return r.e&&n(r.v),i.promise}})},1572:(t,e,i)=>{var n=i(2985),r=i(4963),o=i(7007),s=(i(3816).Reflect||{}).apply,a=Function.apply;n(n.S+n.F*!i(4253)((function(){s((function(){}))})),"Reflect",{apply:function(t,e,i){var n=r(t),c=o(i);return s?s(n,e,c):a.call(n,e,c)}})},2139:(t,e,i)=>{var n=i(2985),r=i(2503),o=i(4963),s=i(7007),a=i(5286),c=i(4253),l=i(4398),h=(i(3816).Reflect||{}).construct,u=c((function(){function t(){}return!(h((function(){}),[],t)instanceof t)})),f=!c((function(){h((function(){}))}));n(n.S+n.F*(u||f),"Reflect",{construct:function(t,e){o(t),s(e);var i=arguments.length<3?t:o(arguments[2]);if(f&&!u)return h(t,e,i);if(t==i){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(l.apply(t,n))}var c=i.prototype,d=r(a(c)?c:Object.prototype),p=Function.apply.call(t,d,e);return a(p)?p:d}})},685:(t,e,i)=>{var n=i(9275),r=i(2985),o=i(7007),s=i(1689);r(r.S+r.F*i(4253)((function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,e,i){o(t),e=s(e,!0),o(i);try{return n.f(t,e,i),!0}catch(t){return!1}}})},5535:(t,e,i)=>{var n=i(2985),r=i(8693).f,o=i(7007);n(n.S,"Reflect",{deleteProperty:function(t,e){var i=r(o(t),e);return!(i&&!i.configurable)&&delete t[e]}})},7347:(t,e,i)=>{"use strict";var n=i(2985),r=i(7007),o=function(t){this._t=r(t),this._i=0;var e,i=this._k=[];for(e in t)i.push(e)};i(9988)(o,"Object",(function(){var t,e=this,i=e._k;do{if(e._i>=i.length)return{value:void 0,done:!0}}while(!((t=i[e._i++])in e._t));return{value:t,done:!1}})),n(n.S,"Reflect",{enumerate:function(t){return new o(t)}})},6633:(t,e,i)=>{var n=i(8693),r=i(2985),o=i(7007);r(r.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(o(t),e)}})},8989:(t,e,i)=>{var n=i(2985),r=i(468),o=i(7007);n(n.S,"Reflect",{getPrototypeOf:function(t){return r(o(t))}})},3049:(t,e,i)=>{var n=i(8693),r=i(468),o=i(9181),s=i(2985),a=i(5286),c=i(7007);s(s.S,"Reflect",{get:function t(e,i){var s,l,h=arguments.length<3?e:arguments[2];return c(e)===h?e[i]:(s=n.f(e,i))?o(s,"value")?s.value:void 0!==s.get?s.get.call(h):void 0:a(l=r(e))?t(l,i,h):void 0}})},8270:(t,e,i)=>{var n=i(2985);n(n.S,"Reflect",{has:function(t,e){return e in t}})},4510:(t,e,i)=>{var n=i(2985),r=i(7007),o=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return r(t),!o||o(t)}})},3984:(t,e,i)=>{var n=i(2985);n(n.S,"Reflect",{ownKeys:i(7643)})},5769:(t,e,i)=>{var n=i(2985),r=i(7007),o=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){r(t);try{return o&&o(t),!0}catch(t){return!1}}})},6014:(t,e,i)=>{var n=i(2985),r=i(7375);r&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){r.check(t,e);try{return r.set(t,e),!0}catch(t){return!1}}})},55:(t,e,i)=>{var n=i(9275),r=i(8693),o=i(468),s=i(9181),a=i(2985),c=i(681),l=i(7007),h=i(5286);a(a.S,"Reflect",{set:function t(e,i,a){var u,f,d=arguments.length<4?e:arguments[3],p=r.f(l(e),i);if(!p){if(h(f=o(e)))return t(f,i,a,d);p=c(0)}if(s(p,"value")){if(!1===p.writable||!h(d))return!1;if(u=r.f(d,i)){if(u.get||u.set||!1===u.writable)return!1;u.value=a,n.f(d,i,u)}else n.f(d,i,c(0,a));return!0}return void 0!==p.set&&(p.set.call(d,a),!0)}})},3946:(t,e,i)=>{var n=i(3816),r=i(266),o=i(9275).f,s=i(616).f,a=i(5364),c=i(3218),l=n.RegExp,h=l,u=l.prototype,f=/a/g,d=/a/g,p=new l(f)!==f;if(i(7057)&&(!p||i(4253)((function(){return d[i(6314)("match")]=!1,l(f)!=f||l(d)==d||"/a/i"!=l(f,"i")})))){l=function(t,e){var i=this instanceof l,n=a(t),o=void 0===e;return!i&&n&&t.constructor===l&&o?t:r(p?new h(n&&!o?t.source:t,e):h((n=t instanceof l)?t.source:t,n&&o?c.call(t):e),i?this:u,l)};for(var g=function(t){t in l||o(l,t,{configurable:!0,get:function(){return h[t]},set:function(e){h[t]=e}})},m=s(h),v=0;m.length>v;)g(m[v++]);u.constructor=l,l.prototype=u,i(7234)(n,"RegExp",l)}i(2974)("RegExp")},8269:(t,e,i)=>{"use strict";var n=i(1165);i(2985)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},6774:(t,e,i)=>{i(7057)&&"g"!=/./g.flags&&i(9275).f(RegExp.prototype,"flags",{configurable:!0,get:i(3218)})},1466:(t,e,i)=>{"use strict";var n=i(7007),r=i(875),o=i(6793),s=i(7787);i(8082)("match",1,(function(t,e,i,a){return[function(i){var n=t(this),r=null==i?void 0:i[e];return void 0!==r?r.call(i,n):new RegExp(i)[e](String(n))},function(t){var e=a(i,t,this);if(e.done)return e.value;var c=n(t),l=String(this);if(!c.global)return s(c,l);var h=c.unicode;c.lastIndex=0;for(var u,f=[],d=0;null!==(u=s(c,l));){var p=String(u[0]);f[d]=p,""===p&&(c.lastIndex=o(l,r(c.lastIndex),h)),d++}return 0===d?null:f}]}))},9357:(t,e,i)=>{"use strict";var n=i(7007),r=i(508),o=i(875),s=i(1467),a=i(6793),c=i(7787),l=Math.max,h=Math.min,u=Math.floor,f=/\$([$&`']|\d\d?|<[^>]*>)/g,d=/\$([$&`']|\d\d?)/g;i(8082)("replace",2,(function(t,e,i,p){return[function(n,r){var o=t(this),s=null==n?void 0:n[e];return void 0!==s?s.call(n,o,r):i.call(String(o),n,r)},function(t,e){var r=p(i,t,this,e);if(r.done)return r.value;var u=n(t),f=String(this),d="function"==typeof e;d||(e=String(e));var m=u.global;if(m){var v=u.unicode;u.lastIndex=0}for(var x=[];;){var b=c(u,f);if(null===b)break;if(x.push(b),!m)break;""===String(b[0])&&(u.lastIndex=a(f,o(u.lastIndex),v))}for(var y,_="",w=0,M=0;M<x.length;M++){b=x[M];for(var S=String(b[0]),k=l(h(s(b.index),f.length),0),P=[],O=1;O<b.length;O++)P.push(void 0===(y=b[O])?y:String(y));var E=b.groups;if(d){var A=[S].concat(P,k,f);void 0!==E&&A.push(E);var D=String(e.apply(void 0,A))}else D=g(S,f,k,P,E,e);k>=w&&(_+=f.slice(w,k)+D,w=k+S.length)}return _+f.slice(w)}];function g(t,e,n,o,s,a){var c=n+t.length,l=o.length,h=d;return void 0!==s&&(s=r(s),h=f),i.call(a,h,(function(i,r){var a;switch(r.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(c);case"<":a=s[r.slice(1,-1)];break;default:var h=+r;if(0===h)return i;if(h>l){var f=u(h/10);return 0===f?i:f<=l?void 0===o[f-1]?r.charAt(1):o[f-1]+r.charAt(1):i}a=o[h-1]}return void 0===a?"":a}))}}))},6142:(t,e,i)=>{"use strict";var n=i(7007),r=i(7195),o=i(7787);i(8082)("search",1,(function(t,e,i,s){return[function(i){var n=t(this),r=null==i?void 0:i[e];return void 0!==r?r.call(i,n):new RegExp(i)[e](String(n))},function(t){var e=s(i,t,this);if(e.done)return e.value;var a=n(t),c=String(this),l=a.lastIndex;r(l,0)||(a.lastIndex=0);var h=o(a,c);return r(a.lastIndex,l)||(a.lastIndex=l),null===h?-1:h.index}]}))},1876:(t,e,i)=>{"use strict";var n=i(5364),r=i(7007),o=i(8364),s=i(6793),a=i(875),c=i(7787),l=i(1165),h=i(4253),u=Math.min,f=[].push,d=4294967295,p=!h((function(){RegExp(d,"y")}));i(8082)("split",2,(function(t,e,i,h){var g;return g="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var r=String(this);if(void 0===t&&0===e)return[];if(!n(t))return i.call(r,t,e);for(var o,s,a,c=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),u=0,p=void 0===e?d:e>>>0,g=new RegExp(t.source,h+"g");(o=l.call(g,r))&&!((s=g.lastIndex)>u&&(c.push(r.slice(u,o.index)),o.length>1&&o.index<r.length&&f.apply(c,o.slice(1)),a=o[0].length,u=s,c.length>=p));)g.lastIndex===o.index&&g.lastIndex++;return u===r.length?!a&&g.test("")||c.push(""):c.push(r.slice(u)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:i.call(this,t,e)}:i,[function(i,n){var r=t(this),o=null==i?void 0:i[e];return void 0!==o?o.call(i,r,n):g.call(String(r),i,n)},function(t,e){var n=h(g,t,this,e,g!==i);if(n.done)return n.value;var l=r(t),f=String(this),m=o(l,RegExp),v=l.unicode,x=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(p?"y":"g"),b=new m(p?l:"^(?:"+l.source+")",x),y=void 0===e?d:e>>>0;if(0===y)return[];if(0===f.length)return null===c(b,f)?[f]:[];for(var _=0,w=0,M=[];w<f.length;){b.lastIndex=p?w:0;var S,k=c(b,p?f:f.slice(w));if(null===k||(S=u(a(b.lastIndex+(p?0:w)),f.length))===_)w=s(f,w,v);else{if(M.push(f.slice(_,w)),M.length===y)return M;for(var P=1;P<=k.length-1;P++)if(M.push(k[P]),M.length===y)return M;w=_=S}}return M.push(f.slice(_)),M}]}))},6108:(t,e,i)=>{"use strict";i(6774);var n=i(7007),r=i(3218),o=i(7057),s="toString",a=/./.toString,c=function(t){i(7234)(RegExp.prototype,s,t,!0)};i(4253)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?c((function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?r.call(t):void 0)})):a.name!=s&&c((function(){return a.call(this)}))},8184:(t,e,i)=>{"use strict";var n=i(9824),r=i(1616);t.exports=i(5795)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(r(this,"Set"),t=0===t?0:t,t)}},n)},856:(t,e,i)=>{"use strict";i(9395)("anchor",(function(t){return function(e){return t(this,"a","name",e)}}))},703:(t,e,i)=>{"use strict";i(9395)("big",(function(t){return function(){return t(this,"big","","")}}))},1539:(t,e,i)=>{"use strict";i(9395)("blink",(function(t){return function(){return t(this,"blink","","")}}))},5292:(t,e,i)=>{"use strict";i(9395)("bold",(function(t){return function(){return t(this,"b","","")}}))},9539:(t,e,i)=>{"use strict";var n=i(2985),r=i(4496)(!1);n(n.P,"String",{codePointAt:function(t){return r(this,t)}})},6620:(t,e,i)=>{"use strict";var n=i(2985),r=i(875),o=i(2094),s="endsWith",a="".endsWith;n(n.P+n.F*i(8852)(s),"String",{endsWith:function(t){var e=o(this,t,s),i=arguments.length>1?arguments[1]:void 0,n=r(e.length),c=void 0===i?n:Math.min(r(i),n),l=String(t);return a?a.call(e,l,c):e.slice(c-l.length,c)===l}})},6629:(t,e,i)=>{"use strict";i(9395)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},3694:(t,e,i)=>{"use strict";i(9395)("fontcolor",(function(t){return function(e){return t(this,"font","color",e)}}))},7648:(t,e,i)=>{"use strict";i(9395)("fontsize",(function(t){return function(e){return t(this,"font","size",e)}}))},191:(t,e,i)=>{var n=i(2985),r=i(2337),o=String.fromCharCode,s=String.fromCodePoint;n(n.S+n.F*(!!s&&1!=s.length),"String",{fromCodePoint:function(t){for(var e,i=[],n=arguments.length,s=0;n>s;){if(e=+arguments[s++],r(e,1114111)!==e)throw RangeError(e+" is not a valid code point");i.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return i.join("")}})},2850:(t,e,i)=>{"use strict";var n=i(2985),r=i(2094),o="includes";n(n.P+n.F*i(8852)(o),"String",{includes:function(t){return!!~r(this,t,o).indexOf(t,arguments.length>1?arguments[1]:void 0)}})},7795:(t,e,i)=>{"use strict";i(9395)("italics",(function(t){return function(){return t(this,"i","","")}}))},9115:(t,e,i)=>{"use strict";var n=i(4496)(!0);i(2923)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,i=this._i;return i>=e.length?{value:void 0,done:!0}:(t=n(e,i),this._i+=t.length,{value:t,done:!1})}))},4531:(t,e,i)=>{"use strict";i(9395)("link",(function(t){return function(e){return t(this,"a","href",e)}}))},8306:(t,e,i)=>{var n=i(2985),r=i(2110),o=i(875);n(n.S,"String",{raw:function(t){for(var e=r(t.raw),i=o(e.length),n=arguments.length,s=[],a=0;i>a;)s.push(String(e[a++])),a<n&&s.push(String(arguments[a]));return s.join("")}})},823:(t,e,i)=>{var n=i(2985);n(n.P,"String",{repeat:i(8595)})},3605:(t,e,i)=>{"use strict";i(9395)("small",(function(t){return function(){return t(this,"small","","")}}))},7732:(t,e,i)=>{"use strict";var n=i(2985),r=i(875),o=i(2094),s="startsWith",a="".startsWith;n(n.P+n.F*i(8852)(s),"String",{startsWith:function(t){var e=o(this,t,s),i=r(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return a?a.call(e,n,i):e.slice(i,i+n.length)===n}})},6780:(t,e,i)=>{"use strict";i(9395)("strike",(function(t){return function(){return t(this,"strike","","")}}))},9937:(t,e,i)=>{"use strict";i(9395)("sub",(function(t){return function(){return t(this,"sub","","")}}))},511:(t,e,i)=>{"use strict";i(9395)("sup",(function(t){return function(){return t(this,"sup","","")}}))},4564:(t,e,i)=>{"use strict";i(9599)("trim",(function(t){return function(){return t(this,3)}}))},5767:(t,e,i)=>{"use strict";var n=i(3816),r=i(9181),o=i(7057),s=i(2985),a=i(7234),c=i(4728).KEY,l=i(4253),h=i(3825),u=i(2943),f=i(3953),d=i(6314),p=i(8787),g=i(6074),m=i(5541),v=i(4302),x=i(7007),b=i(5286),y=i(508),_=i(2110),w=i(1689),M=i(681),S=i(2503),k=i(9327),P=i(8693),O=i(4548),E=i(9275),A=i(7184),D=P.f,L=E.f,T=k.f,C=n.Symbol,R=n.JSON,F=R&&R.stringify,I=d("_hidden"),j=d("toPrimitive"),N={}.propertyIsEnumerable,z=h("symbol-registry"),V=h("symbols"),B=h("op-symbols"),W=Object.prototype,H="function"==typeof C&&!!O.f,$=n.QObject,U=!$||!$.prototype||!$.prototype.findChild,Y=o&&l((function(){return 7!=S(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a}))?function(t,e,i){var n=D(W,e);n&&delete W[e],L(t,e,i),n&&t!==W&&L(W,e,n)}:L,G=function(t){var e=V[t]=S(C.prototype);return e._k=t,e},X=H&&"symbol"==typeof C.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof C},q=function(t,e,i){return t===W&&q(B,e,i),x(t),e=w(e,!0),x(i),r(V,e)?(i.enumerable?(r(t,I)&&t[I][e]&&(t[I][e]=!1),i=S(i,{enumerable:M(0,!1)})):(r(t,I)||L(t,I,M(1,{})),t[I][e]=!0),Y(t,e,i)):L(t,e,i)},K=function(t,e){x(t);for(var i,n=m(e=_(e)),r=0,o=n.length;o>r;)q(t,i=n[r++],e[i]);return t},J=function(t){var e=N.call(this,t=w(t,!0));return!(this===W&&r(V,t)&&!r(B,t))&&(!(e||!r(this,t)||!r(V,t)||r(this,I)&&this[I][t])||e)},Z=function(t,e){if(t=_(t),e=w(e,!0),t!==W||!r(V,e)||r(B,e)){var i=D(t,e);return!i||!r(V,e)||r(t,I)&&t[I][e]||(i.enumerable=!0),i}},Q=function(t){for(var e,i=T(_(t)),n=[],o=0;i.length>o;)r(V,e=i[o++])||e==I||e==c||n.push(e);return n},tt=function(t){for(var e,i=t===W,n=T(i?B:_(t)),o=[],s=0;n.length>s;)!r(V,e=n[s++])||i&&!r(W,e)||o.push(V[e]);return o};H||(a((C=function(){if(this instanceof C)throw TypeError("Symbol is not a constructor!");var t=f(arguments.length>0?arguments[0]:void 0),e=function(i){this===W&&e.call(B,i),r(this,I)&&r(this[I],t)&&(this[I][t]=!1),Y(this,t,M(1,i))};return o&&U&&Y(W,t,{configurable:!0,set:e}),G(t)}).prototype,"toString",(function(){return this._k})),P.f=Z,E.f=q,i(616).f=k.f=Q,i(4682).f=J,O.f=tt,o&&!i(4461)&&a(W,"propertyIsEnumerable",J,!0),p.f=function(t){return G(d(t))}),s(s.G+s.W+s.F*!H,{Symbol:C});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),it=0;et.length>it;)d(et[it++]);for(var nt=A(d.store),rt=0;nt.length>rt;)g(nt[rt++]);s(s.S+s.F*!H,"Symbol",{for:function(t){return r(z,t+="")?z[t]:z[t]=C(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var e in z)if(z[e]===t)return e},useSetter:function(){U=!0},useSimple:function(){U=!1}}),s(s.S+s.F*!H,"Object",{create:function(t,e){return void 0===e?S(t):K(S(t),e)},defineProperty:q,defineProperties:K,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var ot=l((function(){O.f(1)}));s(s.S+s.F*ot,"Object",{getOwnPropertySymbols:function(t){return O.f(y(t))}}),R&&s(s.S+s.F*(!H||l((function(){var t=C();return"[null]"!=F([t])||"{}"!=F({a:t})||"{}"!=F(Object(t))}))),"JSON",{stringify:function(t){for(var e,i,n=[t],r=1;arguments.length>r;)n.push(arguments[r++]);if(i=e=n[1],(b(e)||void 0!==t)&&!X(t))return v(e)||(e=function(t,e){if("function"==typeof i&&(e=i.call(this,t,e)),!X(e))return e}),n[1]=e,F.apply(R,n)}}),C.prototype[j]||i(7728)(C.prototype,j,C.prototype.valueOf),u(C,"Symbol"),u(Math,"Math",!0),u(n.JSON,"JSON",!0)},142:(t,e,i)=>{"use strict";var n=i(2985),r=i(9383),o=i(1125),s=i(7007),a=i(2337),c=i(875),l=i(5286),h=i(3816).ArrayBuffer,u=i(8364),f=o.ArrayBuffer,d=o.DataView,p=r.ABV&&h.isView,g=f.prototype.slice,m=r.VIEW,v="ArrayBuffer";n(n.G+n.W+n.F*(h!==f),{ArrayBuffer:f}),n(n.S+n.F*!r.CONSTR,v,{isView:function(t){return p&&p(t)||l(t)&&m in t}}),n(n.P+n.U+n.F*i(4253)((function(){return!new f(2).slice(1,void 0).byteLength})),v,{slice:function(t,e){if(void 0!==g&&void 0===e)return g.call(s(this),t);for(var i=s(this).byteLength,n=a(t,i),r=a(void 0===e?i:e,i),o=new(u(this,f))(c(r-n)),l=new d(this),h=new d(o),p=0;n<r;)h.setUint8(p++,l.getUint8(n++));return o}}),i(2974)(v)},1786:(t,e,i)=>{var n=i(2985);n(n.G+n.W+n.F*!i(9383).ABV,{DataView:i(1125).DataView})},162:(t,e,i)=>{i(8440)("Float32",4,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},3834:(t,e,i)=>{i(8440)("Float64",8,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},4821:(t,e,i)=>{i(8440)("Int16",2,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},1303:(t,e,i)=>{i(8440)("Int32",4,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},5368:(t,e,i)=>{i(8440)("Int8",1,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},9103:(t,e,i)=>{i(8440)("Uint16",2,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},3318:(t,e,i)=>{i(8440)("Uint32",4,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},6964:(t,e,i)=>{i(8440)("Uint8",1,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},2152:(t,e,i)=>{i(8440)("Uint8",1,(function(t){return function(e,i,n){return t(this,e,i,n)}}),!0)},147:(t,e,i)=>{"use strict";var n,r=i(3816),o=i(50)(0),s=i(7234),a=i(4728),c=i(5345),l=i(3657),h=i(5286),u=i(1616),f=i(1616),d=!r.ActiveXObject&&"ActiveXObject"in r,p="WeakMap",g=a.getWeak,m=Object.isExtensible,v=l.ufstore,x=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},b={get:function(t){if(h(t)){var e=g(t);return!0===e?v(u(this,p)).get(t):e?e[this._i]:void 0}},set:function(t,e){return l.def(u(this,p),t,e)}},y=t.exports=i(5795)(p,x,b,l,!0,!0);f&&d&&(c((n=l.getConstructor(x,p)).prototype,b),a.NEED=!0,o(["delete","has","get","set"],(function(t){var e=y.prototype,i=e[t];s(e,t,(function(e,r){if(h(e)&&!m(e)){this._f||(this._f=new n);var o=this._f[t](e,r);return"set"==t?this:o}return i.call(this,e,r)}))})))},9192:(t,e,i)=>{"use strict";var n=i(3657),r=i(1616),o="WeakSet";i(5795)(o,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(r(this,o),t,!0)}},n,!1,!0)},1268:(t,e,i)=>{"use strict";var n=i(2985),r=i(3325),o=i(508),s=i(875),a=i(4963),c=i(6886);n(n.P,"Array",{flatMap:function(t){var e,i,n=o(this);return a(t),e=s(n.length),i=c(n,0),r(i,n,n,e,0,1,t,arguments[1]),i}}),i(7722)("flatMap")},4692:(t,e,i)=>{"use strict";var n=i(2985),r=i(3325),o=i(508),s=i(875),a=i(1467),c=i(6886);n(n.P,"Array",{flatten:function(){var t=arguments[0],e=o(this),i=s(e.length),n=c(e,0);return r(n,e,e,i,0,void 0===t?1:a(t)),n}}),i(7722)("flatten")},2773:(t,e,i)=>{"use strict";var n=i(2985),r=i(9315)(!0);n(n.P,"Array",{includes:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(7722)("includes")},8267:(t,e,i)=>{var n=i(2985),r=i(4351)(),o=i(3816).process,s="process"==i(2032)(o);n(n.G,{asap:function(t){var e=s&&o.domain;r(e?e.bind(t):t)}})},2559:(t,e,i)=>{var n=i(2985),r=i(2032);n(n.S,"Error",{isError:function(t){return"Error"===r(t)}})},5575:(t,e,i)=>{var n=i(2985);n(n.G,{global:i(3816)})},525:(t,e,i)=>{i(1024)("Map")},8211:(t,e,i)=>{i(4881)("Map")},7698:(t,e,i)=>{var n=i(2985);n(n.P+n.R,"Map",{toJSON:i(6132)("Map")})},8865:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{clamp:function(t,e,i){return Math.min(i,Math.max(e,t))}})},368:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{DEG_PER_RAD:Math.PI/180})},6427:(t,e,i)=>{var n=i(2985),r=180/Math.PI;n(n.S,"Math",{degrees:function(t){return t*r}})},286:(t,e,i)=>{var n=i(2985),r=i(8757),o=i(4934);n(n.S,"Math",{fscale:function(t,e,i,n,s){return o(r(t,e,i,n,s))}})},2816:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{iaddh:function(t,e,i,n){var r=t>>>0,o=i>>>0;return(e>>>0)+(n>>>0)+((r&o|(r|o)&~(r+o>>>0))>>>31)|0}})},2082:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{imulh:function(t,e){var i=65535,n=+t,r=+e,o=n&i,s=r&i,a=n>>16,c=r>>16,l=(a*s>>>0)+(o*s>>>16);return a*c+(l>>16)+((o*c>>>0)+(l&i)>>16)}})},5986:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{isubh:function(t,e,i,n){var r=t>>>0,o=i>>>0;return(e>>>0)-(n>>>0)-((~r&o|~(r^o)&r-o>>>0)>>>31)|0}})},6308:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{RAD_PER_DEG:180/Math.PI})},9221:(t,e,i)=>{var n=i(2985),r=Math.PI/180;n(n.S,"Math",{radians:function(t){return t*r}})},3570:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{scale:i(8757)})},3776:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},6754:(t,e,i)=>{var n=i(2985);n(n.S,"Math",{umulh:function(t,e){var i=65535,n=+t,r=+e,o=n&i,s=r&i,a=n>>>16,c=r>>>16,l=(a*s>>>0)+(o*s>>>16);return a*c+(l>>>16)+((o*c>>>0)+(l&i)>>>16)}})},8646:(t,e,i)=>{"use strict";var n=i(2985),r=i(508),o=i(4963),s=i(9275);i(7057)&&n(n.P+i(1670),"Object",{__defineGetter__:function(t,e){s.f(r(this),t,{get:o(e),enumerable:!0,configurable:!0})}})},2658:(t,e,i)=>{"use strict";var n=i(2985),r=i(508),o=i(4963),s=i(9275);i(7057)&&n(n.P+i(1670),"Object",{__defineSetter__:function(t,e){s.f(r(this),t,{set:o(e),enumerable:!0,configurable:!0})}})},3276:(t,e,i)=>{var n=i(2985),r=i(1131)(!0);n(n.S,"Object",{entries:function(t){return r(t)}})},8351:(t,e,i)=>{var n=i(2985),r=i(7643),o=i(2110),s=i(8693),a=i(2811);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,i,n=o(t),c=s.f,l=r(n),h={},u=0;l.length>u;)void 0!==(i=c(n,e=l[u++]))&&a(h,e,i);return h}})},6917:(t,e,i)=>{"use strict";var n=i(2985),r=i(508),o=i(1689),s=i(468),a=i(8693).f;i(7057)&&n(n.P+i(1670),"Object",{__lookupGetter__:function(t){var e,i=r(this),n=o(t,!0);do{if(e=a(i,n))return e.get}while(i=s(i))}})},372:(t,e,i)=>{"use strict";var n=i(2985),r=i(508),o=i(1689),s=i(468),a=i(8693).f;i(7057)&&n(n.P+i(1670),"Object",{__lookupSetter__:function(t){var e,i=r(this),n=o(t,!0);do{if(e=a(i,n))return e.set}while(i=s(i))}})},6409:(t,e,i)=>{var n=i(2985),r=i(1131)(!1);n(n.S,"Object",{values:function(t){return r(t)}})},6534:(t,e,i)=>{"use strict";var n=i(2985),r=i(3816),o=i(5645),s=i(4351)(),a=i(6314)("observable"),c=i(4963),l=i(7007),h=i(3328),u=i(4408),f=i(7728),d=i(3531),p=d.RETURN,g=function(t){return null==t?void 0:c(t)},m=function(t){var e=t._c;e&&(t._c=void 0,e())},v=function(t){return void 0===t._o},x=function(t){v(t)||(t._o=void 0,m(t))},b=function(t,e){l(t),this._c=void 0,this._o=t,t=new y(this);try{var i=e(t),n=i;null!=i&&("function"==typeof i.unsubscribe?i=function(){n.unsubscribe()}:c(i),this._c=i)}catch(e){return void t.error(e)}v(this)&&m(this)};b.prototype=u({},{unsubscribe:function(){x(this)}});var y=function(t){this._s=t};y.prototype=u({},{next:function(t){var e=this._s;if(!v(e)){var i=e._o;try{var n=g(i.next);if(n)return n.call(i,t)}catch(t){try{x(e)}finally{throw t}}}},error:function(t){var e=this._s;if(v(e))throw t;var i=e._o;e._o=void 0;try{var n=g(i.error);if(!n)throw t;t=n.call(i,t)}catch(t){try{m(e)}finally{throw t}}return m(e),t},complete:function(t){var e=this._s;if(!v(e)){var i=e._o;e._o=void 0;try{var n=g(i.complete);t=n?n.call(i,t):void 0}catch(t){try{m(e)}finally{throw t}}return m(e),t}}});var _=function(t){h(this,_,"Observable","_f")._f=c(t)};u(_.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(o.Promise||r.Promise)((function(i,n){c(t);var r=e.subscribe({next:function(e){try{return t(e)}catch(t){n(t),r.unsubscribe()}},error:n,complete:i})}))}}),u(_,{from:function(t){var e="function"==typeof this?this:_,i=g(l(t)[a]);if(i){var n=l(i.call(t));return n.constructor===e?n:new e((function(t){return n.subscribe(t)}))}return new e((function(e){var i=!1;return s((function(){if(!i){try{if(d(t,!1,(function(t){if(e.next(t),i)return p}))===p)return}catch(t){if(i)throw t;return void e.error(t)}e.complete()}})),function(){i=!0}}))},of:function(){for(var t=0,e=arguments.length,i=new Array(e);t<e;)i[t]=arguments[t++];return new("function"==typeof this?this:_)((function(t){var e=!1;return s((function(){if(!e){for(var n=0;n<i.length;++n)if(t.next(i[n]),e)return;t.complete()}})),function(){e=!0}}))}}),f(_.prototype,a,(function(){return this})),n(n.G,{Observable:_}),i(2974)("Observable")},9865:(t,e,i)=>{"use strict";var n=i(2985),r=i(5645),o=i(3816),s=i(8364),a=i(94);n(n.P+n.R,"Promise",{finally:function(t){var e=s(this,r.Promise||o.Promise),i="function"==typeof t;return this.then(i?function(i){return a(e,t()).then((function(){return i}))}:t,i?function(i){return a(e,t()).then((function(){throw i}))}:t)}})},1898:(t,e,i)=>{"use strict";var n=i(2985),r=i(3499),o=i(188);n(n.S,"Promise",{try:function(t){var e=r.f(this),i=o(t);return(i.e?e.reject:e.resolve)(i.v),e.promise}})},3364:(t,e,i)=>{var n=i(133),r=i(7007),o=n.key,s=n.set;n.exp({defineMetadata:function(t,e,i,n){s(t,e,r(i),o(n))}})},1432:(t,e,i)=>{var n=i(133),r=i(7007),o=n.key,s=n.map,a=n.store;n.exp({deleteMetadata:function(t,e){var i=arguments.length<3?void 0:o(arguments[2]),n=s(r(e),i,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var c=a.get(e);return c.delete(i),!!c.size||a.delete(e)}})},4416:(t,e,i)=>{var n=i(8184),r=i(9490),o=i(133),s=i(7007),a=i(468),c=o.keys,l=o.key,h=function(t,e){var i=c(t,e),o=a(t);if(null===o)return i;var s=h(o,e);return s.length?i.length?r(new n(i.concat(s))):s:i};o.exp({getMetadataKeys:function(t){return h(s(t),arguments.length<2?void 0:l(arguments[1]))}})},6562:(t,e,i)=>{var n=i(133),r=i(7007),o=i(468),s=n.has,a=n.get,c=n.key,l=function(t,e,i){if(s(t,e,i))return a(t,e,i);var n=o(e);return null!==n?l(t,n,i):void 0};n.exp({getMetadata:function(t,e){return l(t,r(e),arguments.length<3?void 0:c(arguments[2]))}})},2213:(t,e,i)=>{var n=i(133),r=i(7007),o=n.keys,s=n.key;n.exp({getOwnMetadataKeys:function(t){return o(r(t),arguments.length<2?void 0:s(arguments[1]))}})},8681:(t,e,i)=>{var n=i(133),r=i(7007),o=n.get,s=n.key;n.exp({getOwnMetadata:function(t,e){return o(t,r(e),arguments.length<3?void 0:s(arguments[2]))}})},3471:(t,e,i)=>{var n=i(133),r=i(7007),o=i(468),s=n.has,a=n.key,c=function(t,e,i){if(s(t,e,i))return!0;var n=o(e);return null!==n&&c(t,n,i)};n.exp({hasMetadata:function(t,e){return c(t,r(e),arguments.length<3?void 0:a(arguments[2]))}})},4329:(t,e,i)=>{var n=i(133),r=i(7007),o=n.has,s=n.key;n.exp({hasOwnMetadata:function(t,e){return o(t,r(e),arguments.length<3?void 0:s(arguments[2]))}})},5159:(t,e,i)=>{var n=i(133),r=i(7007),o=i(4963),s=n.key,a=n.set;n.exp({metadata:function(t,e){return function(i,n){a(t,e,(void 0!==n?r:o)(i),s(n))}}})},9467:(t,e,i)=>{i(1024)("Set")},4837:(t,e,i)=>{i(4881)("Set")},8739:(t,e,i)=>{var n=i(2985);n(n.P+n.R,"Set",{toJSON:i(6132)("Set")})},7220:(t,e,i)=>{"use strict";var n=i(2985),r=i(4496)(!0),o=i(4253)((function(){return"𠮷"!=="𠮷".at(0)}));n(n.P+n.F*o,"String",{at:function(t){return r(this,t)}})},4208:(t,e,i)=>{"use strict";var n=i(2985),r=i(1355),o=i(875),s=i(5364),a=i(3218),c=RegExp.prototype,l=function(t,e){this._r=t,this._s=e};i(9988)(l,"RegExp String",(function(){var t=this._r.exec(this._s);return{value:t,done:null===t}})),n(n.P,"String",{matchAll:function(t){if(r(this),!s(t))throw TypeError(t+" is not a regexp!");var e=String(this),i="flags"in c?String(t.flags):a.call(t),n=new RegExp(t.source,~i.indexOf("g")?i:"g"+i);return n.lastIndex=o(t.lastIndex),new l(n,e)}})},2770:(t,e,i)=>{"use strict";var n=i(2985),r=i(5442),o=i(575),s=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);n(n.P+n.F*s,"String",{padEnd:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},1784:(t,e,i)=>{"use strict";var n=i(2985),r=i(5442),o=i(575),s=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);n(n.P+n.F*s,"String",{padStart:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},5869:(t,e,i)=>{"use strict";i(9599)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},4325:(t,e,i)=>{"use strict";i(9599)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},9665:(t,e,i)=>{i(6074)("asyncIterator")},9593:(t,e,i)=>{i(6074)("observable")},8967:(t,e,i)=>{var n=i(2985);n(n.S,"System",{global:i(3816)})},4188:(t,e,i)=>{i(1024)("WeakMap")},7594:(t,e,i)=>{i(4881)("WeakMap")},3495:(t,e,i)=>{i(1024)("WeakSet")},9550:(t,e,i)=>{i(4881)("WeakSet")},1181:(t,e,i)=>{for(var n=i(6997),r=i(7184),o=i(7234),s=i(3816),a=i(7728),c=i(2803),l=i(6314),h=l("iterator"),u=l("toStringTag"),f=c.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=r(d),g=0;g<p.length;g++){var m,v=p[g],x=d[v],b=s[v],y=b&&b.prototype;if(y&&(y[h]||a(y,h,f),y[u]||a(y,u,v),c[v]=f,x))for(m in n)y[m]||o(y,m,n[m],!0)}},4633:(t,e,i)=>{var n=i(2985),r=i(4193);n(n.G+n.B,{setImmediate:r.set,clearImmediate:r.clear})},2564:(t,e,i)=>{var n=i(3816),r=i(2985),o=i(575),s=[].slice,a=/MSIE .\./.test(o),c=function(t){return function(e,i){var n=arguments.length>2,r=!!n&&s.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,r)}:e,i)}};r(r.G+r.B+r.F*a,{setTimeout:c(n.setTimeout),setInterval:c(n.setInterval)})},1934:(t,e,i)=>{i(5767),i(8132),i(8388),i(7470),i(4882),i(1520),i(7476),i(9622),i(9375),i(3533),i(4672),i(4157),i(5095),i(9892),i(5115),i(9176),i(8838),i(6253),i(9730),i(6059),i(8377),i(1084),i(4299),i(1246),i(726),i(1901),i(5972),i(3403),i(2516),i(9371),i(6479),i(1736),i(1889),i(5177),i(6943),i(6503),i(6786),i(932),i(7526),i(1591),i(9073),i(347),i(579),i(4669),i(7710),i(5789),i(3514),i(9978),i(8472),i(6946),i(5068),i(413),i(191),i(8306),i(4564),i(9115),i(9539),i(6620),i(2850),i(823),i(7732),i(856),i(703),i(1539),i(5292),i(6629),i(3694),i(7648),i(7795),i(4531),i(3605),i(6780),i(9937),i(511),i(1822),i(9977),i(1031),i(6331),i(1560),i(774),i(522),i(8295),i(7842),i(110),i(75),i(4336),i(1802),i(8837),i(6773),i(5745),i(3057),i(3750),i(3369),i(9564),i(2e3),i(8977),i(2310),i(4899),i(1842),i(6997),i(3946),i(8269),i(6108),i(6774),i(1466),i(9357),i(6142),i(1876),i(851),i(8416),i(8184),i(147),i(9192),i(142),i(1786),i(5368),i(6964),i(2152),i(4821),i(9103),i(1303),i(3318),i(162),i(3834),i(1572),i(2139),i(685),i(5535),i(7347),i(3049),i(6633),i(8989),i(8270),i(4510),i(3984),i(5769),i(55),i(6014),i(2773),i(1268),i(4692),i(7220),i(1784),i(2770),i(5869),i(4325),i(4208),i(9665),i(9593),i(8351),i(6409),i(3276),i(8646),i(2658),i(6917),i(372),i(7698),i(8739),i(8211),i(4837),i(7594),i(9550),i(525),i(9467),i(4188),i(3495),i(5575),i(8967),i(2559),i(8865),i(368),i(6427),i(286),i(2816),i(5986),i(2082),i(6308),i(9221),i(3570),i(6754),i(3776),i(9865),i(1898),i(3364),i(1432),i(6562),i(4416),i(8681),i(2213),i(3471),i(4329),i(5159),i(8267),i(6534),i(2564),i(4633),i(1181),t.exports=i(5645)},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var h=[].concat(t[l]);n&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(r," */"),s=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},5666:t=>{var e=function(t){"use strict";var e,i=Object.prototype,n=i.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",s=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function c(t,e,i){return Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,i){return t[e]=i}}function l(t,e,i,n){var r=e&&e.prototype instanceof m?e:m,o=Object.create(r.prototype),s=new E(n||[]);return o._invoke=function(t,e,i){var n=u;return function(r,o){if(n===d)throw new Error("Generator is already running");if(n===p){if("throw"===r)throw o;return D()}for(i.method=r,i.arg=o;;){var s=i.delegate;if(s){var a=k(s,i);if(a){if(a===g)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(n===u)throw n=p,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n=d;var c=h(t,e,i);if("normal"===c.type){if(n=i.done?p:f,c.arg===g)continue;return{value:c.arg,done:i.done}}"throw"===c.type&&(n=p,i.method="throw",i.arg=c.arg)}}}(t,i,s),o}function h(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var u="suspendedStart",f="suspendedYield",d="executing",p="completed",g={};function m(){}function v(){}function x(){}var b={};c(b,o,(function(){return this}));var y=Object.getPrototypeOf,_=y&&y(y(A([])));_&&_!==i&&n.call(_,o)&&(b=_);var w=x.prototype=m.prototype=Object.create(b);function M(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function S(t,e){function i(r,o,s,a){var c=h(t[r],t,o);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==typeof u&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){i("next",t,s,a)}),(function(t){i("throw",t,s,a)})):e.resolve(u).then((function(t){l.value=t,s(l)}),(function(t){return i("throw",t,s,a)}))}a(c.arg)}var r;this._invoke=function(t,n){function o(){return new e((function(e,r){i(t,n,e,r)}))}return r=r?r.then(o,o):o()}}function k(t,i){var n=t.iterator[i.method];if(n===e){if(i.delegate=null,"throw"===i.method){if(t.iterator.return&&(i.method="return",i.arg=e,k(t,i),"throw"===i.method))return g;i.method="throw",i.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var r=h(n,t.iterator,i.arg);if("throw"===r.type)return i.method="throw",i.arg=r.arg,i.delegate=null,g;var o=r.arg;return o?o.done?(i[t.resultName]=o.value,i.next=t.nextLoc,"return"!==i.method&&(i.method="next",i.arg=e),i.delegate=null,g):o:(i.method="throw",i.arg=new TypeError("iterator result is not an object"),i.delegate=null,g)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function A(t){if(t){var i=t[o];if(i)return i.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,s=function i(){for(;++r<t.length;)if(n.call(t,r))return i.value=t[r],i.done=!1,i;return i.value=e,i.done=!0,i};return s.next=s}}return{next:D}}function D(){return{value:e,done:!0}}return v.prototype=x,c(w,"constructor",x),c(x,"constructor",v),v.displayName=c(x,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,c(t,a,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},M(S.prototype),c(S.prototype,s,(function(){return this})),t.AsyncIterator=S,t.async=function(e,i,n,r,o){void 0===o&&(o=Promise);var s=new S(l(e,i,n,r),o);return t.isGeneratorFunction(i)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},M(w),c(w,a,"Generator"),c(w,o,(function(){return this})),c(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var i in t)e.push(i);return e.reverse(),function i(){for(;e.length;){var n=e.pop();if(n in t)return i.value=n,i.done=!1,i}return i.done=!0,i}},t.values=A,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var i in this)"t"===i.charAt(0)&&n.call(this,i)&&!isNaN(+i.slice(1))&&(this[i]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var i=this;function r(n,r){return a.type="throw",a.arg=t,i.next=n,r&&(i.method="next",i.arg=e),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return r("end");if(s.tryLoc<=this.prev){var c=n.call(s,"catchLoc"),l=n.call(s,"finallyLoc");if(c&&l){if(this.prev<s.catchLoc)return r(s.catchLoc,!0);if(this.prev<s.finallyLoc)return r(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return r(s.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return r(s.finallyLoc)}}}},abrupt:function(t,e){for(var i=this.tryEntries.length-1;i>=0;--i){var r=this.tryEntries[i];if(r.tryLoc<=this.prev&&n.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),O(i),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var r=n.arg;O(i)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,i,n){return this.delegate={iterator:A(t),resultName:i,nextLoc:n},"next"===this.method&&(this.arg=e),g}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},3379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],l=n.base?c[0]+n.base:c[0],h=o[l]||0,u="".concat(l," ").concat(h);o[l]=h+1;var f=i(u),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var p=r(d,n);n.byIndex=a,e.splice(a,0,{identifier:u,updater:p,references:1})}s.push(u)}return s}function r(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,r){var o=n(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=i(o[s]);e[a].references--}for(var c=n(t,r),l=0;l<o.length;l++){var h=i(o[l]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=c}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},3380:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var r=void 0!==i.layer;r&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,r&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,